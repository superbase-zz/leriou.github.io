[{"title":"霹雳布袋戏分享","url":"/2015-01-23-pili-words/","content":"<p>我看布袋戏很久了，一直以来都很佩服布袋戏的编剧 (编剧号称”十车书”, 其实是一个编剧组, 很多人一起进行编剧，每个人只负责一部分)。因为我不仅仅看剧情， 同时还会去琢磨剧里面人物怎么处理问题怎么解决矛盾 。</p>\n<p>我还曾试图学习素还真的为人处世方式 😂 (然而很明显, 素老奸的境界我是肯定模仿不来的)。一个人的性格和行为习惯哪是那么容易就能改变的啊, 没有那份阅历, 就做不到那样的境界。不过这不妨碍我喜欢里面的一些观点和台词</p>\n<h2 id=\"下面收集了一些布袋戏里面-我觉得不错的台词\"><a href=\"#下面收集了一些布袋戏里面-我觉得不错的台词\" class=\"headerlink\" title=\"下面收集了一些布袋戏里面, 我觉得不错的台词\"></a><strong>下面收集了一些布袋戏里面, 我觉得不错的台词</strong></h2><ol>\n<li><p>不懂幽默的人，总是拿着幽默当成盾牌，为自己的尖锐与伤害言语包装，强迫他人要为自己的流血的伤口大笑。你不能强迫别人接受肤浅的玩笑来当成幽默</p>\n</li>\n<li><p>很多时候，事情不能以对错来论，而是要用更温柔的心来表达自己的坚持与想法，如此一来，才不会伤人伤己。这世上，就是有太多自认为没错的人，将似是而非的道理当成了伤害他人的利器，站在道理高点的人，不代表他就是有依循道理的人</p>\n</li>\n<li><p>得意时谦卑，失意时纵容，向现实低头，是为自己下一次抬头做准备</p>\n</li>\n<li><p>宁可心在江湖言江湖，不可身在江湖厌江湖。</p>\n</li>\n<li><p>非黑即白的想法，有时是苦了自己，更会伤害他人</p>\n</li>\n<li><p>不懂不代表没有，不说不代表不在意。人会为了想保护自己、朋友而选择沉默或是据理力争，甚至是蒙骗，这都是人性之一</p>\n</li>\n<li><p>缄默沉静者大用有余，轻薄浮躁者小用不足；以浮躁为才则必坏事，以沉静为拙则必失人</p>\n</li>\n<li><p>遇横逆之来而不怒，遭变故之起而不惊，当非常之谤而不辩，可以任大事矣。</p>\n</li>\n<li><p>不必言而言，是谓多言，多言招尤；不当言而言，是谓盲言，盲言贾祸。</p>\n</li>\n<li><p>善良是一种美德，因为懦弱的不敢伤害别人，自卑的恐惧被人伤害，所以将施舍称为同情将暴露弱点叫作信任。</p>\n</li>\n<li><p>信用，是将自己利益无条件交给他人掌控，弱者遵守信用，因为他们必须依靠一套名叫道德的规则存活，敢背信的人，是拥有对方不敢报复的自信。</p>\n</li>\n<li><p>人啊，总是节制著自己当下的想法，总是期盼著下一秒、下一天、下一年，或者下辈子，所以才会错过机会。</p>\n</li>\n<li><p>这世上蠢人多，而聪明人少，多数表决其实是让多数蠢辈决定蠢事。</p>\n</li>\n<li><p>礼仪，是上者逼使下者更加屈服的心理枷锁，因为违背礼仪将招致祸害，所以让下者对上者，更加敬畏</p>\n</li>\n<li><p>无知与自信永远是结果论，胜利就是自信，失败就是无知。</p>\n</li>\n<li><p>多虚伪的言语，压抑心中的恐惧，说出自欺欺人的词句，谎言、哪有什么善意与恶意，本身都是因为无法承担后果而欺骗。</p>\n</li>\n<li><p>怜悯是什么?因为期望被人帮助，所以订下了帮助别人的规则。恻隐是什么?是恐惧这样被人对待，所以伸出援手，潜藏在人心深处的美德，真相是这个世间最大最丑陋的利益勾结。</p>\n</li>\n<li><p>理念不同便是魔，作风不同便是外道，这世上的人阿，因为不敢标新立异，所以苟同于别人的价值，这样的活著，何等的卑微。</p>\n</li>\n<li><p>佛修者广布慈悲，渡化魔邪，或者，渡化不成大义捐躯，魔阿，总是成就佛之功德，所有留传万世，可歌可泣的事迹，皆有魔之踪迹。</p>\n</li>\n<li><p>信仰，是一种排除异己的方式，就因为佛渡不了，所以将魔驱逐，这就是你所信奉的教义。</p>\n</li>\n<li><p>错谬啊，是他们被一种名叫道德的东西压抑了本性，因为一但违背了道德，就会被一股更强的群众力量制裁，所以压抑了自身的贪婪、欲望，更可悲是，他们被这股力量压得喘不过气之后却自愿成为这股力量的帮凶，再将仁义道德束缚在其他人的身上。看看这个世间，看看自己，多少东西是自己想要却是不敢去取，只因道德两字。吾，只是比天下间所有的人更透澈明嘹而已。</p>\n</li>\n<li><p>诸像心生，佛心见佛，魔心见魔，你们说我是魔，你们，心魔已生。</p>\n</li>\n<li><p>「忠、孝、节、义」就是作奴才的方式；忠是对君主作奴才；孝是对父母作奴才；节是对婚姻作奴才；义是对同侪作奴才，不是吗？</p>\n</li>\n</ol>\n<h2 id=\"布袋戏中有很多音乐不错\"><a href=\"#布袋戏中有很多音乐不错\" class=\"headerlink\" title=\"布袋戏中有很多音乐不错\"></a>布袋戏中有很多音乐不错</h2><p>以下挑选几首比较能表现角色的曲子</p>\n<h2 id=\"剑者传说\"><a href=\"#剑者传说\" class=\"headerlink\" title=\"剑者传说\"></a>剑者传说</h2><p>人物:殢(ti)无伤</p>\n<p>QQ音乐链接: </p>\n<p><a href=\"https://y.qq.com/n/yqq/song/000sKibz2FzuW4.html\" target=\"_blank\" rel=\"noopener\">https://y.qq.com/n/yqq/song/000sKibz2FzuW4.html</a></p>\n<blockquote>\n<p>这首音乐是殢无伤的角色配乐,我非常喜欢, 从音乐中感受到一种清静, 自由, 感觉殢无伤的生活很惬意</p>\n</blockquote>\n<h2 id=\"荒人邪影\"><a href=\"#荒人邪影\" class=\"headerlink\" title=\"荒人邪影\"></a>荒人邪影</h2><p>人物:一剑封禅(shan)</p>\n<p>QQ音乐链接:</p>\n<p><a href=\"https://y.qq.com/n/yqq/song/001EBctt13gzYk.html\" target=\"_blank\" rel=\"noopener\">https://y.qq.com/n/yqq/song/001EBctt13gzYk.html</a></p>\n<p>荒人邪影之封印记忆</p>\n<p>人物:吞佛童子</p>\n<p>QQ音乐链接:</p>\n<p><a href=\"https://y.qq.com/n/yqq/song/000mG2qu0mEOq9.html\" target=\"_blank\" rel=\"noopener\">https://y.qq.com/n/yqq/song/000mG2qu0mEOq9.html</a></p>\n<blockquote>\n<p>两首曲子乐器不同,第一首管乐给人感觉诡异中透漏着一丝丝的正气, 仿佛内心与外表截然不同, 虽然乍听感觉有一股邪气,但是仔细听又会发觉其实内里很正派<br>第二首曲子则不同,换成弦乐之后音调就比较真正的诡谲了,传达的气氛也变得更邪恶了,暗示人物已经被邪气蒙蔽,仔细分析虽然依然能察觉一丝正气, 但是已经很微弱了</p>\n</blockquote>\n<h2 id=\"赮毕钵罗\"><a href=\"#赮毕钵罗\" class=\"headerlink\" title=\"赮毕钵罗\"></a>赮毕钵罗</h2><p>人物:赮(xia)毕钵(bo)罗</p>\n<p>QQ音乐链接:</p>\n<p><a href=\"https://y.qq.com/n/yqq/song/000AfNL23UeMmU.html\" target=\"_blank\" rel=\"noopener\">https://y.qq.com/n/yqq/song/000AfNL23UeMmU.html</a></p>\n<blockquote>\n<p>开头的马头琴声给人的感觉还是比较空旷,隐隐透漏一股禅意,配合后面的琴声,禅意更浓,不禁让人回想起赮毕钵罗刚出场时候</p>\n</blockquote>\n<h2 id=\"羽獍弦歌\"><a href=\"#羽獍弦歌\" class=\"headerlink\" title=\"羽獍弦歌\"></a>羽獍弦歌</h2><p>人物:羽人非獍(jing)</p>\n<p>网易云链接:</p>\n<p><a href=\"https://music.163.com/#/song?id=375530\" target=\"_blank\" rel=\"noopener\">https://music.163.com/#/song?id=375530</a></p>\n<blockquote>\n<p>二胡本就适合悲曲,曲子本身的曲调也偏向悲怆,再回想起羽人非獍的经历真的是让人心中不免悲伤不已</p>\n</blockquote>\n<h2 id=\"夜雨寄北\"><a href=\"#夜雨寄北\" class=\"headerlink\" title=\"夜雨寄北\"></a>夜雨寄北</h2><p>人物:御不凡</p>\n<p>网易云链接:</p>\n<p><a href=\"https://music.163.com/#/song?id=373525\" target=\"_blank\" rel=\"noopener\">https://music.163.com/#/song?id=373525</a></p>\n<blockquote>\n<p>这个曲子本不悲伤,但是回想起御不凡此人的经历,就不免心痛了</p>\n</blockquote>\n","categories":["文化艺术"],"tags":["布袋戏"]},{"title":"学习游戏程序设计","url":"/2015-05-05-game-design/","content":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>这篇文章是写给编程初学者和完全不懂编程的小白的，目的是希望能通过这篇文章, 让大家知道一下游戏大概是怎么工作的，游戏中的画面是怎么显示出来的和游戏程序的大概结构。</p>\n<p>下面会找一个github上的h5塔防游戏举例子。这个游戏是我在准备毕业设计时候遇到的，当时好奇就花了点时间研究了一下</p>\n<h3 id=\"游戏的工作流程\"><a href=\"#游戏的工作流程\" class=\"headerlink\" title=\"游戏的工作流程\"></a>游戏的工作流程</h3><p>几乎市面上所有常见游戏都是通过如下循环进行的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">-&gt;</span><span class=\"bash\"> 游戏启动</span></span><br><span class=\"line\"><span class=\"meta\">-&gt;</span><span class=\"bash\"> 根据开始参数，给玩家展示一些画面，包括游戏界面，控制界面等</span></span><br><span class=\"line\"><span class=\"meta\">-&gt;</span><span class=\"bash\"> 然后持续获取玩家的反馈动作 </span></span><br><span class=\"line\"><span class=\"meta\">-&gt;</span><span class=\"bash\"> 根据玩家的操作，对游戏画面进行更新, 显示游戏画面 </span></span><br><span class=\"line\"><span class=\"meta\">-&gt;</span><span class=\"bash\"> 获取玩家反馈动作 </span></span><br><span class=\"line\"><span class=\"meta\">-&gt;</span><span class=\"bash\"> 继续显示新画面</span></span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"meta\">-&gt;</span><span class=\"bash\"> 玩家退出游戏</span></span><br><span class=\"line\"><span class=\"meta\">-&gt;</span><span class=\"bash\"> 结束</span></span><br></pre></td></tr></table></figure>\n\n<p>所谓的玩游戏的过程也就是游戏通过设备(键盘, 鼠标, 屏幕触控, 话筒)等形式获取到玩家反馈数据对游戏进行更新, 不断重复该过程, 直到达到游戏结束条件为止</p>\n<h3 id=\"游戏画面的显示\"><a href=\"#游戏画面的显示\" class=\"headerlink\" title=\"游戏画面的显示\"></a>游戏画面的显示</h3><p>我们看到的游戏的画面, 不管多酷炫, 归根到底可以看做一系列的连续播放的图片, 而每张图片我们又可以看做是一个固定分辨率的色彩数组。</p>\n<p>拿 1080*1920 分辨率, 60fps 的某一款游戏来说, 就是1s中给你播放60张1080p的图片给你看，那游戏怎么知道该给你看什么图片呢 ?</p>\n<p>图片的内容可以看成是一个 <code>1080(宽) * 1920(长) * 4(RGBA)</code>的数组, 只要把这个数组发送给显卡, 显卡就知道应该怎么显示, (为什么要用一维数组是因为基于性能考虑，一位数组的处理效率比高维数组要高)。</p>\n<p>游戏渲染的过程, 可以看做是根据用户反馈计算这一些列需要显示的数组的过程</p>\n<h3 id=\"游戏的通用结构\"><a href=\"#游戏的通用结构\" class=\"headerlink\" title=\"游戏的通用结构\"></a>游戏的通用结构</h3><p>从结构上说, 任何游戏, 实质上都是一个不断循环的程序, 当画面的处理和输出速度达到人眼视觉暂留的极限时(一般在30fps以上)，人就分不出来是不是真的实时了, 以此来模拟实时的效果, 早期的胶片电影使用的也是类似的原理</p>\n<p>任何游戏理论上都可以套用以下过程, 使用伪代码描述:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">load( config );              <span class=\"comment\">// 加载游戏配置</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>( game_is_running() ) &#123; <span class=\"comment\">// 游戏是否继续进行</span></span><br><span class=\"line\">    get_user_input(); \t     <span class=\"comment\">// 接受用户的输入</span></span><br><span class=\"line\">    do_something();  \t       <span class=\"comment\">// 根据用户输入处理数据处理</span></span><br><span class=\"line\">    check_stop();\t\t         <span class=\"comment\">// 查看是否满足结束条件</span></span><br><span class=\"line\">    render();\t\t\t           <span class=\"comment\">// 渲染页面,渲染一次就是fps</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>游戏的实质就是根据与用户交互, 不断的修改参数对页面进行渲染, 再接受用户输入, 这整个循环称为游戏的主循环。下面我将对一个简单的小塔防游戏进行分析, 来说明一下一个简单游戏的内部组成和功能实现</p>\n<h3 id=\"TF游戏\"><a href=\"#TF游戏\" class=\"headerlink\" title=\"TF游戏\"></a>TF游戏</h3><blockquote>\n<p>ps: TF只是一个游戏名字 </p>\n</blockquote>\n<h2 id=\"游戏地址\"><a href=\"#游戏地址\" class=\"headerlink\" title=\"游戏地址\"></a>游戏地址</h2><p>游戏地址: <a href=\"https://github.com/oldj/html5-tower-defense\" target=\"_blank\" rel=\"noopener\">https://github.com/oldj/html5-tower-defense</a></p>\n<h2 id=\"TF中的主循环做的事情\"><a href=\"#TF中的主循环做的事情\" class=\"headerlink\" title=\"TF中的主循环做的事情\"></a>TF中的主循环做的事情</h2><p>tf既然也是一个游戏自然就遵循上面所说的基本规则,</p>\n<p>tf游戏中的主要过程如下</p>\n<ol>\n<li>响应用户的点击事件</li>\n<li>根据用户的输入和触发的事件,更新游戏对象数据</li>\n<li>然后根据对象进行渲染</li>\n<li>判断游戏输赢(是否达到结束条件)</li>\n</ol>\n<h2 id=\"TF游戏中的各种子系统\"><a href=\"#TF游戏中的各种子系统\" class=\"headerlink\" title=\"TF游戏中的各种子系统\"></a>TF游戏中的各种子系统</h2><p>tf游戏虽小,但是却也是一个比较完善的游戏, 内部也是有许多的子系统构成</p>\n<h3 id=\"基本对象系统\"><a href=\"#基本对象系统\" class=\"headerlink\" title=\"基本对象系统\"></a>基本对象系统</h3><p>对象系统是tf的基础, 游戏中的所有会运动的怪物, 炮塔, 甚至包括文字, 按钮 都是对象系统的成员。但是,这些对象又具有一定的层级关系，游戏中的所有对象可以根据继承关系形成一个树状结构，之所以要建立对象系统是为了更好地以面向对象的形式来构建游戏，这种开发方式有助于降低开发难度。</p>\n<p>基本的对象系统是承载游戏数据的主要对象，各种游戏参数基本都表现为各种对象的各种属性，对象系统对上层的渲染系统提供渲染参数, 可以通过渲染系统把当前游戏运行状态可视化的显示出来。</p>\n<h3 id=\"事件系统\"><a href=\"#事件系统\" class=\"headerlink\" title=\"事件系统\"></a>事件系统</h3><p>事件系统是用户和游戏系统进行交互的窗口, 用户的所有操作都作为事件的形式被游戏所捕获。事件系统的功能主要是:收集用户的输入,提供事件来触发对数据的处理,实时的更新对象的数据。</p>\n<p>事件系统是控制游戏进程和与用户交互的重要通道，事件系统在游戏中起到触发器的作用, 告诉游戏中的对象,什么时候用户做了什么事情,你们需要做些什么。一般来说事件系统会用一个具有优先级的队列来实现</p>\n<h3 id=\"渲染引擎\"><a href=\"#渲染引擎\" class=\"headerlink\" title=\"渲染引擎\"></a>渲染引擎</h3><p>tf中的渲染系统主要负责根据对象参数渲染对象的UI效果</p>\n<p>画面中看到的小怪物,子弹, 文字, 建筑都是渲染系统来负责</p>\n<p>因为tf中没有用到图片,所有怪物和防御设施都是使用canvas绘制出来的, tf中的渲染系统承担的工作要更重一些</p>\n<p>渲染系统是游戏的核心功能之一</p>\n<p>渲染程序的运行依赖于当前游戏中的各种对象和参数状态</p>\n<p>用户的某种动作触发了事件之后,对应的对象的参数和状态会进行重新计算</p>\n<p>新的对象需要有渲染引擎来进行绘图和显示</p>\n<p>渲染系统是游戏内部状态的展示窗口, 核心功能是讲当前游戏内部状态以友好的方式呈现给用户</p>\n<h3 id=\"物理引擎\"><a href=\"#物理引擎\" class=\"headerlink\" title=\"物理引擎\"></a>物理引擎</h3><p>物理引擎在游戏中主要充当工具箱的作用, 属于渲染系统中的基础组件</p>\n<p>主要的功能像<code>寻路算法</code>, <code>碰撞检测</code>等都属于物理引擎的范畴</p>\n<p>物理引擎可以赋予对象真实世界物体的各种效果</p>\n<p>负责计算渲染系统需要的各种描述状态的参数数据</p>\n<p>物理引擎是我们衡量一个游戏等级的重要依据</p>\n<p>目前还没有游戏能实现完整的模拟现实世界的物理引擎</p>\n<p>更加复杂的化学引擎也目前没人能实现</p>\n<p>理想的游戏引擎是能按照现实世界的各种粒子特性</p>\n<p>原子级的模拟整个现实世界,但是这在未来数百年显然是不可能的</p>\n<h3 id=\"音频-视频系统\"><a href=\"#音频-视频系统\" class=\"headerlink\" title=\"音频/视频系统\"></a>音频/视频系统</h3><p>其他大型游戏一般还有会有音频和视频系统来增强用户的游戏体验</p>\n<p>不过这个游戏并没有包含这一部分</p>\n<h3 id=\"资源系统\"><a href=\"#资源系统\" class=\"headerlink\" title=\"资源系统\"></a>资源系统</h3><p>大型游戏中的<code>音频</code>,<code>视频</code>,<code>文件</code>,<code>内存</code>,<code>I/0设备</code>等资源都需要进行管理</p>\n<p>一般会自己实现一套资源管理机制</p>\n","categories":["计算机编程"],"tags":["游戏"]},{"title":"git简单使用指南","url":"/2015-06-01-simple-git-operation/","content":"<h2 id=\"git操作基础\"><a href=\"#git操作基础\" class=\"headerlink\" title=\"git操作基础\"></a>git操作基础</h2><p>推荐一个git官方的GUI客户端:<a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">https://desktop.github.com/</a></p>\n<h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p><img data-src=\"https://i.loli.net/2020/05/09/QMgToH8ti9CSzVw.png\" alt=\"git-process.png\"></p>\n<p>git基本命令格式</p>\n<pre><code>git 命令 参数</code></pre><p>部分名词解释:</p>\n<pre><code>origin: 本地代码库  (可以自己设置)\n\nremote: 远端代码库地址\n\nhead: 版本指针\n\nbranch: 分支</code></pre><p>Git的相关配置有两份一份在项目中的<code>.git</code>文件价中</p>\n<p>一份全局的位于用户目录下的<code>.git</code>目录中</p>\n<p>项目配置优先于全局配置, 会覆盖掉全局中的配置</p>\n<h2 id=\"获取项目\"><a href=\"#获取项目\" class=\"headerlink\" title=\"获取项目\"></a>获取项目</h2><ol>\n<li>新建仓库</li>\n</ol>\n<ul>\n<li>对已存在的项目目录使用 <code>git init</code></li>\n</ul>\n<ol start=\"2\">\n<li>克隆仓库</li>\n</ol>\n<ul>\n<li>https方式</li>\n</ul>\n<p>例如: <code>git clone  https://git.coding.net/gongchang/gc.buyer.git</code></p>\n<p>该方式推送更新可能需要先设置用户名和密码</p>\n<ul>\n<li>ssh方式(推荐)</li>\n</ul>\n<p>例如:<code>git clone git@git.coding.net:gongchang/gc.buyer.git</code></p>\n<p>该方式获取项目建议先生成ssh-key, 并将ssh-key添加到授权中(github/gitlab等设置中都有添加ssh-key的方法)</p>\n<p>对应svn命令 : <code>svn clone XXXXXX</code></p>\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh-key\"></a>生成ssh-key</h3><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> </p>\n<p>使用ssh生成ssh-key</p>\n<p>生成的ssh-key位于用户目录下的.ssh目录中, 一共有两个一个公钥, 一个私钥</p>\n<p>将<code>xxx.pub</code>中的公钥copy到git服务器中,再检查用户名和密码,就可以用ssh登录git了</p>\n<ol start=\"3\">\n<li>获取更新</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull origin master   //origin代表当前版本库,master是远端分支名,如果要更新dev分支就是 git pull origin dev </span><br><span class=\"line\"></span><br><span class=\"line\">或者简化版</span><br><span class=\"line\"></span><br><span class=\"line\">git pull  //这种方式有时候默认拉下来的不是master分支,需要自己手动切换一下</span><br></pre></td></tr></table></figure>\n<p>此命令等同<code>git fetch</code>+ <code>git merge</code>, 对应svn命令:<code>svn update</code></p>\n<h2 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h2><ol>\n<li>暂存区</li>\n</ol>\n<p>修改完代码以后需要将修改添加到暂存区 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add .                 //.代表当前目录</span><br><span class=\"line\">如果要添加当前目录下的 1.txt文件,相应的命令就是</span><br><span class=\"line\">git add 1.txt</span><br></pre></td></tr></table></figure>\n\n<p>未添加到暂存区的修改可以用<code>git checkout</code> 撤销,对应svn命令 <code>svn revert -R .</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout .    //.代表当前目录</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>提交</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"测试提交\"</span>  //<span class=\"string\">\"测试提交\"</span>是对本次提交的描述</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>推送</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin master   //origin 当前版本库  master远端分支名</span><br><span class=\"line\"> </span><br><span class=\"line\">git push origin dev      //往dev分支上推送代码</span><br></pre></td></tr></table></figure>\n\n<p>下面三条命令 相当于 svn的一条命令  <code>svn commit -m &quot;测试&quot;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"测试\"</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><ol>\n<li>查看当前分支, *号所在就是你当前分支<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></li>\n<li>新建分支</li>\n</ol>\n<p>新建分支dev_test,假设当前在dev分支</p>\n<p>命令:<code>git checkout -b dev_test</code>或<code>git branch dev_test</code></p>\n<p>对应svn命令 :<code>svn copy dev dev_test</code></p>\n<ol start=\"3\">\n<li>切换分支</li>\n</ol>\n<p>命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout dev_test   //切换到dev_test分支</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>合并dev_test到dev</li>\n</ol>\n<p>当前所在分支为dev,命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge origin/dev_test</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>删除分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d dev_test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h2><ol>\n<li>处理冲突</li>\n</ol>\n<p>下面是冲突代码的显示形式,表明两个代码库此处代码不一致,需要手动解决冲突</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">test1</span><br><span class=\"line\">=======</span><br><span class=\"line\">test2</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>将代码手动修改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">test2</span><br></pre></td></tr></table></figure>\n<p>然后执行 1. <code>git add .</code> 2.<code>git commit -m &quot;解决冲突&quot;</code>    3.<code>git push origin master</code></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li>查看日志   <code>git log</code> </li>\n<li>查看状态   <code>git status</code></li>\n<li>查看修改   <code>git diff</code></li>\n<li><code>git log --pretty=oneline 文件名</code> 可以查看某文件的修改记录</li>\n</ol>\n<h2 id=\"高级操作\"><a href=\"#高级操作\" class=\"headerlink\" title=\"高级操作\"></a>高级操作</h2><ul>\n<li>场景1: 如果觉得Git的提交记录太多太乱,想清理git的提交记录,变得整洁</li>\n</ul>\n<p><code>git rebase</code> </p>\n<p>重新设定分支,十分少用,把当前提交定位到某次提交之后</p>\n<ul>\n<li>场景2: 有时候部分修改已经提交,但后来发现这个功能不用上线了,你当然可以手动切换一个新分支, 但是也可以使用另一个命令将当前分支设置为之前的某一个版本</li>\n</ul>\n<p><code>git reset</code></p>\n<p>放弃所有未推送的提交</p>\n<ul>\n<li>场景3: 线上某个版本上线之后出了问题,需要紧急会退到上一个正常的版本</li>\n</ul>\n<p><code>git revert</code></p>\n<p>版本回退,可用于撤销已推送的错误提交</p>\n<p><em>ps: <code>git reset HEAD</code> 然后<code>git push -f</code>这样也能达到撤销错误提交的作用,但是如果在你错误提交之后,有同学进行了新提交,这个新提交也会被撤销</em></p>\n<ul>\n<li>场景4: 你正在A分支上面开发新功能,此时有个紧急bug需要你处理</li>\n</ul>\n<p>可以使用<code>git stash</code>暂存起来, 切换到其他分支上去开发功能, 开发完毕切换回来, 用 <code>git stash apply</code>恢复之前的修改</p>\n<p><code>git stash list</code>:列出储藏列表</p>\n<p><code>git stash drop</code>: 删除一个储藏</p>\n<p><code>git stash apply stash@{2}</code>: 应用储藏</p>\n<p><code>git stash pop</code>: 应用最新的一个储藏</p>\n<p><code>git stash clear</code>: 清理所有储藏</p>\n<p><code>git stash branch testchanges</code>: 从储藏中创建分支</p>\n","categories":["编程工具"],"tags":["git"]},{"title":"别害怕","url":"/2015-09-18-do-not-afraid/","content":"<p><strong>别害怕</strong></p>\n<p>上天很公平</p>\n<p>你选择什么，就必定要放弃什么</p>\n<p>你得到什么，就必定要舍弃什么</p>\n<p>人生的道路上</p>\n<p>若要前行，就必须要离开现在停留的地方</p>\n<p>若要挥别过去，就必须拥有涅磐重生的勇气</p>\n<p>就算爱情欺骗了我们</p>\n<p>这并非我们绝望的原因</p>\n<p>我们还有很多热情</p>\n<p>给分开，给荡漾，给爱人，给安寂</p>\n<p>就算过去刺痛了我们</p>\n<p>这并非是我们逃避的原因</p>\n<p>我们依然有很多憧憬</p>\n<p>对梦想，对记忆，对失败，对希冀</p>\n<p>就算现实撕裂了我们</p>\n<p>这并非是我们茫然的原因</p>\n<p>我们依然有很多完整</p>\n<p>至少我可以成全我自己</p>\n<p>不管什么时候 不管身处何地</p>\n<p>只要我们还在期待 只要我们还会感觉到寂寞</p>\n<p>只要我们还心怀着荡漾 只要我们没有放弃自己</p>\n<p>那么我们就没有老去</p>\n<p>那么我们至少还拥有青春</p>\n<p>四时可爱唯春色 一事能痴便少年</p>\n<p>趁着千载难逢的机会</p>\n<p>去抛弃那些你想要放弃却不敢忘记的过往</p>\n<p>去尝试那些你想要尝试而没有做的转变</p>\n<p>去迎接那些你虽然忐忑却注定美丽的未来</p>\n","categories":["文化艺术"],"tags":["别害怕"]},{"title":"学习smallpt全局光照引擎","url":"/2015-09-28-smallpt/","content":"<h1 id=\"smallpt\"><a href=\"#smallpt\" class=\"headerlink\" title=\"smallpt\"></a>smallpt</h1><p>今天给大家介绍一个<strong>全局光照引擎</strong></p>\n<p>该程序作者是<a href=\"http://www.kevinbeason.com/smallpt/\" target=\"_blank\" rel=\"noopener\">kevinbeason</a></p>\n<p>代码不长,只要<code>100</code>行左右,采用了<a href=\"http://baike.baidu.com/link?url=RQRnSUL-7NapJO695uvrH7FuHTXTB1tixzbM5tC65PS2gNjFhyTdpsrLCP-sBKSbhWWnwULdK3v3mEEjip7Caq\" target=\"_blank\" rel=\"noopener\">Monte Carlo</a>算法</p>\n<h1 id=\"图片效果\"><a href=\"#图片效果\" class=\"headerlink\" title=\"图片效果\"></a>图片效果</h1><p>渲染出来的图片最终效果</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/CSk356LrHV7uJIB.png\" alt=\"result_25k.png\"></p>\n<h1 id=\"代码动态演示\"><a href=\"#代码动态演示\" class=\"headerlink\" title=\"代码动态演示\"></a>代码动态演示</h1><p>展示区域就在下边这个<code>canvas</code>里面吧(注意:这个非常非常非常消耗性能,慎点)</p>\n<p>该程序通过像素采样和作者设定好的对象数值进行渲染</p>\n<p><strong>采样率越高,绘图质量越好,性能消耗越大</strong></p>\n<p>实际采样率达到25000就已经是超级高的质量了,可惜性能…</p>\n<p>在作者的网站里面还给出了其他集中场景的数值设定<a href=\"http://www.kevinbeason.com/smallpt/extraScenes.txt\" target=\"_blank\" rel=\"noopener\">其他场景数值</a><br>可以通过修改参数渲染出不同的场景</p>\n<div>设置采样率(实际值要*4):&nbsp\n<input type=\"number\" min=\"0\" max=\"10000000\" step=\"25\" value=\"25\" id=\"samp\" style=\"border:1px solid #ccc;padding:3px;border-radius:2px;\">&nbsp;&nbsp;&nbsp;<button onclick=\"javascript:eval_render();\" class=\"btn btn-info\">Run</button>\n</div>\n\n<div style=\"text-align: center\">\n    <canvas id=\"renderCanvas\" width=\"128\" height=\"128\" style=\"display:none\"></canvas>\n    <div id=\"status\"></div>\n</div>\n源代码如下:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RandomLCG</span>(<span class=\"params\">seed</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        seed = (<span class=\"number\">214013</span> * seed + <span class=\"number\">2531011</span>) % <span class=\"number\">0x100000000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seed * (<span class=\"number\">1.0</span> / <span class=\"number\">4294967296.0</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vec</span>(<span class=\"params\">x, y, z</span>) </span>&#123; <span class=\"keyword\">this</span>.x = x; <span class=\"keyword\">this</span>.y = y; <span class=\"keyword\">this</span>.z = z; &#125;</span><br><span class=\"line\">Vec.prototype =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vec(<span class=\"keyword\">this</span>.x + b.x, <span class=\"keyword\">this</span>.y + b.y, <span class=\"keyword\">this</span>.z + b.z);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sub: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vec(<span class=\"keyword\">this</span>.x - b.x, <span class=\"keyword\">this</span>.y - b.y, <span class=\"keyword\">this</span>.z - b.z);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mul: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vec(<span class=\"keyword\">this</span>.x * b, <span class=\"keyword\">this</span>.y * b, <span class=\"keyword\">this</span>.z * b);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mult: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vec(<span class=\"keyword\">this</span>.x * b.x, <span class=\"keyword\">this</span>.y * b.y, <span class=\"keyword\">this</span>.z * b.z);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    norm: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mul(<span class=\"number\">1.0</span> / <span class=\"built_in\">Math</span>.sqrt(<span class=\"keyword\">this</span>.x * <span class=\"keyword\">this</span>.x + <span class=\"keyword\">this</span>.y * <span class=\"keyword\">this</span>.y + <span class=\"keyword\">this</span>.z * <span class=\"keyword\">this</span>.z));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    dot: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x * b.x + <span class=\"keyword\">this</span>.y * b.y + <span class=\"keyword\">this</span>.z * b.z;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cross: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vec(<span class=\"keyword\">this</span>.y * b.z - <span class=\"keyword\">this</span>.z * b.y, <span class=\"keyword\">this</span>.z * b.x - <span class=\"keyword\">this</span>.x * b.z, <span class=\"keyword\">this</span>.x * b.y - <span class=\"keyword\">this</span>.y * b.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Vec.Zero = <span class=\"keyword\">new</span> Vec(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">Vec.XAxis = <span class=\"keyword\">new</span> Vec(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">Vec.YAxis = <span class=\"keyword\">new</span> Vec(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">Vec.ZAxis = <span class=\"keyword\">new</span> Vec(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Refl = &#123;<span class=\"attr\">DIFF</span>: <span class=\"number\">0</span>,<span class=\"attr\">SPEC</span>: <span class=\"number\">1</span>,<span class=\"attr\">REFR</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ray</span>(<span class=\"params\">o, d</span>) </span>&#123; <span class=\"keyword\">this</span>.o = o; <span class=\"keyword\">this</span>.d = d &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sphere</span>(<span class=\"params\">rad, p, e, c, refl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rad = rad;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.p = p;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.e = e;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.c = c;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refl = refl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sqRad = rad * rad;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxC = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.max(c.x, c.y), c.z);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cc = c.mul(<span class=\"number\">1.0</span> / <span class=\"keyword\">this</span>.maxC);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sphere.prototype =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    intersect: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Solve t^2*d.d + 2*t*(o-p).d + (o-p).(o-p)-R^2 = 0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> op = <span class=\"keyword\">this</span>.p.sub(r.o);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = op.dot(r.d);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> det = b * b - op.dot(op) + <span class=\"keyword\">this</span>.sqRad;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> eps = <span class=\"number\">1e-4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (det &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> dets = <span class=\"built_in\">Math</span>.sqrt(det)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b - dets &gt; eps)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> b - dets;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b + dets &gt; eps)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> b + dets;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Scene: radius, position, emission, color, material</span></span><br><span class=\"line\">spheres = [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">1e5</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">1e5</span> + <span class=\"number\">1</span>, <span class=\"number\">40.8</span>, <span class=\"number\">81.6</span>), Vec.Zero, <span class=\"keyword\">new</span> Vec(<span class=\"number\">.75</span>, <span class=\"number\">.25</span>, <span class=\"number\">.25</span>), Refl.DIFF), <span class=\"comment\">//Left</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">1e5</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">-1e5</span> + <span class=\"number\">99</span>, <span class=\"number\">40.8</span>, <span class=\"number\">81.6</span>), Vec.Zero, <span class=\"keyword\">new</span> Vec(<span class=\"number\">.25</span>, <span class=\"number\">.25</span>, <span class=\"number\">.75</span>), Refl.DIFF), <span class=\"comment\">//Rght</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">1e5</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">50</span>, <span class=\"number\">40.8</span>, <span class=\"number\">1e5</span>), Vec.Zero, <span class=\"keyword\">new</span> Vec(<span class=\"number\">.75</span>, <span class=\"number\">.75</span>, <span class=\"number\">.75</span>), Refl.DIFF), <span class=\"comment\">//Back</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">1e5</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">50</span>, <span class=\"number\">40.8</span>, <span class=\"number\">-1e5</span> + <span class=\"number\">170</span>), Vec.Zero, Vec.Zero, Refl.DIFF), <span class=\"comment\">//Frnt</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">1e5</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">50</span>, <span class=\"number\">1e5</span>, <span class=\"number\">81.6</span>), Vec.Zero, <span class=\"keyword\">new</span> Vec(<span class=\"number\">.75</span>, <span class=\"number\">.75</span>, <span class=\"number\">.75</span>), Refl.DIFF), <span class=\"comment\">//Botm</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">1e5</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">50</span>, <span class=\"number\">-1e5</span> + <span class=\"number\">81.6</span>, <span class=\"number\">81.6</span>), Vec.Zero, <span class=\"keyword\">new</span> Vec(<span class=\"number\">.75</span>, <span class=\"number\">.75</span>, <span class=\"number\">.75</span>), Refl.DIFF), <span class=\"comment\">//Top</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">16.5</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">27</span>, <span class=\"number\">16.5</span>, <span class=\"number\">47</span>), Vec.Zero, <span class=\"keyword\">new</span> Vec(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).mul(<span class=\"number\">.999</span>), Refl.SPEC), <span class=\"comment\">//Mirr</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">16.5</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">73</span>, <span class=\"number\">16.5</span>, <span class=\"number\">78</span>), Vec.Zero, <span class=\"keyword\">new</span> Vec(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).mul(<span class=\"number\">.999</span>), Refl.REFR), <span class=\"comment\">//Glas</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Sphere(<span class=\"number\">600</span>, <span class=\"keyword\">new</span> Vec(<span class=\"number\">50</span>, <span class=\"number\">681.6</span> - <span class=\"number\">.27</span>, <span class=\"number\">81.6</span>), <span class=\"keyword\">new</span> Vec(<span class=\"number\">12</span>, <span class=\"number\">12</span>, <span class=\"number\">12</span>), Vec.Zero, Refl.DIFF)  <span class=\"comment\">//Lite</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rand = RandomLCG(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clamp</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toInt</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(clamp(x), <span class=\"number\">1</span> / <span class=\"number\">2.2</span>) * <span class=\"number\">255</span> + <span class=\"number\">.5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intersect</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"number\">1e20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> spheres) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = spheres[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = s.intersect(r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d != <span class=\"number\">0</span> &amp;&amp; d &lt; t) &#123;</span><br><span class=\"line\">            t = d;</span><br><span class=\"line\">            obj = s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [obj, t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radiance</span>(<span class=\"params\">r, depth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ires = intersect(r);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = ires[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = ires[<span class=\"number\">1</span>];   <span class=\"comment\">// distance to intersection</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vec.Zero;       <span class=\"comment\">// if miss, return black</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newDepth = depth + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isMaxDepth = newDepth &gt; <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Russian roulette for path termination</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> isUseRR = newDepth &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isRR = isUseRR &amp;&amp; rand() &lt; obj.maxC;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isMaxDepth || (isUseRR &amp;&amp; !isRR))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj.e;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> f = (isUseRR &amp;&amp; isRR) ? obj.cc : obj.c;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x = r.o.add(r.d.mul(t));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> n = x.sub(obj.p).norm();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> nl = n.dot(r.d) &lt; <span class=\"number\">0</span> ? n : n.mul(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.refl == Refl.DIFF) <span class=\"comment\">// Ideal DIFFUSE reflection</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r1 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * rand();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r2 = rand();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r2s = <span class=\"built_in\">Math</span>.sqrt(r2);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> w = nl;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> wo = <span class=\"built_in\">Math</span>.abs(w.x) &gt; <span class=\"number\">.1</span> ? <span class=\"keyword\">new</span> Vec(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>) : <span class=\"keyword\">new</span> Vec(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> u = wo.cross(w).norm();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> v = w.cross(u);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> d = (u.mul(<span class=\"built_in\">Math</span>.cos(r1) * r2s).add(v.mul(<span class=\"built_in\">Math</span>.sin(r1) * r2s)).add(w.mul(<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - r2)))).norm();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj.e.add(f.mult(radiance(<span class=\"keyword\">new</span> Ray(x, d), newDepth)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.refl == Refl.SPEC) <span class=\"comment\">// Ideal SPECULAR reflection</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj.e.add(f.mult(radiance(<span class=\"keyword\">new</span> Ray(x, r.d.sub(n.mul(<span class=\"number\">2</span> * n.dot(r.d)))), newDepth)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">// Ideal dielectric REFRACTION</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> reflRay = <span class=\"keyword\">new</span> Ray(x, r.d.sub(n.mul(<span class=\"number\">2</span> * n.dot(r.d))));</span><br><span class=\"line\">                <span class=\"keyword\">var</span> into = n.dot(nl) &gt; <span class=\"number\">0</span>; <span class=\"comment\">// var from outside going in?</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> nc = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> nt = <span class=\"number\">1.5</span>;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> nnt = into ? nc / nt : nt / nc;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ddn = r.d.dot(nl);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cos2t = <span class=\"number\">1</span> - nnt * nnt * (<span class=\"number\">1</span> - ddn * ddn);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cos2t &lt; <span class=\"number\">0</span>)  <span class=\"comment\">// Total internal reflection</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> obj.e.add(f.mult(radiance(reflRay, newDepth)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> tdir = (r.d.mul(nnt).sub(n.mul((into ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>) * (ddn * nnt + <span class=\"built_in\">Math</span>.sqrt(cos2t))))).norm();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> a = nt - nc;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> b = nt + nc;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> R0 = a * a / (b * b);</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> c = <span class=\"number\">1</span> - (into ? -ddn : tdir.dot(n));</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> Re = R0 + (<span class=\"number\">1</span> - R0) * c * c * c * c * c;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> Tr = <span class=\"number\">1</span> - Re;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> P = <span class=\"number\">.25</span> + <span class=\"number\">.5</span> * Re;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> RP = Re / P;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> TP = Tr / (<span class=\"number\">1</span> - P);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (newDepth &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Russian roulette and splitting for selecting reflection and/or refraction</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (rand() &lt; P)</span><br><span class=\"line\">                            result = radiance(reflRay, newDepth).mul(RP);</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                            result = radiance(<span class=\"keyword\">new</span> Ray(x, tdir), newDepth).mul(TP);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        result = radiance(reflRay, newDepth).mul(Re).add(radiance(<span class=\"keyword\">new</span> Ray(x, tdir), newDepth).mul(Tr));</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> obj.e.add(f.mult(result));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">canvas, status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> w = canvas.attributes.width.value;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> h = canvas.attributes.height.value;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> samps = <span class=\"number\">25</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// cam pos, dir</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cam = <span class=\"keyword\">new</span> Ray(<span class=\"keyword\">new</span> Vec(<span class=\"number\">50</span>, <span class=\"number\">52</span>, <span class=\"number\">295.6</span>), <span class=\"keyword\">new</span> Vec(<span class=\"number\">0</span>, <span class=\"number\">-0.042612</span>, <span class=\"number\">-1</span>).norm());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cx = <span class=\"keyword\">new</span> Vec(w * <span class=\"number\">.5135</span> / h, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cy = (cx.cross(cam.d)).norm().mul(<span class=\"number\">.5135</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// final color buffer</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(w * h);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; w * h; i++)</span><br><span class=\"line\">        c[i] = Vec.Zero;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Output</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgdata = ctx.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pixels = imgdata.data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Loop over image rows</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setTimeout(renderLine, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderLine</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        status.innerHTML = <span class=\"string\">\"Rendering (\"</span> + samps * <span class=\"number\">4</span> + <span class=\"string\">\" spp) \"</span> + (<span class=\"number\">100.0</span> * y / (h - <span class=\"number\">1</span>)).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">\"%\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Loop cols</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; w; x++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2x2 subpixel rows</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> sy = <span class=\"number\">0</span>; sy &lt; <span class=\"number\">2</span>; sy++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> i = (h - y - <span class=\"number\">1</span>) * w + x;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 2x2 subpixel cols</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> sx = <span class=\"number\">0</span>; sx &lt; <span class=\"number\">2</span>; sx++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> r = Vec.Zero;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> s = <span class=\"number\">0</span>; s &lt; samps; s++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> r1 = <span class=\"number\">2</span> * rand();</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> r2 = <span class=\"number\">2</span> * rand();</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> dx = r1 &lt; <span class=\"number\">1</span> ? <span class=\"built_in\">Math</span>.sqrt(r1) - <span class=\"number\">1</span> : <span class=\"number\">1</span> - <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">2</span> - r1);</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> dy = r2 &lt; <span class=\"number\">1</span> ? <span class=\"built_in\">Math</span>.sqrt(r2) - <span class=\"number\">1</span> : <span class=\"number\">1</span> - <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">2</span> - r2);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> d = cx.mul(((sx + <span class=\"number\">.5</span> + dx) / <span class=\"number\">2</span> + x) / w - <span class=\"number\">.5</span>).add(</span><br><span class=\"line\">                        cy.mul(((sy + <span class=\"number\">.5</span> + dy) / <span class=\"number\">2</span> + y) / h - <span class=\"number\">.5</span>)).add(cam.d);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Camera rays are pushed forward to start in interior</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> camRay = <span class=\"keyword\">new</span> Ray(cam.o.add(d.mul(<span class=\"number\">140</span>)), d.norm());</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Accumuate radiance</span></span><br><span class=\"line\">                        r = r.add(radiance(camRay, <span class=\"number\">0</span>).mul(<span class=\"number\">1.0</span> / samps));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Convert radiance to color</span></span><br><span class=\"line\">                    c[i] = c[i].add((<span class=\"keyword\">new</span> Vec(clamp(r.x), clamp(r.y), clamp(r.z))).mul(<span class=\"number\">.25</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        renderOutput();</span><br><span class=\"line\"></span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y &lt; h)</span><br><span class=\"line\">            setTimeout(renderLine, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            status.innerHTML = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start) / <span class=\"number\">1000</span> + <span class=\"string\">\" sec\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderOutput</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = (h - y - <span class=\"number\">1</span>) * w * <span class=\"number\">4</span>, j = (h - y - <span class=\"number\">1</span>) * w;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; w; x++) &#123;</span><br><span class=\"line\">            pixels[i++] = toInt(c[j].x);</span><br><span class=\"line\">            pixels[i++] = toInt(c[j].y);</span><br><span class=\"line\">            pixels[i++] = toInt(c[j].z);</span><br><span class=\"line\">            pixels[i++] = <span class=\"number\">255</span>;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ctx.putImageData(imgdata, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<script>\nfunction RandomLCG(seed) {\n    return function() {\n        seed = (214013 * seed + 2531011) % 0x100000000;\n        return seed * (1.0 / 4294967296.0);\n    };\n}\n\nfunction Vec(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n}\n\nVec.prototype = {\n    add: function(b) {\n        return new Vec(this.x + b.x, this.y + b.y, this.z + b.z);\n    },\n\n    sub: function(b) {\n        return new Vec(this.x - b.x, this.y - b.y, this.z - b.z);\n    },\n\n    mul: function(b) {\n        return new Vec(this.x * b, this.y * b, this.z * b);\n    },\n\n    mult: function(b) {\n        return new Vec(this.x * b.x, this.y * b.y, this.z * b.z);\n    },\n\n    norm: function() {\n        return this.mul(1.0 / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z));\n    },\n\n    dot: function(b) {\n        return this.x * b.x + this.y * b.y + this.z * b.z;\n    },\n\n    cross: function(b) {\n        return new Vec(this.y * b.z - this.z * b.y, this.z * b.x - this.x * b.z, this.x * b.y - this.y * b.x);\n    }\n};\n\nVec.Zero = new Vec(0, 0, 0)\nVec.XAxis = new Vec(1, 0, 0)\nVec.YAxis = new Vec(0, 1, 0)\nVec.ZAxis = new Vec(0, 0, 1)\n\nRefl = {\n    DIFF: 0,\n    SPEC: 1,\n    REFR: 2\n};\n\nfunction Ray(o, d) {\n    this.o = o;\n    this.d = d\n}\n\nfunction Sphere(rad, p, e, c, refl) {\n    this.rad = rad;\n    this.p = p;\n    this.e = e;\n    this.c = c;\n    this.refl = refl;\n\n    this.sqRad = rad * rad;\n    this.maxC = Math.max(Math.max(c.x, c.y), c.z);\n    this.cc = c.mul(1.0 / this.maxC);\n}\n\nSphere.prototype = {\n    intersect: function(r) {\n        var op = this.p.sub(r.o);\n        var b = op.dot(r.d);\n        var det = b * b - op.dot(op) + this.sqRad;\n        var eps = 1e-4;\n\n        if (det < 0)\n            return 0;\n        else {\n            var dets = Math.sqrt(det)\n\n            if (b - dets > eps) {\n                return b - dets;\n            } else if (b + dets > eps) {\n                return b + dets;\n            } else {\n                return 0;\n            }\n        }\n    }\n};\n\nspheres = [\n    new Sphere(1e5, new Vec(1e5 + 1, 40.8, 81.6), Vec.Zero, new Vec(.75, .25, .25), Refl.DIFF),\n    new Sphere(1e5, new Vec(-1e5 + 99, 40.8, 81.6), Vec.Zero, new Vec(.25, .25, .75), Refl.DIFF),\n    new Sphere(1e5, new Vec(50, 40.8, 1e5), Vec.Zero, new Vec(.75, .75, .75), Refl.DIFF),\n    new Sphere(1e5, new Vec(50, 40.8, -1e5 + 170), Vec.Zero, Vec.Zero, Refl.DIFF),\n    new Sphere(1e5, new Vec(50, 1e5, 81.6), Vec.Zero, new Vec(.75, .75, .75), Refl.DIFF),\n    new Sphere(1e5, new Vec(50, -1e5 + 81.6, 81.6), Vec.Zero, new Vec(.75, .75, .75), Refl.DIFF),\n    new Sphere(16.5, new Vec(27, 16.5, 47), Vec.Zero, new Vec(1, 1, 1).mul(.999), Refl.SPEC),\n    new Sphere(16.5, new Vec(73, 16.5, 78), Vec.Zero, new Vec(1, 1, 1).mul(.999), Refl.REFR),\n    new Sphere(600, new Vec(50, 681.6 - .27, 81.6), new Vec(12, 12, 12), Vec.Zero, Refl.DIFF)\n];\n\nvar rand = RandomLCG(0)\n\nfunction clamp(x) {\n    if (x < 0) {\n        return 0;\n    } else if (x > 1) {\n        return 1;\n    } else {\n        return x;\n    }\n}\n\nfunction toInt(x) {\n    return Math.pow(clamp(x), 1 / 2.2) * 255 + .5\n}\n\nfunction intersect(r) {\n    var t = 1e20;\n    var obj;\n\n    for (var i in spheres) {\n        var s = spheres[i];\n        var d = s.intersect(r);\n        if (d != 0 && d < t) {\n            t = d;\n            obj = s;\n        }\n    }\n    return [obj, t];\n}\n\nfunction radiance(r, depth) {\n    var ires = intersect(r);\n    var obj = ires[0];\n    var t = ires[1];\n\n    if (obj == null) {\n        return Vec.Zero;\n    } else {\n        var newDepth = depth + 1;\n        var isMaxDepth = newDepth > 100;\n\n        var isUseRR = newDepth > 5;\n        var isRR = isUseRR && rand() < obj.maxC;\n\n        if (isMaxDepth || (isUseRR && !isRR)) {\n            return obj.e;\n        } else {\n            var f = (isUseRR && isRR) ? obj.cc : obj.c;\n            var x = r.o.add(r.d.mul(t));\n            var n = x.sub(obj.p).norm();\n            var nl = n.dot(r.d) < 0 ? n : n.mul(-1);\n\n            if (obj.refl == Refl.DIFF) {\n                var r1 = 2 * Math.PI * rand();\n                var r2 = rand();\n                var r2s = Math.sqrt(r2);\n\n                var w = nl;\n                var wo = Math.abs(w.x) > .1 ? new Vec(0, 1, 0) : new Vec(1, 0, 0);\n                var u = wo.cross(w).norm();\n                var v = w.cross(u);\n\n                var d = (u.mul(Math.cos(r1) * r2s).add(v.mul(Math.sin(r1) * r2s)).add(w.mul(Math.sqrt(1 - r2)))).norm();\n\n                return obj.e.add(f.mult(radiance(new Ray(x, d), newDepth)));\n            } else if (obj.refl == Refl.SPEC) {\n                return obj.e.add(f.mult(radiance(new Ray(x, r.d.sub(n.mul(2 * n.dot(r.d)))), newDepth)));\n            } else {\n                var reflRay = new Ray(x, r.d.sub(n.mul(2 * n.dot(r.d))));\n                var into = n.dot(nl) > 0;\n                var nc = 1;\n                var nt = 1.5;\n                var nnt = into ? nc / nt : nt / nc;\n                var ddn = r.d.dot(nl);\n                var cos2t = 1 - nnt * nnt * (1 - ddn * ddn);\n\n                if (cos2t < 0) {\n                    return obj.e.add(f.mult(radiance(reflRay, newDepth)));\n                } else {\n                    var tdir = (r.d.mul(nnt).sub(n.mul((into ? 1 : -1) * (ddn * nnt + Math.sqrt(cos2t))))).norm();\n                    var a = nt - nc;\n                    var b = nt + nc;\n                    var R0 = a * a / (b * b);\n                    var c = 1 - (into ? -ddn : tdir.dot(n));\n                    var Re = R0 + (1 - R0) * c * c * c * c * c;\n                    var Tr = 1 - Re;\n                    var P = .25 + .5 * Re;\n                    var RP = Re / P;\n                    var TP = Tr / (1 - P);\n\n                    var result;\n                    if (newDepth > 2) {\n\n                        if (rand() < P) {\n                            result = radiance(reflRay, newDepth).mul(RP);\n                        } else {\n                            result = radiance(new Ray(x, tdir), newDepth).mul(TP);\n                        }\n                    } else {\n                        result = radiance(reflRay, newDepth).mul(Re).add(radiance(new Ray(x, tdir), newDepth).mul(Tr));\n                    }\n\n                    return obj.e.add(f.mult(result));\n                }\n            }\n        }\n    }\n}\n\nfunction render(canvas, status) {\n    var start = new Date().getTime();\n    var w = canvas.attributes.width.value;\n    var h = canvas.attributes.height.value;\n    var samps = 25;\n\n    var samps = document.getElementById(\"samp\").value;\n\n    var cam = new Ray(new Vec(50, 52, 295.6), new Vec(0, -0.042612, -1).norm());\n    var cx = new Vec(w * .5135 / h, 0, 0);\n    var cy = (cx.cross(cam.d)).norm().mul(.5135);\n    var c = new Array(w * h);\n    for (var i = 0; i < w * h; i++)\n        c[i] = Vec.Zero;\n\n    var ctx = canvas.getContext(\"2d\");\n    var imgdata = ctx.getImageData(0, 0, w, h);\n    var pixels = imgdata.data;\n\n    var y = 0;\n    setTimeout(renderLine, 0);\n\n    function renderLine() {\n        status.innerHTML = \"Rendering (\" + samps * 4 + \" spp) \" + (100.0 * y / (h - 1)).toFixed(2) + \"%\";\n\n        for (var x = 0; x < w; x++) {\n            for (var sy = 0; sy < 2; sy++) {\n                var i = (h - y - 1) * w + x;\n\n                for (var sx = 0; sx < 2; sx++) {\n                    var r = Vec.Zero;\n                    for (var s = 0; s < samps; s++) {\n                        var r1 = 2 * rand();\n                        var r2 = 2 * rand();\n                        var dx = r1 < 1 ? Math.sqrt(r1) - 1 : 1 - Math.sqrt(2 - r1);\n                        var dy = r2 < 1 ? Math.sqrt(r2) - 1 : 1 - Math.sqrt(2 - r2);\n\n                        var d = cx.mul(((sx + .5 + dx) / 2 + x) / w - .5).add(\n                            cy.mul(((sy + .5 + dy) / 2 + y) / h - .5)).add(cam.d);\n\n                        var camRay = new Ray(cam.o.add(d.mul(140)), d.norm());\n\n                        r = r.add(radiance(camRay, 0).mul(1.0 / samps));\n                    }\n\n                    c[i] = c[i].add((new Vec(clamp(r.x), clamp(r.y), clamp(r.z))).mul(.25));\n                }\n            }\n        }\n\n        renderOutput();\n\n        y++;\n        if (y < h) {\n            setTimeout(renderLine, 0);\n        } else {\n            status.innerHTML = (new Date().getTime() - start) / 1000 + \" sec\";\n        }\n    }\n\n    function renderOutput() {\n        var i = (h - y - 1) * w * 4,\n            j = (h - y - 1) * w;\n        for (var x = 0; x < w; x++) {\n            pixels[i++] = toInt(c[j].x);\n            pixels[i++] = toInt(c[j].y);\n            pixels[i++] = toInt(c[j].z);\n            pixels[i++] = 255;\n            j++;\n        }\n\n        ctx.putImageData(imgdata, 0, 0);\n    }\n}\n\nfunction eval_render()\n{\n    var canvas = document.getElementById(\"renderCanvas\");\n    var status = document.getElementById(\"status\");\n    canvas.style.display=\"block\";\n    render(canvas,status);\n}\n</script>\n","categories":["计算机编程"],"tags":["全局光照"]},{"title":"常用的设计模式总结","url":"/2015-12-30-design-pattern/","content":"<p>总结一些常用的设计模式</p>\n<h1 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h1><ul>\n<li><strong>概念</strong></li>\n</ul>\n<p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</p>\n<ul>\n<li><strong>主要角色</strong></li>\n</ul>\n<p><strong>目标(Target)角色</strong>：定义客户端使用的与特定领域相关的接口，这也就是我们所期待得到的</p>\n<p><strong>源(Adaptee)角色</strong>：需要进行适配的接口</p>\n<p><strong>适配器(Adapter)角色</strong>：对Adaptee的接口与Target接口进行适配；适配器是本模式的核心，适配器把源接口转换成目标接口，此角色为具体类</p>\n<ul>\n<li><strong>适用性</strong> </li>\n</ul>\n<ol>\n<li>你想使用一个已经存在的类，而它的接口不符合你的需求</li>\n<li>你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类协同工作</li>\n<li>你想使用一个已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口（仅限于对象适配器）</li>\n</ol>\n<p>在实际应用中，适配器模式分为类适配器和对象适配器</p>\n<p><strong>类适配器</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//目标角色</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ITarget</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//源角色  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAdaptee</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title\">IAdaptee</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"原方法\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//适配器角色  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title\">IAdaptee</span>, <span class=\"title\">ITarget</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"适配方法\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        $adapter = <span class=\"keyword\">new</span> Adapter();  </span><br><span class=\"line\">        $adapter-&gt;operation1();<span class=\"comment\">//原方法  </span></span><br><span class=\"line\">        $adapter-&gt;operation2();<span class=\"comment\">//适配方法  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>对象适配器</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//目标角色</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ITarget</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//源角色   </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAdaptee</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title\">IAdaptee</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"原方法\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//适配器角色  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITarget</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> $adaptee;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($adaptee)</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;adaptee = $adaptee;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;adaptee-&gt;operation1();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"适配方法\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        $adapter = <span class=\"keyword\">new</span> Adapter(<span class=\"keyword\">new</span> Adaptee(<span class=\"keyword\">null</span>));  </span><br><span class=\"line\">        $adapter-&gt;operation1();<span class=\"comment\">//原方法  </span></span><br><span class=\"line\">        $adapter-&gt;operation2();<span class=\"comment\">//适配方法  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>类适配器中适配器继承原有的Adaptee类，自己实现原类没有的操作，使用的是继承模式，而对象适配器使用的是组合模式，将adaptee作为adapter的一个引用。由于组合在耦合性上小于继承，对象适配器显得更加灵活但缺点是增加代码量。 需要重写adapee中的方法的数量太大的话，可以考虑在adapter类中添加<code>__call</code>方法委托adapee取得客户端调用的方法</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span><span class=\"params\">($func, $args)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_callable(<span class=\"keyword\">array</span>(<span class=\"keyword\">$this</span>-&gt;adaptee, $func))) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;adaptee-&gt;$func($args);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    trigger_error(<span class=\"string\">'*********'</span>, E_USER_ERROR);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h1><ul>\n<li><strong>装饰器模式概念</strong></li>\n</ul>\n<blockquote>\n<p>在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能，它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p>\n</blockquote>\n<ul>\n<li><strong>装饰器模式特点</strong></li>\n</ul>\n<ol>\n<li>装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。</li>\n<li>装饰对象包含一个真实对象的引用（reference）</li>\n<li>装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。</li>\n<li>装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。</li>\n</ol>\n<ul>\n<li><strong>适用性</strong></li>\n</ul>\n<ol>\n<li>需要扩展一个类的功能，或给一个类添加附加职责。</li>\n<li>需要动态的给一个对象添加功能，这些功能可以再动态的撤销。</li>\n<li>需要增加由一些基本功能的排列组合而产生的非常大量的功能，从而使继承关系变的不现实。</li>\n<li>当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。</li>\n</ol>\n<ul>\n<li><strong>优点</strong></li>\n</ul>\n<ol>\n<li>Decorator模式与继承关系的目的都是要扩展对象的功能，但是Decorator可以提供比继承更多的灵活性。</li>\n<li>通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。</li>\n</ol>\n<ul>\n<li><strong>缺点</strong></li>\n</ul>\n<ol>\n<li>这种比继承更加灵活机动的特性，也同时意味着更加多的复杂性。</li>\n<li>装饰模式会导致设计中出现许多小类，如果过度使用，会使程序变得很复杂。</li>\n<li>装饰模式是针对抽象组件（Component）类型编程。但是，如果你要针对具体组件编程时，就应该重新思考你的应用架构，以及装饰者是否合适。当然也可以改变Component接口，增加新的公开的行为，实现“半透明”的装饰者模式。在实际项目中要做出最佳选择。</li>\n</ol>\n<ul>\n<li><strong>设计原则</strong></li>\n</ul>\n<ol>\n<li>多用组合，少用继承。</li>\n<li>类应设计的对扩展开放，对修改关闭。</li>\n</ol>\n<ul>\n<li><strong>装饰器模式实例</strong></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象接口类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDecorator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayMsg</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体装饰类1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">decorator1</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDecorator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayMsg</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"增加功能1\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体装饰类2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">decorator2</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDecorator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayMsg</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"增加功能2\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $decorators;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addDecorator</span><span class=\"params\">(IDecorator $decorator)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;decorators[] = $decorator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addExtraFunction</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;decorators <span class=\"keyword\">as</span> $decorator) &#123;</span><br><span class=\"line\">            $decorator-&gt;sayMsg();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addExtraFunction();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"I am test\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$mailTest = <span class=\"keyword\">new</span> MailTest();</span><br><span class=\"line\"></span><br><span class=\"line\">$decorator1 = <span class=\"keyword\">new</span> decorator1();</span><br><span class=\"line\">$decorator2 = <span class=\"keyword\">new</span> decorator2();</span><br><span class=\"line\"></span><br><span class=\"line\">$mailTest-&gt;addDecorator($decorator1);</span><br><span class=\"line\">$mailTest-&gt;addDecorator($decorator2);</span><br><span class=\"line\"></span><br><span class=\"line\">$mailTest-&gt;test();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><ul>\n<li><strong>概念及特点</strong></li>\n</ul>\n<p>面向对象设计强调抽象类高于实现，也就是说我们要尽量一般化而不是特殊化，工厂模式解决了当代码关于抽象类型时如何创建对象实例的问题。</p>\n<p>工厂模式就是把创建对象的过程封装起来，这样随时可以产生一个新的对象，减少代码之间耦合。</p>\n<p>通俗的说，常规的创建一个对象要使用new，工厂模式就是把这个过程封装起来，使用一个工厂类来创建对象</p>\n<p>如果不使用工厂模式，那么很多地方调用类Database，代码就会这样子创建一个实例：new Database(),假设某天需要修改Database类的名称那么调用Database类的代码都要修改。</p>\n<ul>\n<li><strong>工厂模式举例</strong></li>\n</ul>\n<p>假如已经有一个数据库类Database</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDatabase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t$db = <span class=\"keyword\">new</span> Database();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> $db;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建数据库类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$db = Factory::createDatabase();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h1><ul>\n<li><strong>概念</strong></li>\n</ul>\n<blockquote>\n<p>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类</p>\n</blockquote>\n<ul>\n<li><strong>特点</strong></li>\n</ul>\n<p>抽象工厂模式（Abstact Factory）是一种常见的软件设计模式，该模式为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以为此系列的产品族创建一个具体的工厂类。</p>\n<ul>\n<li><strong>主要角色</strong></li>\n</ul>\n<p><strong>抽象工厂(Abstract Factory)角色</strong>：它声明一个创建抽象产品对象的接口。通常以接口或抽象类实现，所有的具体工厂类必须实现这个接口或继承这个类。</p>\n<p><strong>具体工厂(Concrete Factory)角色</strong>：实现创建产品对象的操作。客户端直接调用这个角色创建产品的实例。这个角色包含有选择合适的产品对象的逻辑。通常使用具体类实现。</p>\n<p><strong>抽象产品(Abstract Product)角色</strong>：声明一类产品的接口。它是工厂方法模式所创建的对象的父类，或它们共同拥有的接口。</p>\n<p><strong>具体产品(Concrete Product)角色</strong>：实现抽象产品角色所定义的接口，定义一个将被相应的具体工厂创建的产品对象。其内部包含了应用程序的业务逻辑。</p>\n<ul>\n<li><strong>优缺点</strong></li>\n</ul>\n<p><strong>抽象工厂模式的优点</strong>:</p>\n<ol>\n<li>分离了具体的类</li>\n<li>使增加或替换产品族变得容易</li>\n<li>有利于产品的一致性</li>\n</ol>\n<p><strong>抽象工厂模式的缺点</strong>:</p>\n<p>难以支持新种类的产品。这是因为AbstractFactory接口确定了可以被创建的产品集合。支持新各类的产品就需要扩展访工厂接口，从而导致AbstractFactory类及其所有子类的改变。<br>抽象工厂就是以一种倾斜的方式支持增加新的产品中，它为新产品族的增加提供了方便，而不能为新的产品等级结构的增加提供这样的方便。</p>\n<ul>\n<li><strong>适用性</strong></li>\n</ul>\n<ol>\n<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有形态的工厂模式都是重要的。</li>\n<li>这个系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</li>\n<li>同属于同一个产品族的产品是在一起使用的，这一约束必须在系统的设计中体现出来。</li>\n<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使用客户端不依赖于实现</li>\n</ol>\n<ul>\n<li><strong>抽象工厂模式实例</strong></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象工厂</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AnimalFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDog</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体工厂</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackAnimalFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AnimalFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlackCat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDog</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlackDog();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteAnimalFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AnimalFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WhiteCat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDog</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WhiteDog();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象产品</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Voice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Voice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体产品</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackCat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Voice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'黑猫喵喵喵'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteCat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Voice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'白猫喵喵喵'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackDog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Voice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'黑狗汪汪汪'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteDog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Voice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'白狗汪汪汪'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::run(<span class=\"keyword\">new</span> BlackAnimalFactory());</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::run(<span class=\"keyword\">new</span> WhiteAnimalFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">(AnimalFactory $AnimalFactory)</span></span>&#123;</span><br><span class=\"line\">        $cat = $AnimalFactory-&gt;createCat();</span><br><span class=\"line\">        $cat-&gt;Voice();</span><br><span class=\"line\"></span><br><span class=\"line\">        $dog = $AnimalFactory-&gt;createDog();</span><br><span class=\"line\">        $dog-&gt;Voice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Client::main();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h1><ul>\n<li><strong>迭代器模式概念</strong></li>\n</ul>\n<blockquote>\n<p>在不需要了解内部实现的前提下，遍历一个聚合对象的内部元素而又不暴露该对象的内部表示。</p>\n</blockquote>\n<ul>\n<li><strong>适用场景</strong></li>\n</ul>\n<ul>\n<li>访问一个聚合对象的内容而无需暴露它的内部表示</li>\n<li>支持对聚合对象的多种遍历</li>\n<li>为遍历不同的聚合结构提供一个统一的接口</li>\n</ul>\n<ul>\n<li><strong>迭代器模式实例</strong></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> $position = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> $arr;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(array $arr)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;arr = $arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rewind</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;position = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">current</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;arr[<span class=\"keyword\">$this</span>-&gt;position];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">key</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;position;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t++<span class=\"keyword\">$this</span>-&gt;position;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;arr[<span class=\"keyword\">$this</span>-&gt;position]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'xiao hong'</span>,<span class=\"string\">'xiao ming'</span>,<span class=\"string\">'xiaohua'</span>);</span><br><span class=\"line\">$concreteIterator = <span class=\"keyword\">new</span> ConcreteIterator($arr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($concreteIterator <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $key.<span class=\"string\">\"=&gt;\"</span>.$value.<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><ul>\n<li><strong>观察者模式概念</strong></li>\n</ul>\n<blockquote>\n<p>观察者模式（有时又被称为发布（publish）-订阅（Subscribe）模式、模型-视图（View）模式、源-收听者(Listener)模式或从属者模式），在此种模式中，当一个对象状态发生改变时，依赖它的对象全部会收到通知，并自动更新。</p>\n</blockquote>\n<ul>\n<li><strong>使用场景</strong></li>\n</ul>\n<p>一个事件发生以后，要执行一连串更新操作，传统编程方法就是在事件的代码之后直接加入处理逻辑，当更新的逻辑增多之后，代码会变得难以维护，这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码。观察者模式实现了低耦合非侵入式的通知与更新机制。</p>\n<ul>\n<li><strong>实现方式</strong></li>\n</ul>\n<p>从根本上说，该模式必须包含两个角色：观察者和被观察对象。观察者和被观察者之间存在“观察”的逻辑关联，当被观察者发生改变的时候，观察者就会观察到这样的变化。</p>\n<ul>\n<li><strong>观察者模式实例</strong></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//观察者，需要用到观察者模式的类需实现此接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//被观察者（一个抽象类，方便扩展）</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observers = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer $observer)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers[] = $observer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">$this</span>-&gt;observers <span class=\"keyword\">as</span> $observer)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $observer-&gt;update();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteObservable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"action one\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"action two\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$event = <span class=\"keyword\">new</span> ConcreteObservable();</span><br><span class=\"line\"><span class=\"comment\">//添加观察者</span></span><br><span class=\"line\">$event-&gt;addObserver(<span class=\"keyword\">new</span> Observer1);</span><br><span class=\"line\">$event-&gt;addObserver(<span class=\"keyword\">new</span> Observer2);</span><br><span class=\"line\">$event-&gt;trigger();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据对象映射-ORM\"><a href=\"#数据对象映射-ORM\" class=\"headerlink\" title=\"数据对象映射(ORM)\"></a>数据对象映射(ORM)</h1><ul>\n<li><strong>数据对象映射模式概念</strong></li>\n</ul>\n<blockquote>\n<p>将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作</p>\n</blockquote>\n<ul>\n<li><strong>数据对象映射模式实例</strong></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $id;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $data;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $db;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $change = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($id)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;db = Factory::getDatabase();</span><br><span class=\"line\">        $res = <span class=\"keyword\">$this</span>-&gt;db-&gt;query(<span class=\"string\">\"select * from user where id = $id limit 1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;data = $res-&gt;fetch_assoc();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;id = $id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span><span class=\"params\">($key)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;data[$key]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;data[$key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span><span class=\"params\">($key, $value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;data[$key] = $value;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;change = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;change)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;data <span class=\"keyword\">as</span> $k =&gt; $v)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $fields[] = <span class=\"string\">\"$k = '&#123;$v&#125;'\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;db-&gt;query(<span class=\"string\">\"update user set \"</span> . implode(<span class=\"string\">', '</span>, $fields) . <span class=\"string\">\"where</span></span><br><span class=\"line\"><span class=\"string\">            id = &#123;$this-&gt;id&#125; limit 1\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>);</span><br><span class=\"line\">$user-&gt;mobile = <span class=\"string\">'18888888888'</span>；</span><br><span class=\"line\">$user-&gt;name = <span class=\"string\">'test'</span>；</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><ul>\n<li><strong>原型模式概念</strong></li>\n</ul>\n<blockquote>\n<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n</blockquote>\n<p>-<strong>使用场景</strong></p>\n<p>它主要面对的问题是：“某些结构复杂的对象”的创建工作；由于需求的变化，这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。原型模式适用于大型对象的创建，创建一个大型对象需要很大的开销，如果每次new就会消耗很大，原型模式只需内存拷贝即可</p>\n<p>-<strong>主要角色</strong></p>\n<ol>\n<li>抽象原型(Prototype)角色：声明一个克隆自身的接口</li>\n<li>具体原型(Concrete Prototype)角色：实现一个克隆自身的操作</li>\n</ol>\n<p>-<strong>原型模式实例</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//抽象原型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Prototype</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span><span class=\"params\">()</span></span>;   </span><br><span class=\"line\">&#125;     </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//具体原型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Prototype</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span><span class=\"params\">($name)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">//克隆  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">clone</span> <span class=\"keyword\">$this</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//客户端  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        $pro = <span class=\"keyword\">new</span> ConcretePrototype(<span class=\"string\">'test'</span>);  </span><br><span class=\"line\">        $pro2 = $pro-&gt;copy();  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $pro-&gt;getName();  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $pro2-&gt;getName();  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">Client::main();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><ul>\n<li><strong>代理模式定义</strong></li>\n</ul>\n<blockquote>\n<p>为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用</p>\n</blockquote>\n<ul>\n<li><p><strong>主要角色</strong></p>\n<ul>\n<li>抽象角色：通过接口或抽象类声明真实角色实现的业务方法。</li>\n<li>代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。</li>\n<li>真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</li>\n</ul>\n</li>\n<li><p><strong>优点</strong></p>\n</li>\n</ul>\n<ol>\n<li>职责清晰</li>\n<li>代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了中介的作用和保护了目标对象的作用。</li>\n<li>高扩展性</li>\n</ol>\n<ul>\n<li><strong>代理模式实例</strong></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象角色</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGiveGift</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">giveRose</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">giveChocolate</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//真实角色</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Follower</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGiveGift</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> $girlName;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name=<span class=\"string\">'Girl'</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;girlName=$name;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">giveRose</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&#123;$this-&gt;girlName&#125;:送你的玫瑰&lt;br/&gt;\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">giveChocolate</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&#123;$this-&gt;girlName&#125;:送你的巧克力&lt;br/&gt;\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理角色</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IGiveGift</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> $follower;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name=<span class=\"string\">'Girl'</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;follower=<span class=\"keyword\">new</span> Follower($name);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">giveRose</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;follower-&gt;giveRose();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">giveChocolate</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;follower-&gt;giveChocolate();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$proxy=<span class=\"keyword\">new</span> Proxy(<span class=\"string\">'xxx'</span>);  </span><br><span class=\"line\">$proxy-&gt;giveRose();  </span><br><span class=\"line\">$proxy-&gt;giveChocolate();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"注册树模式\"><a href=\"#注册树模式\" class=\"headerlink\" title=\"注册树模式\"></a>注册树模式</h1><ul>\n<li><strong>注册树模式概念</strong></li>\n</ul>\n<blockquote>\n<p>注册树模式也叫注册模式或注册器模式。注册树模式将对象实例注册到一棵全局的对象树上，需要的时候从对象树上获取即可。   </p>\n</blockquote>\n<ul>\n<li><strong>注册树模式优点</strong></li>\n</ul>\n<p>　　单例模式创建唯一对象的过程本身还有一种判断，即判断对象是否存在，存在则返回对象，不存在则创建对象并返回。 工厂模式更多考虑的是扩展维护的问题。 总的来说，单例模式和工厂模式可以产生更加合理的对象。怎么方便调用这些对象呢？注册树模式是一种不错的选择。不管是通过单例模式还是工厂模式还是二者结合生成的对象，都统统给我插入到注册树上，用某个对象的时候，直接从注册树上获取即可。</p>\n<ul>\n<li><strong>注册树模式实例</strong></li>\n</ul>\n<p>假如已经存在类Database；</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Register</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> $objects;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span><span class=\"params\">($alias, $object)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::$objects[$alias] = $object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($key)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">self</span>::$objects[$key]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$objects[$key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_unset</span><span class=\"params\">($alias)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">self</span>::$objects[$alias]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDatabase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t$db = <span class=\"keyword\">new</span> Database();</span><br><span class=\"line\">\t<span class=\"comment\">//插入到注册树</span></span><br><span class=\"line\">\tRegister::set(<span class=\"string\">'db1'</span>, $db);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从注册树里获取</span></span><br><span class=\"line\">$db = Register::get(<span class=\"string\">'db1'</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><ul>\n<li><strong>单例模式概念</strong></li>\n</ul>\n<blockquote>\n<p>一个类有且仅有一个实例，并且自行实例化向整个系统提供</p>\n</blockquote>\n<ul>\n<li><strong>单例模式的特点</strong></li>\n</ul>\n<ol>\n<li>一个类在整个应用中只有一个实例</li>\n<li>类必须自行创建这个实例</li>\n<li>必须自行向整个系统提供这个实例</li>\n</ol>\n<ul>\n<li><strong>单例模式举例</strong></li>\n</ul>\n<p>一个应用中有一个数据库的类Database，如果不用单例模式，每次new都会消耗大量的资源，而且每次打开和关闭数据库连接也会消耗一些资源，如果使用单例模式则不会存在这些问题。<br>使用单例模式实现代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Database</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> $db;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">self</span>::$db)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>::$db = <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$db;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$db;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<p><code>$db = Database::getInstance();</code></p>\n<h1 id=\"state模式\"><a href=\"#state模式\" class=\"headerlink\" title=\"state模式\"></a>state模式</h1><ul>\n<li><strong>概念</strong></li>\n</ul>\n<blockquote>\n<p>不同的状态,不同的行为;或者说,每个状态有着相应的行为.</p>\n</blockquote>\n<ul>\n<li><strong>使用场景</strong></li>\n</ul>\n<p>State模式在实际使用中比较多,适合”状态的切换”.因为我们经常会使用<code>If elseif else</code> 进行状态切换, 如果针对状态的这样判断切换反复出现,我们就要联想到是否可以采取State模式了.</p>\n<p>不只是根据状态,也有根据属性.如果某个对象的属性不同,对象的行为就不一样,这点在数据库系统中出现频率比较高,我们经常会在一个数据表的尾部,加上property属性含义的字段,用以标识记录中一些特殊性质的记录,这种属性的改变(切换)又是随时可能发生的,就有可能要使用State.</p>\n<p><strong>适用性</strong>：</p>\n<p>在下面的两情况下均可以使用State模式：</p>\n<ol>\n<li>一个对象的行为取决于它的状态，并且必须在运行时刻根据状态改变它的行为。</li>\n<li>一个操作中含有庞大的多分支的条件豫剧，并且这些分支依赖于该对象的状态，这个状态通常用一个或多个枚举常量表示。通常，有多个操作包含这一相同的条件结构，State模式将每一个条件分支放入一个单独的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。</li>\n</ol>\n<ul>\n<li><p><strong>参与者</strong></p>\n</li>\n<li><p>Context(环境，Person)定义客户感兴趣的类。</p>\n</li>\n<li><p>State(Moodstate)：定义一个接口以封装与Context的一个特定状态相关的行为</p>\n</li>\n<li><p>ConcreteState Subclasses(具体状态子类，如Angry)每一个子类实现一个与Context的状态相关的行为。</p>\n</li>\n</ul>\n<p>他们的协作关系是：</p>\n<ul>\n<li><p>Context将于状态相关的请求委托给当前的ConcreteState对象处理。</p>\n</li>\n<li><p>Context可将自身作为一个参数传递给处理该请求的状态对象，这使得状态对象在必要的时候可访问Context。</p>\n</li>\n<li><p>Context是客户使用的主要接口，客户可用状态对象来配置一个Context，一旦一个Context配置完毕，他的客户不再需要直接与状态对象打交道。</p>\n</li>\n<li><p>Context或者ConcreteState子类都可以决定哪个状态是另外那个状态的后继者，以及是在何种条件下进行状态转换。</p>\n</li>\n<li><p><strong>如何使用</strong></p>\n</li>\n</ul>\n<p>State需要两种类型实体参与:</p>\n<ol>\n<li>state manager 状态管理器 ,就是开关 ,如上面例子的Context实际就是一个state manager, 在state manager中有对状态的切换动作.</li>\n<li>用抽象类或接口实现的父类,,不同状态就是继承这个父类的不同子类.</li>\n</ol>\n<p>以上面的Context为例.我们要修改它,建立两个类型的实体.<br>第一步: 首先建立一个父类:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MoodState</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeState</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>父类中的方法要对应state manager中的开关行为,在state manager中 本例就是Context中,开关动作为changeState.那么在状态父类中就要有具体处理这个动作:changeState(); 同时还需要一个doSomething();</p>\n<p>下面是具体子类的实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Angry</span> <span class=\"keyword\">implements</span> <span class=\"title\">MoodState</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $p;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;p = $p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"i am angry\\r\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeState</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;p-&gt;setState(<span class=\"keyword\">new</span> Happy(<span class=\"keyword\">$this</span>-&gt;p));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样 其他状态的子类实现如Angry一样.</p>\n<p>第二步: 要重新改写State manager 也就是本例的Context:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = <span class=\"keyword\">new</span> Mad(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span><span class=\"params\">($state)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state-&gt;doSomething();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state-&gt;changeState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此,我们也就实现了State的refactorying过程.</p>\n<p>以上只是相当简单的一个实例,在实际应用中,处理是复杂的.</p>\n<p><strong>状态模式优点</strong>：</p>\n<ol>\n<li>封装转换过程，也就是转换规则</li>\n<li>枚举可能的状态，因此，需要事先确定状态种类。</li>\n</ol>\n<blockquote>\n<p>状态模式可以允许客户端改变状态的转换行为，而状态机则是能够自动改变状态，状态机是一个比较独立的而且复杂的机制，具体可参考一个状态机开源项目：<a href=\"http://sourceforge.net/projects/smframework/\" target=\"_blank\" rel=\"noopener\">项目地址</a></p>\n</blockquote>\n<p>状态模式在工作流或游戏等各种系统中有大量使用，甚至是这些系统的核心功能设计，例如政府OA中，一个批文的状态有多种：未办；正在办理；正在批示；正在审核；已经完成等各种状态，使用状态机可以封装这个状态的变化规则，从而达到扩充状态时，不必涉及到状态的使用者。</p>\n<p>在网络游戏中，一个游戏活动存在开始；开玩；正在玩；输赢等各种状态，使用状态模式就可以实现游戏状态的总控，而游戏状态决定了游戏的各个方面，使用状态模式可以对整个游戏架构功能实现起到决定的主导作用。</p>\n<p>状态模式实质：</p>\n<p><strong>使用状态模式前，客户端外界需要介入改变状态，而状态改变的实现是琐碎或复杂的。</strong></p>\n<p>使用状态模式后，客户端外界可以直接使用事件Event实现，根本不必关心该事件导致如何状态变化，这些是由状态机等内部实现。</p>\n<p>这是一种Event-condition-State，状态模式封装了condition-State部分。</p>\n<p>每个状态形成一个子类，每个状态只关心它的下一个可能状态，从而无形中形成了状态转换的规则。如果新的状态加入，只涉及它的前一个状态修改和定义。</p>\n<p>状态转换有几个方法实现：一个在每个状态实现next()，指定下一个状态；还有一种方法，设定一个StateOwner，在StateOwner设定stateEnter状态进入和stateExit状态退出行为。</p>\n<p>状态从一个方面说明了流程，流程是随时间而改变，状态是截取流程某个时间片。</p>\n<ul>\n<li><strong>实例</strong></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * state 设计模式.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MoodState</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeState</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Angry</span> <span class=\"keyword\">implements</span> <span class=\"title\">MoodState</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $p;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;p = $p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"i am angry\\r\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeState</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;p-&gt;setState(<span class=\"keyword\">new</span> Happy(<span class=\"keyword\">$this</span>-&gt;p));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Happy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MoodState</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $p;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;p = $p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"i am Happy\\r\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeState</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;p-&gt;setState(<span class=\"keyword\">new</span> Mad(<span class=\"keyword\">$this</span>-&gt;p));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mad</span> <span class=\"keyword\">implements</span> <span class=\"title\">MoodState</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $p;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;p = $p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"i am mad\\r\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeState</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;p-&gt;setState(<span class=\"keyword\">new</span> Angry(<span class=\"keyword\">$this</span>-&gt;p));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = <span class=\"keyword\">new</span> Mad(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span><span class=\"params\">($state)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state-&gt;doSomething();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state-&gt;changeState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">client</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>;$i &lt; <span class=\"number\">10</span>;++$i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"the $i times:\"</span>;</span><br><span class=\"line\">            $p-&gt;doSomething();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> Client();</span><br></pre></td></tr></table></figure>\n<h1 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h1><ul>\n<li><strong>策略模式概念</strong></li>\n</ul>\n<blockquote>\n<p>策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p>\n</blockquote>\n<ul>\n<li><strong>主要角色</strong></li>\n</ul>\n<ul>\n<li>抽象策略角色： 策略类，通常由一个接口或者抽象类实现。</li>\n<li>具体策略角色：包装了相关的算法和行为。</li>\n<li>环境角色：持有一个策略类的引用，最终给客户端调用。</li>\n</ul>\n<ul>\n<li><strong>应用场景</strong></li>\n</ul>\n<ol>\n<li>多个类只区别在表现行为不同，可以使用Strategy模式，在运行时动态选择具体要执行的行为。</li>\n<li>需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。</li>\n<li>对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li>\n</ol>\n<ul>\n<li><strong>优点</strong></li>\n</ul>\n<ol>\n<li>策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码转移到父类里面，从而避免重复的代码。</li>\n<li>策略模式提供了可以替换继承关系的办法。继承可以处理多种算法或行为。如果不是用策略模式，那么使用算法或行为的环境类就可能会有一些子类，每一个子类提供一个不同的算法或行为。但是，这样一来算法或行为的使用者就和算法或行为本身混在一起。决定使用哪一种算法或采取哪一种行为的逻辑就和算法或行为的逻辑混合在一起，从而不可能再独立演化。继承使得动态改变算法或行为变得不可能。</li>\n<li>使用策略模式可以避免使用多重条件转移语句。多重转移语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，统统列在一个多重转移语句里面，比使用继承的办法还要原始和落后。</li>\n</ol>\n<ul>\n<li><p><strong>缺点</strong></p>\n<ol>\n<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。换言之，策略模式只适用于客户端知道所有的算法或行为的情况。</li>\n<li>策略模式造成很多的策略类，每个具体策略类都会产生一个新类。有时候可以通过把依赖于环境的状态保存到客户端里面，而将策略类设计成可共享的，这样策略类实例可以被不同客户端使用。换言之，可以使用享元模式来减少对象的数量。</li>\n</ol>\n</li>\n<li><p><strong>策略模式实例</strong></p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*策略模式</span></span><br><span class=\"line\"><span class=\"comment\">*定义一系列的算法,把每一个算法封装起来,并且使它们可相互替换。</span></span><br><span class=\"line\"><span class=\"comment\">*本模式使得算法可独立于使用它的客户变化</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*出行旅游</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TravelStrategy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travelAlgorithm</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*具体策略类(ConcreteStrategy)</span></span><br><span class=\"line\"><span class=\"comment\">*1：乘坐飞机</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AirPlanelStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">TravelStrategy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travelAlgorithm</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span><span class=\"string\">\"travelbyAirPlain\"</span>,<span class=\"string\">\"&lt;BR&gt;\\r\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*具体策略类(ConcreteStrategy)</span></span><br><span class=\"line\"><span class=\"comment\">*2：乘坐火车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrainStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">TravelStrategy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travelAlgorithm</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span><span class=\"string\">\"travelbyTrain\"</span>,<span class=\"string\">\"&lt;BR&gt;\\r\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*具体策略类(ConcreteStrategy)</span></span><br><span class=\"line\"><span class=\"comment\">*3：骑自行车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BicycleStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">TravelStrategy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travelAlgorithm</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span><span class=\"string\">\"travelbyBicycle\"</span>,<span class=\"string\">\"&lt;BR&gt;\\r\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*环境类(Context):</span></span><br><span class=\"line\"><span class=\"comment\">*用一个ConcreteStrategy对象来配置。</span></span><br><span class=\"line\"><span class=\"comment\">*维护一个对Strategy对象的引用。可定义一个接口来让Strategy访问它的数据。</span></span><br><span class=\"line\"><span class=\"comment\">*算法解决类，以提供客户选择使用何种解决方案：</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonContext</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>$_strategy = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(TravelStrategy $travel)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_strategy=$travel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *旅行</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTravelStrategy</span><span class=\"params\">(TravelStrategy $travel)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_strategy=$travel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *旅行</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travel</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span><span class=\"keyword\">$this</span>-&gt;_strategy-&gt;travelAlgorithm();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//乘坐火车旅行</span></span><br><span class=\"line\">$person=<span class=\"keyword\">new</span> PersonContext(<span class=\"keyword\">new</span> TrainStrategy());</span><br><span class=\"line\">$person-&gt;travel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//改骑自行车</span></span><br><span class=\"line\">$person-&gt;setTravelStrategy(<span class=\"keyword\">new</span> BicycleStrategy());</span><br><span class=\"line\">$person-&gt;travel();</span><br></pre></td></tr></table></figure>\n\n","categories":["计算机编程"],"tags":["design-pattern"]},{"title":"学习A*寻路算法","url":"/2015-09-29-Astar-algorithm/","content":"<h1 id=\"A-寻路\"><a href=\"#A-寻路\" class=\"headerlink\" title=\"A*寻路\"></a><code>A*</code>寻路</h1><h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>我们日常生活中的很多决策问题都可以转化为对应的路径规划问题,如何从复杂的路径中寻找两个或者多个点之间的最短距离就是一个很值得研究的东西</p>\n<p><code>A*</code>算法是一种寻路算法,解决的是路径规划问题的一种</p>\n<p>目的是:</p>\n<blockquote>\n<p>找出某地图中两点之间的最短路径</p>\n</blockquote>\n<h2 id=\"寻路过程\"><a href=\"#寻路过程\" class=\"headerlink\" title=\"寻路过程\"></a>寻路过程</h2><p>先来看个地图</p>\n<pre><code>s:起点   e:终点  #:障碍\n| | | | | | | |          \n| | | |#| | | |\n| |s| |#| |e| |\n| | | |#| | | |\n| | | | | | | |</code></pre><p>现在有这样的需求,我们需要找出s-&gt;e的最短路径<br>但是,s和e之间有一堵’墙’,就是”#”啦<br>这样怎么才能找出最短路径呢?  </p>\n<p>第一种做法(Dijkstra算法):</p>\n<pre><code>s:起点   e:终点  *:检索路径 #:障碍\n|*|*|*| | | | |\n|*|*|*|#| | | |\n|*|s|*|#| |e| |\n|*|*|*|#|*|*| |\n|*|*|*|*|*| | |</code></pre><p>或者我们可以这样做(A*):</p>\n<pre><code>s:起点   e:终点 *:检索路径 #:障碍\n| | | | | | | |       \n|*|*|*|#| | | |\n|*|s|*|#| |e| |\n|*|*|*|#|*| | |\n| | |*|*|*| | |</code></pre><p>很明显,第二种做法比第一种做法检索的路径要少很多,当然,速度上就要快一些,对一些更复杂的地图,<code>A*</code>要比普通广度优先的算法快上许多</p>\n<p>例如:</p>\n<pre><code>s:起点  e:终点  *:检索路径  #:障碍\n| | | | | | | | | | | | | |    \n| | | | | | | | |e| | | | |    \n| | | |#|#|#|#|#|#|#| | | |    \n| | |#| | | | | | | |#| | |    \n| | |#| | | | | | | |#| | |    \n| | |#| | | | | | | |#| | |    \n| | |#| | | | | | | |#| | |    \n| | | | | | | | | | | | | |\n| | | | | | |s| | | | | | |\n| | | | | | | | | | | | | |\n| | | | | | | | | | | | | |</code></pre><p>这个地图中从s到e,如果使用普通寻路可能是这样的</p>\n<pre><code>s:起点  e:终点  *:最终路径  #:障碍\n| | | | | | | | | | | | | |    \n| | | | | | | | |e|*|*| | |    \n| | | |#|#|#|#|#|#|#|*|*| |    \n| | |#| | | |*|*|*|*|#|*| |    \n| | |#| | | |*| | |*|#|*| |    \n| | |#| | | |*| | |*|#|*| |    \n| | |#| | | |*| | |*|#|*| |    \n| | | | | | |*| | | |*|*| |\n| | | | | | |s| | | | | | |\n| | | | | | | | | | | | | |\n| | | | | | | | | | | | | |</code></pre><p>很明显,寻路过程中出现了较多的无用步数,寻路进入了布袋口里面,我们期望的是寻路尽量快速,寻找最短路径,<code>A*</code>的做法就比较符合我们的期望</p>\n<p><code>A*</code>寻路:</p>\n<pre><code>s:起点  e:终点  *:最终路径 #:障碍\n| | | | | | | | | | | | | |    \n| | | | | | | | |e|*|*| | |    \n| | | |#|#|#|#|#|#|#|*|*| |    \n| | |#| | | | | | | |#|*| |    \n| | |#| | | | | | | |#|*| |    \n| | |#| | | | | | | |#|*| |    \n| | |#| | | | | | | |#|*| |    \n| | | | | | |*|*|*|*|*|*| |\n| | | | | | |s| | | | | | |\n| | | | | | | | | | | | | |\n| | | | | | | | | | | | | |</code></pre><h2 id=\"A-寻路的主要过程\"><a href=\"#A-寻路的主要过程\" class=\"headerlink\" title=\"A*寻路的主要过程\"></a><code>A*</code>寻路的主要过程</h2><ol>\n<li>将起点S加入到开放列表(开放列表中的点都是可用的)</li>\n<li>寻找起点S周围所有可到达的点,并计算F值(最终衡量陆静距离的值),设置这些点的父节点为起点,将这些点加入到一个开放列表</li>\n<li>将起点从开放列表中删除,并添加到关闭列表,从开放列表中选取F值最小的点M(如果有多个最小F值,随机取其一)</li>\n<li>将M从开放列表中删除,并添加到关闭列表,计算M周围可到达的点,重新计算F值,将周围这些点都存入开放列表,设置他们的父节点为M</li>\n<li>如果M周围某个点已经在开放列表中,重新计算F值和G值(已消耗路径),选取新旧G值中最小的点</li>\n<li>最后如果发现终点在开放列表中,终止程序</li>\n</ol>\n<p><strong><code>A*</code>寻路的精髓</strong></p>\n<p>核心公式：<strong>F = G + H</strong></p>\n<p>F:用来评价点距起点距离的值</p>\n<p>G:实际已耗费的路径</p>\n<p>H:未来还需要耗费的路径</p>\n<p><code>A*</code>算法的实质是通过维护一个<code>待检测点的列表(open list)</code>和一个<code>已检测点的列表(closed list)</code>来记录寻路过程,从图形上来看，OPEN集是已访问区域的边界，CLOSED集是已访问区域的内部。每个节点还包含一个指向父节点的指针，以确定追踪关系。</p>\n<p>算法有一个主循环,重复地从OPEN集中取最优节点n(即f值最小的节点)来检测.如果n是目标节点,那么算法结束;<br>否则,将节点n从OPEN集删除,并添加到CLOSED集中,然后查看n的所有邻节点n’,如果邻节点在CLOSED集,它已被检测过,则无需再检测;<br>如果邻节点在OPEN集,它将会被检测,则无需此时检测;<br>否则,将该邻节点加入OPEN集,设置其父节点为n,到n’的路径开销<code>F(n&#39;) = G(n) + H(n,n&#39;)</code></p>\n<h2 id=\"A-的变种\"><a href=\"#A-的变种\" class=\"headerlink\" title=\"A*的变种\"></a><code>A*</code>的变种</h2><p><code>A*</code>算法可以通过<code>动态加权</code>,<code>跳跃点搜索</code>,<code>双向搜索</code>,<code>迭代深化</code>等进行性能和功能的优化</p>\n<p>此外还有<code>动态A*</code>与<code>终身规划A*</code>等变化,这些变化其实都是基于基本的<code>A*</code>理论来进行优化</p>\n<h2 id=\"寻路算法的应用\"><a href=\"#寻路算法的应用\" class=\"headerlink\" title=\"寻路算法的应用\"></a>寻路算法的应用</h2><p>比较常见的是寻路算法在游戏中的应用,因为很多游戏中会有地图的概念,涉及到地图就很容易有寻路规划的需要</p>\n<p>比如:许多RPG游戏中会有去寻找某个NPC接任务或者去某个地方打败某个BOSS</p>\n<p>寻路算法在生活中也有应用,比如 探索和侦查,道路建设,地形分析,城市规划等</p>\n<p>总之,深入研究寻路算法是非常有意义的</p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><p>如果有希望深入了解<code>A*</code>的读者,强烈推荐一篇文章,作者写的非常用心,讲的也特别细</p>\n<p>地址:<a href=\"http://theory.stanford.edu/~amitp/GameProgramming/index.html\" target=\"_blank\" rel=\"noopener\">http://theory.stanford.edu/~amitp/GameProgramming/index.html</a></p>\n<h2 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h2><p>下面是一个Python实现的<code>A*寻路</code>的代码:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node_Elem</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#开放列表和关闭列表的元素类型，parent用来在成功的时候回溯路径</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, parent, x, y, dist)</span>:</span></span><br><span class=\"line\">        self.parent = parent</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\">        self.dist = dist</span><br></pre></td></tr></table></figure>\n\n<p>主要程序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A_Star</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#A星算法实现类</span></span><br><span class=\"line\">    <span class=\"comment\">#注意w,h两个参数，如果你修改了地图，需要传入一个正确值或者修改这里的默认参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, s_x, s_y, e_x, e_y, w=<span class=\"number\">60</span>, h=<span class=\"number\">30</span>)</span>:</span></span><br><span class=\"line\">        self.s_x = s_x</span><br><span class=\"line\">        self.s_y = s_y</span><br><span class=\"line\">        self.e_x = e_x</span><br><span class=\"line\">        self.e_y = e_y</span><br><span class=\"line\"></span><br><span class=\"line\">        self.width = w</span><br><span class=\"line\">        self.height = h</span><br><span class=\"line\"></span><br><span class=\"line\">        self.open = []</span><br><span class=\"line\">        self.close = []</span><br><span class=\"line\">        self.path = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#查找路径的入口函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_path</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#构建开始节点</span></span><br><span class=\"line\">        p = Node_Elem(<span class=\"literal\">None</span>, self.s_x, self.s_y, <span class=\"number\">0.0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\">#扩展F值最小的节点</span></span><br><span class=\"line\">            self.extend_round(p)</span><br><span class=\"line\">            <span class=\"comment\">#如果开放列表为空，则不存在路径，返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.open:</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"comment\">#获取F值最小的节点</span></span><br><span class=\"line\">            idx, p = self.get_best()</span><br><span class=\"line\">            <span class=\"comment\">#找到路径，生成路径，返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.is_target(p):</span><br><span class=\"line\">                self.make_path(p)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"comment\">#把此节点压入关闭列表，并从开放列表里删除</span></span><br><span class=\"line\">            self.close.append(p)</span><br><span class=\"line\">            <span class=\"keyword\">del</span> self.open[idx]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_path</span><span class=\"params\">(self,p)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#从结束点回溯到开始点，开始点的parent == None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> p:</span><br><span class=\"line\">            self.path.append((p.x, p.y))</span><br><span class=\"line\">            p = p.parent</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_target</span><span class=\"params\">(self, i)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> i.x == self.e_x <span class=\"keyword\">and</span> i.y == self.e_y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_best</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        best = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"comment\">#开放列表中最好的值</span></span><br><span class=\"line\">        bv = self.width*self.height*<span class=\"number\">10000</span> <span class=\"comment\">#这个值应该大于地图的最大格子数量</span></span><br><span class=\"line\">        <span class=\"comment\">#开放列表中最好的键</span></span><br><span class=\"line\">        bi = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, i <span class=\"keyword\">in</span> enumerate(self.open):</span><br><span class=\"line\">            value = self.get_dist(i)<span class=\"comment\">#获取F值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> value &lt; bv:<span class=\"comment\">#比以前的更好，即F值更小</span></span><br><span class=\"line\">                best = i</span><br><span class=\"line\">                bv = value</span><br><span class=\"line\">                bi = idx</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bi, best</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_dist</span><span class=\"params\">(self, i)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># F = G + H</span></span><br><span class=\"line\">        <span class=\"comment\"># G 为已经走过的路径长度， H为估计还要走多远</span></span><br><span class=\"line\">        <span class=\"comment\"># 这个公式就是A*算法的精华了。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> i.dist + math.sqrt((self.e_x-i.x)*(self.e_x-i.x)+ (self.e_y-i.y)*(self.e_y-i.y))*<span class=\"number\">1.4</span><span class=\"comment\">#这里的1.4为优化数字，可选范围[1.0-1.4],</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extend_round</span><span class=\"params\">(self, p)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#可以从8个方向走</span></span><br><span class=\"line\">        xs = (<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        ys = (<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,  <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\">#只能走上下左右四个方向</span></span><br><span class=\"line\">        <span class=\"comment\">#xs = (0, -1, 1, 0)</span></span><br><span class=\"line\">        <span class=\"comment\">#ys = (-1, 0, 0, 1)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(xs, ys):</span><br><span class=\"line\">            new_x, new_y = x + p.x, y + p.y</span><br><span class=\"line\">            <span class=\"comment\">#无效或者不可行走区域，则勿略</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.is_valid_coord(new_x, new_y):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\">#构造新的节点</span></span><br><span class=\"line\">            node = Node_Elem(p, new_x, new_y, p.dist+self.get_cost(p.x, p.y, new_x, new_y))</span><br><span class=\"line\">            <span class=\"comment\">#新节点在关闭列表，则忽略</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.node_in_close(node):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            i = self.node_in_open(node)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != <span class=\"number\">-1</span>:</span><br><span class=\"line\">                <span class=\"comment\">#新节点在开放列表</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.open[i].dist &gt; node.dist:</span><br><span class=\"line\">                    <span class=\"comment\">#现在的路径到比以前到这个节点的路径更好~</span></span><br><span class=\"line\">                    <span class=\"comment\">#则使用现在的路径</span></span><br><span class=\"line\">                    self.open[i].parent = p</span><br><span class=\"line\">                    self.open[i].dist = node.dist</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            self.open.append(node)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cost</span><span class=\"params\">(self, x1, y1, x2, y2)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#上下左右直走，代价为1.0，斜走，代价为1.4</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x1 == x2 <span class=\"keyword\">or</span> y1 == y2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1.0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1.4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">node_in_close</span><span class=\"params\">(self, node)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> self.close:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.x == i.x <span class=\"keyword\">and</span> node.y == i.y:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">node_in_open</span><span class=\"params\">(self, node)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, n <span class=\"keyword\">in</span> enumerate(self.open):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.x == n.x <span class=\"keyword\">and</span> node.y == n.y:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_valid_coord</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> x &gt;= self.width <span class=\"keyword\">or</span> y &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> y &gt;= self.height:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> test_map[y][x] != <span class=\"string\">'#'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_searched</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        l = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> self.open:</span><br><span class=\"line\">            l.append((i.x, i.y))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> self.close:</span><br><span class=\"line\">            l.append((i.x, i.y))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l</span><br></pre></td></tr></table></figure>\n","categories":["计算机编程"],"tags":["A*算法"]},{"title":"如何计算圆周率π和自然常数e","url":"/2016-03-03-calculate-pi/","content":"<script crossorigin=\"anonymous\" integrity=\"sha384-P75AfVrDnfsoUfx7dDfQM9ivlDhxgE+g4kqO/U7lyXtJwJdpZozbt8L5ywD2PDA0\" src=\"https://lib.baomitu.com/vue/2.5.21/vue.min.js\"></script>\n\n<h1 id=\"如何计算π和e的值\"><a href=\"#如何计算π和e的值\" class=\"headerlink\" title=\"如何计算π和e的值\"></a>如何计算π和e的值</h1><p>从小学就知道 <code>π= 3.14159265358979...</code></p>\n<p>但是一直不知道如何计算这个值</p>\n<p>之前听说过祖冲之使用的是割圆法，但是我不会(T_T，流下了没有技术的泪水)</p>\n<p>后来偶尔看到数学上有一种方法</p>\n<p><code>π = 4 * (1 - 1/3 + 1/5 -1/7 + 1/9 ... + 1/n)</code></p>\n<p>使用这种方法只要n足够大, 精度就能提高, 所以我就想用程序来尝试计算一下pi的值, 毕竟计算机比人做这种事情合适的多</p>\n<p>从小学就知道 <code>π= 3.14159265358979...</code><br>后来又想到可以采用蒙特卡洛采样的方法也可以计算出来 π </p>\n<p>计算方法如下, 我们随机生成 m 个 二维坐标(x, y), 并且满足  0 &lt;= x &lt; 1, 0 &lt;= y &lt; 1。然后使用欧拉距离统计在圆内的坐标的数目 n ， 再除以生成的所有坐标的数目 n / m。由于我们的采样范围只覆盖了1/4的圆， 所以结果需要乘上4 就是圆周率的结果了</p>\n<h1 id=\"如何计算自然常数\"><a href=\"#如何计算自然常数\" class=\"headerlink\" title=\"如何计算自然常数\"></a>如何计算自然常数</h1><p>自然常数也一直是我不理解的一个数字</p>\n<p>之前听说过一个类比,讲的挺好的,但当时并没有去仔细考虑过计算的方法<a href=\"http://www.ruanyifeng.com/blog/2011/07/mathematical_constant_e.html\" target=\"_blank\" rel=\"noopener\">数学常数e的含义</a></p>\n<h2 id=\"自然常数的意义\"><a href=\"#自然常数的意义\" class=\"headerlink\" title=\"自然常数的意义\"></a>自然常数的意义</h2><blockquote>\n<p>自然常数代表单位时间内,数量翻倍增长的极限</p>\n</blockquote>\n<p>比如: 你有1万块钱, 假如存到银行, 1年到期的复利是100%, 那你到明年最多可以拿到多少钱 , 答案是: 2.71828万</p>\n<p>这里我们看如何计息:</p>\n<p>如果按照每半年计息, 1年后等于 (1 + (100%/2)) * (1 + (100%/2)) = 2.25 万</p>\n<p>如果按照每3个月计息一次: 1 + (100%/4) ^ 4 = 2.4414万</p>\n<p>如果按照每1个月计算一次 1 + (100%/12) ^12 = 2.6034 万</p>\n<p>如果再往下, 每天, 每分钟, 每秒, 最终得到的就是 lim (1+100%/n)^n 的极限就是 2.71828…</p>\n<h2 id=\"如何计算e\"><a href=\"#如何计算e\" class=\"headerlink\" title=\"如何计算e\"></a>如何计算e</h2><p>后来也找到一种数学方法可以计算</p>\n<p><code>e = 1/(0!)+1/(1!)+1/(2!)+1/(3!)+1/(4!)....1/(n!)</code></p>\n<p>于是一时好奇就使用程序实现了一下,如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    num = <span class=\"number\">10000000</span></span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">    res = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getPi</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, self.num):</span><br><span class=\"line\">            m = <span class=\"number\">1</span> / (<span class=\"number\">1</span> + <span class=\"number\">2</span> * n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                self.a = self.a + m</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.a = self.a - m</span><br><span class=\"line\">        print(self.a * <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getE</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, self.num):</span><br><span class=\"line\">            self.res = self.res + <span class=\"number\">1</span> / math.factorial(n)</span><br><span class=\"line\">        print(self.res)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c = Calculator()</span><br><span class=\"line\">c.getPi()</span><br><span class=\"line\">c.getE()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在线演示\"><a href=\"#在线演示\" class=\"headerlink\" title=\"在线演示\"></a>在线演示</h2><p>在线测试demo(js版)</p>\n<ol>\n<li>计算pi</li>\n</ol>\n<div id=\"cal-pi\">\n    <p>精度:<input v-model=\"input\" type =\"number\" value=\"\"></p><button class=\"btn btn-info\"  v-on:click=\"calculate\">Calculate</button>\n    <p>结果: <input v-model=\"result\" readonly=\"true\"> </p>\n</div>\n\n<ol start=\"2\">\n<li>计算E</li>\n</ol>\n<div id=\"cal-e\">\n    <p>精度:<input type=\"number\" v-model=\"input\" value=\"\"></p><button class=\"btn btn-info\"  v-on:click=\"calculate\">Calculate</button>\n    <p>结果: <input v-model=\"result\" readonly=\"true\"> </p>   \n</div>\n\n<ol start=\"3\">\n<li>计算你当前的年龄, 精确值, 让你清晰感受时间的流逝</li>\n</ol>\n<div id=\"cal-age\">\n    <p>生日:<input type=\"text\" v-model=\"input\" value=\"\" placeholder=\"2017-01-01\"></p><button class=\"btn btn-info\" v-on:click=\"calculate\">Calculate</button>\n    <p>结果: <input v-model=\"result\" readonly=\"true\"> </p>\n</div>\n\n<script>\nvar arr = [{\n    el:\"#cal-e\",\n    data:{\n        result:0,\n        input:100,\n        msg:\"请输入一个精度值\"\n    },\n    methods:{\n        calculate:function(){\n            if (!this.input) {\n                alert(this.msg);\n            }\n            var n = this.input;\n            var s = 0;\n            for (var i = 0; i <= n; i++) {\n                s = s + (1 / this.factorial(i));\n            }\n            this.result = s;\n        },\n        factorial: function(n) {\n            if (n <= 1) return 1;\n            return n * this.factorial(n - 1);\n        }\n    }\n},{\n    el:\"#cal-age\",\n    data:{\n        result:0,\n        input:'2000-01-01',\n        msg:\"请输入一个出生日期\",\n        n:0\n    },\n    methods:{\n        calculate:function(){\n            if (!this.input) {\n                alert(this.msg);\n            }\n            this.n = 0;\n            this.interval = setInterval(this.setAge,100);\n        },\n        setAge:function (){\n            this.n += 1;\n            var b = this.input;\n            var now = new Date().valueOf();\n            var born = new Date(b).valueOf();\n            var age = (now - born) / (365 * 24 * 3600 * 1000);\n            this.result = age;\n            this.stop()\n        },\n        stop:function() {\n            if (this.n > 50) clearInterval(this.interval)\n        }\n    }\n},{\n    el:\"#cal-pi\",\n    data:{\n        result:0,\n        input:100,\n        msg:\"请输入一个精度值\"\n    },\n    methods:{\n        calculate:function(){\n            if (!this.input) {\n                alert(this.msg);\n            }\n            var n = this.input * 100;\n            var s = 1;\n            for (var i = 1; i <= n; i++) {\n                var m = 1 / (1 + 2 * i);\n                if (i % 2 == 0) {\n                    s += m;\n                } else {\n                    s -= m;\n                }\n            }\n            this.result = s * 4;\n        }\n    }\n}];\n\nfor (e in arr) {\n    new Vue(arr[e]);\n}\n\n</script>\n","categories":["数学"],"tags":["math"]},{"title":"菊与刀","url":"/2016-05-12-The-Chrysanthemum-and-the-Sword/","content":"<h1 id=\"记\"><a href=\"#记\" class=\"headerlink\" title=\"记\"></a>记</h1><p>看&lt;&lt;菊与刀&gt;&gt;的时候,我总有一种感觉, 书中所谓的对美国人来说日本人一些不能理解的地方,到底哪里不能理解了,难道不应该是这样的吗?</p>\n<ol>\n<li>崇尚等级与秩序,不同等级享受不同的权利,承担对应的义务</li>\n<li>崇尚统一与纯粹,排斥多元化的世界和文化</li>\n<li>有恩报恩,有仇报仇</li>\n<li>忠,孝为先</li>\n<li>自己怎么样受苦都行,但是不应该给别人添麻烦</li>\n<li>自尊,自立,自强</li>\n<li>相信丛林法则,弱肉强食</li>\n</ol>\n<h2 id=\"念\"><a href=\"#念\" class=\"headerlink\" title=\"念\"></a>念</h2><p>后来,再度回想起来,应该是我被日本文化影响太深了,所以没有发觉其中的不合理之处</p>\n<p>但是,究竟是从什么时候开始的呢,从什么时候开始受到这种影响的呢?</p>\n<h2 id=\"思\"><a href=\"#思\" class=\"headerlink\" title=\"思\"></a>思</h2><p>仔细分析,感觉应该是从小学就开始了</p>\n<p>小学时期,与家里联系还算紧密,但是当时受动漫影响,已经开始受到日本文化影响了,只是当时这种影响还没有显现出来</p>\n<ol>\n<li><p>初中以后,与家里缺少联系和沟通,学习和受教育途径主要通过学校,社会和网络</p>\n</li>\n<li><p>本人比较聪明,接受新东西比较快,小的时候就能敏感的感受到日本动漫和电影电视所传达的价值观</p>\n</li>\n<li><p>受传统思想影响,比较排斥美国那种文化,所以初中以后接触的国外的文化作品,以日本的居多</p>\n</li>\n</ol>\n<p>以上几点可能就是我形成现在这种性格和价值观的原因,但是,现在问题是要怎么改呢?</p>\n<p>多看书?多分析?</p>\n<h2 id=\"为\"><a href=\"#为\" class=\"headerlink\" title=\"为\"></a>为</h2><ol>\n<li>多读书, 尝试接受多元的文化和观念</li>\n<li>多做,多体验,多想,多比较</li>\n</ol>\n<h2 id=\"の\"><a href=\"#の\" class=\"headerlink\" title=\"の\"></a>の</h2><p>现在发现这个世界的本质就是<code>混乱</code>,<code>无序</code>. 强行去求得统一和规范很多时候是一种偏执</p>\n<p>偏执太过就入魔了</p>\n<p>世事本就如此,有些人坚持就被认为是偏执,有些人坚持就认为是有毅力,这种两面解释我接受</p>\n","categories":["阅读记录"]},{"title":"The First Three.js Project","url":"/2016-06-01-threejs-demo/","content":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js\" ></script>\n\n<h1 id=\"Three-js简单演示\"><a href=\"#Three-js简单演示\" class=\"headerlink\" title=\"Three.js简单演示\"></a><code>Three.js</code>简单演示</h1><p><code>Three.js</code>是基于<code>WebGl</code>封装的一个现成库,更新速度非常快,这里简单列出一些three.js的简单例子和演示</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>要使用<code>three.js</code>首先要引入库文件<br>首先,到<a href=\"http://threejs.org/\" target=\"_blank\" rel=\"noopener\">http://threejs.org/</a>下载<code>three.js</code>类库<br>也可以使用cdn服务,例如<a href=\"http://cdn.bootcss.com/three.js/\" target=\"_blank\" rel=\"noopener\">http://cdn.bootcss.com/three.js/r83/three.js</a></p>\n<p>然后这里讲解一下<code>Three.js</code>主要用到的知识(这些也是所有3D绘图要用到的基础知识)</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p><strong>场景</strong><br>场景就是你要绘制的图形所放置的容器,是所有几何体发生交互和展示的所在,几何体对象必须放到场景中才可以显现出来</p>\n</li>\n<li><p><strong>渲染器</strong><br>渲染器可以把你所绘制的图形通过像素画出来,比如颜色,材质,纹理,反射效果啥的</p>\n</li>\n<li><p><strong>照相机</strong><br>相当于人的眼睛,就是你所观看的视角的方向</p>\n</li>\n</ul>\n<p>以下部分可以酌情使用:</p>\n<ul>\n<li><p><strong>光源</strong><br>  光源是<code>WebGL</code>中必须的部分,如果没有光源,即便渲染出了东西,也是没有办法在屏幕上看到的(没有光当然就是黑漆漆的一片啦)<br>  光源还分好多种,常用的有环境光,聚光灯,和点光源等</p>\n</li>\n<li><p><strong>几何体</strong><br>  几何体是我们平常生活中最容易遇到的东西,<code>WebGL</code>中提供了几种常用的几何体类<br>  每种几何体使用的时候都是这么几个步骤</p>\n<ol>\n<li><p>实例化类对象</p>\n</li>\n<li><p>设置材质</p>\n</li>\n<li><p>用栅格把几何体对象和材质编织起来,得到3D对象</p>\n</li>\n<li><p>设置3D对象的属性(位置,阴影之类)</p>\n<p>一个复杂的物体可以拆分成几个简单的几何体</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"透视和投影\"><a href=\"#透视和投影\" class=\"headerlink\" title=\"透视和投影\"></a>透视和投影</h2><p>透视和投影是3D图形中非常重要和基础的概念</p>\n<p>这里主要跟<code>three.js</code>中的照相机类有关系,照相机代表模拟人眼的观察方向</p>\n<p>透视在<code>three.js</code>中只有是用线框模型才能很好的表现</p>\n<p>投影主要分为正交投影和透视投影</p>\n<h3 id=\"正交投影\"><a href=\"#正交投影\" class=\"headerlink\" title=\"正交投影\"></a>正交投影</h3><p><img data-src=\"https://i.loli.net/2020/05/09/UjivxQIND2FwgXu.png\" alt=\"28210109_oXpx.jpg\"></p>\n<p>正交投影一般用于平面制图,建模,游戏中的小地图也使用正交投影,正交投影不会改变物体的比例</p>\n<p>正交投影相机函数如下</p>\n<p><code>THREE.OrthographicCamera(left, right, top, bottom, near, far)</code></p>\n<p>传入<code>视景体</code>的(左,右,上,下,前边界,后边界),即可完成一个正交投影相机的设定</p>\n<ul>\n<li>example</li>\n</ul>\n<p>设置照相机,照相机位置为(0,0,5)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> camera = <span class=\"keyword\">new</span> THREE.OrthographicCamera(<span class=\"number\">-2</span>, <span class=\"number\">2</span>, <span class=\"number\">1.5</span>, <span class=\"number\">-1.5</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">camera.position.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">scene.add(camera);</span><br></pre></td></tr></table></figure>\n<p>在原点处创建一个边长为1的正方体，为了和透视效果做对比，这里我们使用<code>wireframe(线框模型)</code>而不是实心的材质，以便看到正方体后方的边：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cube = <span class=\"keyword\">new</span> THREE.Mesh(<span class=\"keyword\">new</span> THREE.BoxGeometry(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class=\"line\">        color: <span class=\"number\">0xff0000</span>,</span><br><span class=\"line\">        wireframe: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<div id=\"Orthographic1\" style=\"margin:0;text-align: center;\"></div>\n\n<p>但是由于角度问题,我们现在只能看到正方体的正面,现在我们调整相机位置<br><code>camera.position.set(4, -3, 5);</code><br>调整视角方向(看向原点),这样我们就能看到整个正方体的线框了<br><code>camera.lookAt(new THREE.Vector3(0, 0, 0));</code></p>\n<div id=\"Orthographic2\" style=\"margin:0;text-align: center;\"></div>\n\n<script>\nOrthographic1();\nOrthographic2();\nfunction Orthographic2(){\n    // renderer\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(600,400);\n    document.getElementById(\"Orthographic2\").appendChild(renderer.domElement);\n    renderer.setClearColor(new THREE.Color(0X000000,0.5)); // black\n    // scene\n    var scene = new THREE.Scene();\n    //camara\n    var camera = new THREE.OrthographicCamera(-2, 2, 1.5, -1.5, 1, 10);\n    camera.position.set(4, -3, 5);\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\n    scene.add(camera);\n    //cube\n    var cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1),\n        new THREE.MeshBasicMaterial({\n            color: 0xff0000,\n            wireframe: true\n        })\n    );\n    scene.add(cube);\n    // render\n    renderer.render(scene, camera)\n}\nfunction Orthographic1(){\n    // renderer\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(600,400);\n    document.getElementById(\"Orthographic1\").appendChild(renderer.domElement);\n    renderer.setClearColor(new THREE.Color(0X000000,0.5)); // black\n    // scene\n    var scene = new THREE.Scene();\n    //camara\n    var camera = new THREE.OrthographicCamera(-2, 2, 1.5, -1.5, 1, 10);\n    camera.position.set(0,0,5);\n    // camera.lookAt(new THREE.Vector3(0, 0, 0));\n    scene.add(camera);\n    //cube\n    var cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1),\n        new THREE.MeshBasicMaterial({\n            color: 0xff0000,\n            wireframe: true\n        })\n    );\n    scene.add(cube);\n    // render\n    renderer.render(scene, camera)\n}\n\n</script>\n\n<h3 id=\"透视投影\"><a href=\"#透视投影\" class=\"headerlink\" title=\"透视投影\"></a>透视投影</h3><p><img data-src=\"https://i.loli.net/2020/05/09/OMT2v7BDgYNmpXS.jpg\" alt=\"28210109_n5sg.jpg\"></p>\n<p>透视投影类似人眼看到的效果,大多数游戏,应用等都使用透视投影,透视投影会使看到的物体产生形变,产生”远小近大”的效果</p>\n<p>透视投影相机函数如下</p>\n<p><code>THREE.PerspectiveCamera(fov, aspect, near, far)</code></p>\n<p>透视相机需要传入(俯仰角,画面比,近边界,远边界)来完成透视相机的参数设置</p>\n<ul>\n<li>example</li>\n</ul>\n<p>设置透视投影照相机，这里Canvas长600px，宽400px，所以aspect设为600 / 400：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> camera = <span class=\"keyword\">new</span> THREE.PerspectiveCamera(<span class=\"number\">45</span>, <span class=\"number\">600</span> / <span class=\"number\">400</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">camera.position.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">scene.add(camera);</span><br></pre></td></tr></table></figure>\n\n<p>设置一个在原点处的边长为1的正方体:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cube = <span class=\"keyword\">new</span> THREE.Mesh(<span class=\"keyword\">new</span> THREE.BoxGeometry(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class=\"line\">        color: <span class=\"number\">0xff0000</span>,</span><br><span class=\"line\">        wireframe: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\">scene.add(cube);</span><br></pre></td></tr></table></figure>\n\n<p>效果如下:</p>\n<div id=\"Perspective\" style=\"margin:0;text-align: center;\"></div>\n\n<script>\nPerspective();\nfunction Perspective() {\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(600,400);\n    document.getElementById(\"Perspective\").appendChild(renderer.domElement);\n    renderer.setClearColor(new THREE.Color(0X000000,0.5)); // black\n    // scene\n    var scene = new THREE.Scene();\n    //camara\n    var camera = new THREE.PerspectiveCamera(45, 600 / 400, 1, 10);\n    camera.position.set(0, 0, 5);\n    scene.add(camera);\n    //cube\n    var cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1),\n        new THREE.MeshBasicMaterial({\n            color: 0xff0000,\n            wireframe: true\n        })\n    );\n    scene.add(cube);\n    // render\n    renderer.render(scene, camera)\n}\n</script>\n\n<h2 id=\"材质\"><a href=\"#材质\" class=\"headerlink\" title=\"材质\"></a>材质</h2><p>材质有大量共有属性,这些属性可以设置材质的纹理,颜色,雾化等许多效果,这里挑选几种常用材质进行简单说明</p>\n<h3 id=\"基础材质\"><a href=\"#基础材质\" class=\"headerlink\" title=\"基础材质\"></a>基础材质</h3><p>基础材质不受灯光影响,多用于实现简单展示</p>\n<p>构造函数:<code>THREE.MeshBasicMaterial( parameters )</code></p>\n<h3 id=\"Phong材质\"><a href=\"#Phong材质\" class=\"headerlink\" title=\"Phong材质\"></a>Phong材质</h3><p>Phong材质= 环境光 + 漫反射 + 镜面反射</p>\n<p>该材质具有极高的真实感,可产生高光效果,可以模拟金属等物体</p>\n<p>构造函数:<code>THREE.MeshPhongMaterial( parameters )</code></p>\n<h3 id=\"lambert材质\"><a href=\"#lambert材质\" class=\"headerlink\" title=\"lambert材质\"></a>lambert材质</h3><p>lambert材质可以模拟一些无需高光反射的哑光效果,例如:皮纹</p>\n<p>构造函数:<code>THREE.MeshLambertMaterial( parameters )</code></p>\n<h3 id=\"法向量材质\"><a href=\"#法向量材质\" class=\"headerlink\" title=\"法向量材质\"></a>法向量材质</h3><p>根据表面法向量方向产生不同颜色,多用于调试</p>\n<p>构造函数:<code>THREE.MeshNormalMaterial( parameters )</code></p>\n<h2 id=\"光源\"><a href=\"#光源\" class=\"headerlink\" title=\"光源\"></a>光源</h2><p>光源可谓是3D绘图中极其重要的部分,光源分为很多种,除了环境光,点光源这几种常见的之外,还有面光源等特殊光源</p>\n<p>所有光源都具有一部分共同属性,在<code>three.js</code>中这些属性为缺省值,不填则会有默认值,例如:color</p>\n<h3 id=\"环境光\"><a href=\"#环境光\" class=\"headerlink\" title=\"环境光\"></a>环境光</h3><p>环境光是模拟自然环境中无处不在的被多次反射的光线,环境光的特点</p>\n<ul>\n<li>无法产生阴影</li>\n<li>从四周所有方向照射</li>\n</ul>\n<p>环境光构造函数  <code>THREE.AmbientLight(hex)</code></p>\n<p>hex:十六进制的颜色值,例如:0xff0000</p>\n<p>添加一个环境光源</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"keyword\">new</span> THREE.AmbientLight(&#123;<span class=\"number\">0xffffff</span>&#125;);</span><br><span class=\"line\">scene.add(light);</span><br></pre></td></tr></table></figure>\n\n<p>但是只添加环境光而没有物体是无法看出来效果的<br>所以再添加两个长方体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> greenCube = <span class=\"keyword\">new</span> THREE.Mesh(<span class=\"keyword\">new</span> THREE.BoxGeometry(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> THREE.MeshLambertMaterial(&#123;<span class=\"attr\">color</span>: <span class=\"number\">0x00ff00</span>&#125;));</span><br><span class=\"line\">greenCube.position.x = <span class=\"number\">3</span>;</span><br><span class=\"line\">scene.add(greenCube);</span><br><span class=\"line\"><span class=\"keyword\">var</span> whiteCube = <span class=\"keyword\">new</span> THREE.Mesh(<span class=\"keyword\">new</span> THREE.BoxGeometry(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> THREE.MeshLambertMaterial(&#123;<span class=\"attr\">color</span>: <span class=\"number\">0xffffff</span>&#125;));</span><br><span class=\"line\">whiteCube.position.x = <span class=\"number\">-3</span>;</span><br><span class=\"line\">scene.add(whiteCube);</span><br></pre></td></tr></table></figure>\n\n<div id=\"Ambient\" style=\"margin:0;text-align: center;\"></div>\n\n<script>\nAmbient();\nfunction Ambient() {\n    var renderer = new THREE.WebGLRenderer();\n    var width = 600;\n    var height = 400;\n    document.getElementById(\"Ambient\").appendChild(renderer.domElement);\n    renderer.setClearColor(new THREE.Color(0x000000,0.5));\n    renderer.setSize(width,height);\n    // scene\n    var scene = new THREE.Scene();\n    //camara\n    var camera = new THREE.PerspectiveCamera(45, width / height, 1, 10);\n    camera.position.set(0, 3, 10);\n    camera.lookAt(new THREE.Vector3(0,0,0));\n    scene.add(camera);\n    var light = new THREE.AmbientLight( 0x880000); // soft white light\n    scene.add(light);\n    //cube\n    var greenCube = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2),\n        new THREE.MeshLambertMaterial({color: 0x00ff00}));\n    greenCube.position.x = 2;\n    scene.add(greenCube);\n    var whiteCube = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2),\n            new THREE.MeshLambertMaterial({color: 0xff0000}));\n    whiteCube.position.x = -2;\n    scene.add(whiteCube);\n    // render\n    renderer.render(scene, camera)\n}\n</script>\n\n<h3 id=\"仿射变换\"><a href=\"#仿射变换\" class=\"headerlink\" title=\"仿射变换\"></a>仿射变换</h3><p>仿射变换是指计算机图形学中表示物体运动和变化的一系列动作</p>\n<p>主要有 平移,旋转,缩放和切变</p>\n<p>图形学中一般使用一个四维矩阵来表示仿射变换</p>\n<p>具体如下:</p>\n<pre><code>[ 缩放/旋转矩阵(3x3矩阵),0]\n[ 平移矩阵,1]</code></pre><p>原因:</p>\n<pre><code>[2,3]\n[4,5] </code></pre><p>这样的一个矩阵我们可以看成是两个二元方程组, 在图形上表示一个二维平面图形</p>\n<p>同样的表示三维平面图形我们用三元方程组</p>\n<p>表示为矩阵就是</p>\n<pre><code>[2,5,6]\n[6,2,1]\n[-1,3,4]</code></pre><p>对三维图形做变换其实就是对矩阵进行操作</p>\n<h3 id=\"聚光灯\"><a href=\"#聚光灯\" class=\"headerlink\" title=\"聚光灯\"></a>聚光灯</h3><p>聚光灯模拟的是舞台上的聚光灯,手电筒等光源效果,特点有</p>\n<ul>\n<li>可以产生阴影</li>\n<li>从一点沿某一方向射出,具有明显边界,影响范围一般呈锥体形状</li>\n</ul>\n<p>聚光灯构造函数</p>\n<p><code>THREE.SpotLight(hex, intensity, distance, angle, penumbra,decay)</code></p>\n<p>hex: 十六进制颜色值<br>indensity: 光强度<br>distance: 光照有效距离<br>angle: 角度<br>penumbra: 半影<br>decay: 衰减度</p>\n<h3 id=\"点光源\"><a href=\"#点光源\" class=\"headerlink\" title=\"点光源\"></a>点光源</h3><p>点光源模拟的类似于生活中的灯泡,蜡烛等由一点  </p>\n<p>点光源构造函数:<br><code>THREE.PointLight(hex, intensity, distance)</code></p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"keyword\">new</span> THREE.PointLight(<span class=\"number\">0xffffff</span>, <span class=\"number\">2</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">light.position.set(<span class=\"number\">0</span>, <span class=\"number\">1.5</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">scene.add(light);</span><br></pre></td></tr></table></figure>\n\n<div id=\"PointLight\" style=\"margin:0;text-align: center;\"></div>\n\n<script>\nPointLight();\nfunction PointLight() {\n    var renderer = new THREE.WebGLRenderer();\n    var width = 600;\n    var height = 400;\n    document.getElementById(\"PointLight\").appendChild(renderer.domElement);\n    renderer.setClearColor(new THREE.Color(0x000000,0.5));\n    renderer.setSize(width,height);\n    // scene\n    var scene = new THREE.Scene();\n    //camara\n    var camera = new THREE.PerspectiveCamera(45, width / height, 1, 10);\n    camera.position.set(0, 5, 5);\n    camera.lookAt(new THREE.Vector3(0,0,0));\n    scene.add(camera);\n    var light = new THREE.PointLight(0xffffff, 2, 100);\n    light.position.set(0, 1.5, 2);\n    scene.add(light);\n    //cube\n    var greenCube = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2),\n        new THREE.MeshLambertMaterial({color: 0x00ff00}));\n    greenCube.position.x = 2;\n    scene.add(greenCube);\n    var whiteCube = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2),\n            new THREE.MeshLambertMaterial({color: 0xff0000}));\n    whiteCube.position.x = -2;\n    scene.add(whiteCube);\n    // render\n    renderer.render(scene, camera)\n}\n</script>\n\n\n<h3 id=\"平行光\"><a href=\"#平行光\" class=\"headerlink\" title=\"平行光\"></a>平行光</h3><p>一般距离极远的点光源表现为平行光,例如:太阳</p>\n<p>平行光可以产生阴影</p>\n<p><code>THREE.DirectionalLight(hex, intensity)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"keyword\">new</span> THREE.DirectionalLight();</span><br><span class=\"line\">light.position.set(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">scene.add(light);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在线演示\"><a href=\"#在线演示\" class=\"headerlink\" title=\"在线演示\"></a>在线演示</h2><p>好啦,了解以上知识,再稍微熟悉一下基础<code>three.js</code>类就能做一个简单的东西了<br>比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scene = <span class=\"keyword\">new</span> THREE.Scene();</span><br><span class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">700</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">330</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> camera = <span class=\"keyword\">new</span> THREE.PerspectiveCamera(<span class=\"number\">45</span>,width/height,<span class=\"number\">0.1</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer();</span><br><span class=\"line\">renderer.setClearColor(<span class=\"keyword\">new</span> THREE.Color(<span class=\"number\">0x000000</span>,<span class=\"number\">0.5</span>));</span><br><span class=\"line\">renderer.setSize(width, height);</span><br><span class=\"line\">camera.position.set(<span class=\"number\">-30</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">camera.lookAt(<span class=\"keyword\">new</span> THREE.Vector3(<span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"scene\"</span>).appendChild(renderer.domElement);</span><br><span class=\"line\"><span class=\"keyword\">var</span> groundGeom = <span class=\"keyword\">new</span> THREE.PlaneGeometry(<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> groundMesh = <span class=\"keyword\">new</span> THREE.Mesh(groundGeom,<span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123;<span class=\"attr\">color</span>:<span class=\"number\">0xffee00</span>&#125;));</span><br><span class=\"line\">groundMesh.rotation.x = -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">2</span><span class=\"number\">-0.08</span>;</span><br><span class=\"line\">scene.add(groundMesh);</span><br><span class=\"line\"><span class=\"keyword\">var</span> geomCube = <span class=\"keyword\">new</span> THREE.BoxGeometry(<span class=\"number\">16</span>,<span class=\"number\">32</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cube = <span class=\"keyword\">new</span> THREE.Mesh(geomCube,<span class=\"keyword\">new</span> THREE.MeshNormalMaterial(&#123;<span class=\"attr\">color</span>:<span class=\"number\">0x7777ff</span>&#125;));</span><br><span class=\"line\">scene.add(cube);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ambientLight = <span class=\"keyword\">new</span> THREE.AmbientLight(&#123;<span class=\"attr\">color</span>:<span class=\"number\">0xff0000</span>&#125;);</span><br><span class=\"line\">scene.add(ambientLight);</span><br><span class=\"line\">scene.fog = <span class=\"keyword\">new</span> THREE.Fog(<span class=\"number\">0x0000ff</span>,<span class=\"number\">0.03</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> spotLight = <span class=\"keyword\">new</span> THREE.SpotLight(<span class=\"number\">0x00ff00</span>);</span><br><span class=\"line\">spotLight.position.set(<span class=\"number\">40</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">spotLight.castShadow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">scene.add(spotLight);</span><br><span class=\"line\">render();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cube.rotation.y += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">    requestAnimationFrame(render);</span><br><span class=\"line\">    renderer.render(scene,camera);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试区域(代码复制到下边文本框运行即可):<br><textarea id=\"test\" style=\"width:600px;height:400px; border:1px solid #ccc;border-radius:5px;\"></textarea></p>\n<p><button class=\"btn btn-info\" onclick=\"eval(document.getElementById('test').value)\">运行测试代码</button></p>\n<div id=\"scene\" style=\"margin:0;text-align: center;\">\n</div>\n\n<h2 id=\"So-Sad\"><a href=\"#So-Sad\" class=\"headerlink\" title=\"So Sad\"></a>So Sad</h2><p>由于Three.js更新太快了,所以我打算暂时不更新了,等版本稳定再继续更新…</p>\n","categories":["计算机编程"],"tags":["three.js","计算机图形学"]},{"title":"谏迎佛骨表--韩愈","url":"/2016-07-07-poem-jianyingfogu/","content":"<h1 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h1><h2 id=\"灭佛运动\"><a href=\"#灭佛运动\" class=\"headerlink\" title=\"灭佛运动\"></a>灭佛运动</h2><p>为什么要贴这个呢?</p>\n<p>主要是看到当今中国绿化之势不可挡, 有感而发.</p>\n<p>也希望某些人能从历史中吸取教训</p>\n<h2 id=\"谏迎佛骨表\"><a href=\"#谏迎佛骨表\" class=\"headerlink\" title=\"谏迎佛骨表\"></a>谏迎佛骨表</h2><p>臣某言：伏以佛者，夷狄之一法耳,自后汉时流入中国,上古未尝有也。昔者黄帝在位百年，年百一十岁；少昊在位八十年，年百岁；颛顼在位七十九年，年九十八岁；帝喾在位七十年，年百五岁；帝尧在位九十八年，年百一十八岁；帝舜及禹，年皆百岁。此时天下太平，百姓安乐寿考，然而中国未有佛也。其后殷汤亦年百岁，汤孙太戊在位七十五年，武丁在位五十九年，书史不言其年寿所极，推其年数，盖亦俱不减百岁。周文王年九十七岁，武王年九十三岁，穆王在位百年。此时佛法亦未入中国，非因事佛而致然也。</p>\n<p>汉明帝时，始有佛法，明帝在位，才十八年耳。其后乱亡相继，运祚不长。宋、齐、梁、陈、元魏已下，事佛渐谨，年代尤促。惟梁武帝在位四十八年，前后三度舍身施佛，宗庙之祭，不用牲牢，昼日一食，止于菜果，其后竞为侯景所逼，饿死台城，国亦寻灭。事佛求福，乃更得祸。由此观之，佛不足事，亦可知矣。</p>\n<p>高祖始受隋禅，则议除之。当时群臣材识不远，不能深知先王之道，古今之宜，推阐圣明，以救斯弊，其事遂止，臣常恨焉。伏维睿圣文武皇帝陛下，神圣英武，数千百年已来，未有伦比。即位之初，即不许度人为僧尼道，又不许创立寺观。臣常以为高祖之志，必行于陛下之手，今纵未能即行，岂可恣之转令盛也?</p>\n<p>今闻陛下令群僧迎佛骨于凤翔，御楼以观，舁入大内，又令诸寺递迎供养。臣虽至愚，必知陛下不惑于佛，作此崇奉，以祈福祥也。直以年丰人乐，徇人之心，为京都士庶设诡异之观，戏玩之具耳。安有圣明若此，而肯信此等事哉!然百姓愚冥，易惑难晓，苟见陛下如此，将谓真心事佛，皆云：“天子大圣，犹一心敬信；百姓何人，岂合更惜身命!”焚顶烧指，百十为群，解衣散钱，自朝至暮，转相仿效，惟恐后时，老少奔波，弃其业次。若不即加禁遏，更历诸寺，必有断臂脔身以为供养者。伤风败俗，传笑四方，非细事也。</p>\n<p>夫佛本夷狄之人，与中国言语不通，衣服殊制；口不言先王之法言，身不服先王之法服；不知君臣之义，父子之情。假如其身至今尚在，奉其国命，来朝京师，陛下容而接之，不过宣政一见，礼宾一设，赐衣一袭，卫而出之于境，不令惑众也。况其身死已久，枯朽之骨，凶秽之馀，岂宜令入宫禁？</p>\n<p>孔子曰：“敬鬼神而远之。”古之诸侯，行吊于其国，尚令巫祝先以桃茹祓除不祥，然后进吊。今无故取朽秽之物，亲临观之，巫祝不先，桃茹不用，群臣不言其非，御史不举其失，臣实耻之。乞以此骨付之有司，投诸水火，永绝根本，断天下之疑，绝后代之惑。使天下之人，知大圣人之所作为，出于寻常万万也。岂不盛哉!岂不快哉!佛如有灵，能作祸祟，凡有殃咎，宜加臣身，上天鉴临，臣不怨悔。无任感激恳悃之至，谨奉表以闻。臣某诚惶诚恐。</p>\n","categories":["文化艺术"]},{"title":"关于编程语言的一些看法","url":"/2016-06-08-idea-programing-language/","content":"<p>我希望通过描述我自己对各种编程语言的看法，能帮助到对编程有兴趣的或者是刚工作不久的同学选择适合自己的编程语言。</p>\n<h2 id=\"我对各种编程语言的看法\"><a href=\"#我对各种编程语言的看法\" class=\"headerlink\" title=\"我对各种编程语言的看法\"></a>我对各种编程语言的看法</h2><p>很多语言都是在特定时期，在特定领域，为了解决特定问题而出现的。所以如果我们能了解各种编程语言的特性和出现的原因，选择语言就没有那么困难。</p>\n<p>先看一个Tiobe编程语言的流行趋势</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/NfK3Vc9jqiHy7OE.png\" alt=\"20181108-11394.png\"></p>\n<p>我简单列举一下我熟悉的上面出现的几个语言有缺点和用途</p>\n<ul>\n<li>c/c++</li>\n</ul>\n<p>优点 -&gt; 性能强，资源占用低，足够底层，满足你对代码的精确控制能力</p>\n<p>缺点 -&gt; 开发效率太低了，像c语言本身标准库带有的函数太少，c++的stl倒是工具比较多，但是包管理工具什么的还是没有比较标准的。其实项目中工程构建方面的成本往往要超过语言本身带来的成本。</p>\n<p>建议 -&gt; 嵌入式，操作系统，数据库等领域的开发者，普通开发者拿来做算法研究还是比较合适的，不建议个人用此类语言来做私人项目。不过还是建议个人能拥有该语言的代码阅读能力， 便于精研技术。</p>\n<ul>\n<li>Rust</li>\n</ul>\n<p>优点 -&gt; rust某种程度上正好补足了c/c++的部分不足，比如标准库比较丰富，内存安全，性能没有太多损失，包管理和工具链还比较现代化。</p>\n<p>缺点 -&gt; 上手门槛高，语言限制太多</p>\n<p>建议 -&gt; 部分原来的c++的领域很适合用rust重构，包括数据库和存储系统，消息中间件，操作系统等。而且对底层原理有兴趣的其他开发者也可以借助完善的工具链来构建个人项目，如果你想做一个偏低层的项目的话。</p>\n<ul>\n<li>Java</li>\n</ul>\n<p>优点 -&gt; 工程化好，适合企业</p>\n<p>缺点 -&gt; 太中庸了，啥都能干，干啥都不够有优势</p>\n<p>建议 -&gt; 企业项目，个人做算法研究。</p>\n<ul>\n<li>Go</li>\n</ul>\n<p>优点 -&gt; 并发处理简单，工程化方便</p>\n<p>缺点 -&gt; 简约到有点简陋， 语言本身缺少太多东西</p>\n<p>建议 -&gt; 原PHP/Java开发者， 企业项目。同样适合个人做项目使用。</p>\n<ul>\n<li>Python</li>\n</ul>\n<p>优点 -&gt; 简单，开发效率高。</p>\n<p>缺点 -&gt; 不适合企业拿来做生产项目</p>\n<p>建议 -&gt; 适合编程初学者。快速搭建项目demo。</p>\n<ul>\n<li>Scala</li>\n</ul>\n<p>优点 -&gt; 表达能力强，函数式 + 面向对象</p>\n<p>缺点 -&gt; 受JVM限制做了很多妥协，想深入太过复杂，成也JVM，败也JVM</p>\n<p>建议 -&gt; 数据分析和处理工作者。也适合作为伪代码想别人描述算法思路</p>\n<ul>\n<li>scheme</li>\n</ul>\n<p>建议 -&gt; 对函数式编程和编程语言设计有兴趣的人，适合用来学习</p>\n<ul>\n<li>PHP</li>\n</ul>\n<p>建议 -&gt; 适合用来做与用户交互的web页面工作</p>\n<ul>\n<li>javascript</li>\n</ul>\n<p>建议 -&gt; 非前端工作者也建议学习一下， 语法简单，用途广泛</p>\n<h3 id=\"编程语言的江湖和流派\"><a href=\"#编程语言的江湖和流派\" class=\"headerlink\" title=\"编程语言的江湖和流派\"></a>编程语言的江湖和流派</h3><p>c/c++/Java这种就是传统的武林豪门少林/武当这种，或许这些门派不是最强的，但一定是不会太差，处于平均水准以上。</p>\n<p>虽然《九阴真经》,《北冥神功》这种级别的绝世武功也大多不是出于少林武当，但是,这种绝世武功不是适合所有人的，高收益往往伴随着高风险。所以还是建议大家多看,多学,增广见闻，见的多了,看得多了,了解的多了,最后根据自己的需要去选择,不要一开始就去选择拒绝</p>\n<blockquote>\n<p>当你拒绝一个事物,你就失去了向他学习的机会</p>\n</blockquote>\n<h2 id=\"一些建议\"><a href=\"#一些建议\" class=\"headerlink\" title=\"一些建议\"></a>一些建议</h2><p>首先建议大家初期尽量不要选择小众的冷门的编程语言。等以后有比较丰富的经验和认知以后在根据自己的需求去选择小众的语言。</p>\n<p>同时我自己是建议编程初学者最好学习两个语言， 一个编译型 + 一个脚本型。这样子可以兼具功能性和便捷性。</p>\n<p>初学者建议  go / java（编译型） + python / js（脚本型） 这样的搭配</p>\n<p>我个人大概是这样的学习路线:</p>\n<p>学校时期: C++, Java , PHP, JS, 都是学校时期学的, 当时就懂了个基本概念, 啥都没学会 。   刚工作时: C, js, PHP 早期工作需要 。<br>工作2年以后由因为工作关系接触到了Python， Go，Java，Scala。再后来希望对编程语言有更深入的认识，于是学习了Scheme和Rust。未来的花我可能会花更多时间在Rust和Scala上面</p>\n","categories":["计算机编程"],"tags":["编程语言"]},{"title":"Caman.js的图片处理演示","url":"/2016-08-03-camanjs-demo/","content":"<script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\n<script crossorigin=\"anonymous\" integrity=\"sha384-P75AfVrDnfsoUfx7dDfQM9ivlDhxgE+g4kqO/U7lyXtJwJdpZozbt8L5ywD2PDA0\" src=\"https://lib.baomitu.com/vue/2.5.21/vue.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/camanjs/4.1.2/caman.full.min.js\"></script>\n\n<h1 id=\"CamanJS图形处理库\"><a href=\"#CamanJS图形处理库\" class=\"headerlink\" title=\"CamanJS图形处理库\"></a>CamanJS图形处理库</h1><p>之前我曾想过自己做一个简单的图片处理库自己用,后来做了几个基本效果以后发现了成本太高</p>\n<p>然后就放弃了,去找了个现成的图形库:CamanJS</p>\n<p>发现用起来也不错,也就没有再做下去</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"http://camanjs.com/\" target=\"_blank\" rel=\"noopener\">CamanJS</a>是一个图片处理类库,能十分方便的处理图片</p>\n<p>本身已经提供了许多效果和操作</p>\n<p>使用起来也十分方便</p>\n<p>项目地址：<a href=\"https://github.com/meltingice/CamanJS/\" target=\"_blank\" rel=\"noopener\">https://github.com/meltingice/CamanJS/</a></p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p>在头文件中引入文件<a href=\"//cdn.bootcss.com/camanjs/4.1.2/caman.full.min.js\">//cdn.bootcss.com/camanjs/4.1.2/caman.full.min.js</a></p>\n<p>然后就可以直接使用内置的函数和效果了</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Caman(<span class=\"string\">\"#image\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stackBlur(<span class=\"number\">5</span>).render()  <span class=\"comment\">//模糊处理，模糊半径5像素</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h2><p><button class=\"btn btn-info\" id=\"reset\">RESET</button>(尽量使用chrome浏览器,请等待网页加载完毕)</p>\n<div>\n    <div id=\"stage\">\n        <img id=\"image\" data-src=\"https://i.loli.net/2020/05/09/1LzfsPa7U6D3oWx.png\" style=\"float: auto\">\n    </div>\n</div>\n\n\n<h1 id=\"预置效果\"><a href=\"#预置效果\" class=\"headerlink\" title=\"预置效果\"></a>预置效果</h1><p><code>Caman</code>内置了一批现成的图片效果，使用起来非常简单<br><code>this.revert()</code>用来重置图片效果,保证各个效果不互相影响<br><code>this.lomo()</code>将lomo效果用到图片上<br><code>this.render()</code>渲染图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Caman(<span class=\"string\">\"#image\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.revert();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lomo();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.render();</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>执行<code>love</code>效果: <button class=\"btn btn-info\" onclick=\"javascript:love_render()\">RUN LOVE</button></p>\n<p>其他预置效果还有</p>\n<p><code>lomo</code>,<code>vintage</code>,<code>clarity</code>,<code>sinCity</code>,<code>sunrise</code>,<code>crossProcess</code>,<code>orangePeel</code>,<code>grungy</code>,<code>jarques</code>,<br><code>pinhole</code>,<code>oldBoot</code>,<code>glowingSun</code>,<code>hazyDays</code>,<code>herMajesty</code>,<code>nostalgia</code>,<code>hemingway</code>,<code>concentrate</code><br>等</p>\n<p>将以上方法替换文本框中的<code>lomo</code>,例如 <code>this.hazyDays();</code>,然后点 RUN 就行了</p>\n<h2 id=\"Camanjs缺点\"><a href=\"#Camanjs缺点\" class=\"headerlink\" title=\"Camanjs缺点\"></a>Camanjs缺点</h2><p>不适合用来做粒度极细的像素级操作,虽然提供了方法</p>\n<script type=\"text/javascript\">\n    function love_render(){\n        Caman(\"#image\",function(){\n        this.revert();\n        this.love();\n        this.render();\n        })\n    }\n\n    function init() {\n        var list = [{\n            \"name\": \"brightness\",\n        }, {\n            \"name\": \"contrast\",\n        }, {\n            \"name\": \"vibrance\",\n        }, {\n            \"name\": \"saturation\",\n        }, {\n            \"name\": \"exposure\"\n        }, {\n            \"name\": \"hue\",\n            \"value\": 100\n        }, {\n            \"name\": \"clip\",\n            \"value\": 100\n        }, {\n            \"name\": \"sepia\",\n            \"value\": 100\n        }, {\n            \"name\": \"gamma\",\n            \"value\": 10\n        }, {\n            \"name\": \"noise\",\n            \"value\": 100\n        }, {\n            \"name\": \"sharpen\",\n            \"value\": 100\n        }, {\n            \"name\": \"stackBlur\",\n            \"value\": 30\n        }];\n        var table = document.createElement(\"table\");\n        for (var i = 0; i < list.length; i++) {\n            if (i % 2 == 0) {\n                var tr = document.createElement(\"tr\");\n                $(tr).attr(\"id\", \"tr\" + i);\n            }\n            var td1 = document.createElement(\"td\");\n            var td2 = document.createElement(\"td\");\n            var td3 = document.createElement(\"td\");\n            $(td1).attr(\"width\",\"15%\");\n            $(td2).attr(\"width\",\"20%\");\n            $(td3).attr(\"width\",\"5%\");\n\n            $(td1).append(list[i].name);\n            if (list[i].value > 0) {\n                $(td2).append(\"<input id=\" + list[i].name + \"_i value=0 type='range' min=0 max=\" + list[i].value + \" step=1 data-filter=\" + list[i].name + \">\")\n            } else {\n                $(td2).append(\"<input id=\" + list[i].name + \"_i value=0 type='range' min=-100 max=100 step=1 data-filter=\" + list[i].name + \">\");\n            }\n            $(td3).append(0);\n            $(tr).append(td1).append(td2).append(td3);\n            $(table).append(tr);\n        }\n        $(table).css(\"border\", \"1px solid #ccc\");\n\n        $(\"#stage\").append(table);\n    }\n    init();\n    $(\"input[type=range]\").change(function() {\n        var stackBlur_v = $(\"#stackBlur_i\").val();\n        var brightness_v = $(\"#brightness_i\").val();\n        var contrast_v = $(\"#contrast_i\").val();\n        var vibrance_v = $(\"#vibrance_i\").val();\n        var saturation_v = $(\"#saturation_i\").val();\n        var exposure_v = $(\"#exposure_i\").val()\n        var hue_v = $(\"#hue_i\").val()\n        var clip_v = $(\"#clip_i\").val()\n        var sepia_v = $(\"#sepia_i\").val()\n        var gamma_v = $(\"#gamma_i\").val()\n        var sharpen_v = $(\"#sharpen_i\").val()\n        var noise_v = $(\"#noise_i\").val()\n        $(this).parent().next().text($(this).val());\n\n        Caman(\"#image\", function() {\n            this.revert();\n            if (stackBlur_v > 0) this.stackBlur(stackBlur_v);\n            if (brightness_v > 0) this.brightness(brightness_v);\n            if (contrast_v > 0) this.contrast(contrast_v);\n            if (vibrance_v > 0) this.vibrance(vibrance_v);\n            if (saturation_v > 0) this.saturation(saturation_v);\n            if (exposure_v > 0) this.exposure(exposure_v);\n            if (hue_v > 0) this.hue(hue_v);\n            if (clip_v > 0) this.clip(clip_v);\n            if (sepia_v > 0) this.sepia(sepia_v);\n            if (gamma_v > 0) this.gamma(gamma_v);\n            if (sharpen_v > 0) this.sharpen(sharpen_v);\n            if (noise_v > 0) this.noise(noise_v);\n            this.render();\n        })\n\n        $(\"#reset\").click(function(){\n            Caman(\"#image\",function(){\n                this.revert();\n                this.render();\n            })\n        })\n    });\n</script>\n","categories":["计算机编程"],"tags":["计算机图形学","CamanJS"]},{"title":"2017-追番-看书记录","url":"/2017-01-01-comic-book-2017/","content":"<h1 id=\"Record\"><a href=\"#Record\" class=\"headerlink\" title=\"Record\"></a>Record</h1><p>想法来自 <a href=\"http://blog.sollrei.me\" target=\"_blank\" rel=\"noopener\">@Sollrei</a></p>\n<h2 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h2><h3 id=\"2月\"><a href=\"#2月\" class=\"headerlink\" title=\"2月\"></a>2月</h3><p>番剧:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 东皇战影</li>\n</ul>\n<p>图书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 三体3:死神永生</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 魔鬼搭讪学</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 魔鬼约会学</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 谁动了我的奶酪</li>\n</ul>\n<p>电影:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 假如爱有天意</li>\n</ul>\n<h3 id=\"3月\"><a href=\"#3月\" class=\"headerlink\" title=\"3月\"></a>3月</h3><p>番剧:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 人渣的本愿</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 从前有座灵剑山</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 斗破苍穹</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 小林家的龙女仆</li>\n</ul>\n<p>图书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 解忧杂货铺</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 嫌疑人X的献身</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 图解博弈论</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 菊与刀</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 极简生活:简而美的活着</li>\n</ul>\n<h3 id=\"4月\"><a href=\"#4月\" class=\"headerlink\" title=\"4月\"></a>4月</h3><p>番剧:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 画江湖之不良人</li>\n</ul>\n<p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 人类简史</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 人民的名义</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 好好说话</li>\n</ul>\n<p>其他:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> nice chord</li>\n</ul>\n<h3 id=\"5月\"><a href=\"#5月\" class=\"headerlink\" title=\"5月\"></a>5月</h3><p>番剧:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 龙的牙医</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 少年锦衣卫</li>\n</ul>\n<p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 走进搜索引擎</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 万历十五年</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 秘密</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 精进:如何做一个厉害的人</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Go Web编程</li>\n</ul>\n<h3 id=\"6月\"><a href=\"#6月\" class=\"headerlink\" title=\"6月\"></a>6月</h3><p>番剧:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 进击的巨人第二季</li>\n</ul>\n<p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> redis设计与实现</li>\n</ul>\n<h3 id=\"7月\"><a href=\"#7月\" class=\"headerlink\" title=\"7月\"></a>7月</h3><p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 枪炮,病菌与钢铁</li>\n</ul>\n<h3 id=\"8月\"><a href=\"#8月\" class=\"headerlink\" title=\"8月\"></a>8月</h3><p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 时间的形状</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> C++面向对象程序设计</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 恶意</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> HTTP权威指南</li>\n</ul>\n<h3 id=\"9月\"><a href=\"#9月\" class=\"headerlink\" title=\"9月\"></a>9月</h3><p>番剧:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> FATE/Apocrypha</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 画江湖之杯莫停</li>\n</ul>\n<p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 人生的智慧</li>\n</ul>\n<h3 id=\"10月\"><a href=\"#10月\" class=\"headerlink\" title=\"10月\"></a>10月</h3><p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 红楼梦(前80回原版,后四十回不符原意,不看了)</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 请停止无效努力:如何用正确的方法快速进阶</li>\n</ul>\n<h3 id=\"11月\"><a href=\"#11月\" class=\"headerlink\" title=\"11月\"></a>11月</h3><p>番剧:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 魆妖纪</li>\n</ul>\n<p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Go语言编程</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 好好说话</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> redis实战</li>\n</ul>\n<h3 id=\"12月\"><a href=\"#12月\" class=\"headerlink\" title=\"12月\"></a>12月</h3><p>番剧:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 宝石之国</li>\n</ul>\n<p>书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 你要做的,只不过是发现生活的美</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Java从初学到精通</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据结构与算法</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 乌合之众:大众心理研究</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 精灵宝钻</li>\n</ul>\n<p>合计:</p>\n<p>图书: 33本<br>番剧: 13部</p>\n","categories":["生活记录"]},{"title":"redis的基础数据结构","url":"/2017-01-09-redis-data-structure/","content":"<h1 id=\"redis基础数据结构\"><a href=\"#redis基础数据结构\" class=\"headerlink\" title=\"redis基础数据结构\"></a>redis基础数据结构</h1><p>redis中的数据对象有5种,但是这并不是redis中真正的数据存放方式, 只是对底层的数据存放结构进行了封装的对象</p>\n<p>redis的几种基础数据结构是redis中的最重要的部分, redis后续的几乎所有功能的设计和实现都依赖于此</p>\n<h1 id=\"sds简单动态字符串\"><a href=\"#sds简单动态字符串\" class=\"headerlink\" title=\"sds简单动态字符串\"></a>sds简单动态字符串</h1><p><em>对应的上层对象是</em> <code>字符串</code></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>具体的数据结构如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdstr</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>   len     <span class=\"comment\">// 字符串分配的字节</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>   <span class=\"built_in\">free</span>    <span class=\"comment\">// 未使用的字节数</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>  buff[]  <span class=\"comment\">// 存储字符串的数组</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sds是字符串对象的底层实现之一</p>\n<h2 id=\"sds的特性\"><a href=\"#sds的特性\" class=\"headerlink\" title=\"sds的特性\"></a>sds的特性</h2><p>赋值操作会统计字符串的长度然后将字符串存入buff字符数组里面,同时设定长度和使用的长度</p>\n<p>例如 “hello”这个字符串的存储结构如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tlen:<span class=\"number\">5</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">\tbuff:[<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>,<span class=\"string\">'\\0'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改的时候会比较麻烦,分为两种情况</p>\n<p>一是由段字符串变长:例如:由”hello”变为”hello,redis”.</p>\n<p>这个时候系统会检查原本的sds字符串是否有空余空间,剩余空间为0</p>\n<p>会分配等同于修改后字符串长度的剩余空间给sds,这个时候字符串的free属性会变为11,然后执行sdscat()</p>\n<p>这个时候buff会变为[‘h’,’e’,’l’,’l’,’o’,’,’,’r’,’e’,’d’,’i’,’s’,’\\0’]</p>\n<p>然后将字符串长度len修改为11</p>\n<p>最终结构如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tlen:<span class=\"number\">11</span>,     </span><br><span class=\"line\">\t<span class=\"built_in\">free</span>:<span class=\"number\">11</span>,</span><br><span class=\"line\">\tbuff:[<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>,<span class=\"string\">','</span>,<span class=\"string\">'r'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'s'</span>,<span class=\"string\">'\\0'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ps:当长度小于1M是翻倍扩容,超过1M时是以1M为标准定量扩容</p>\n<p>二是由长字符串变短</p>\n<p>例如:由”hello,redis”变为”redis”,这个时候会释放多余空间,同时把free值设为多出来的空间,以便下次使用方便</p>\n<p>修改后的结构大概如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tlen:<span class=\"number\">5</span>,      <span class=\"comment\">// 字符串长度</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>:<span class=\"number\">17</span>,    <span class=\"comment\">// 原本11,加上释放到的6个字节</span></span><br><span class=\"line\">\tbuff:[<span class=\"string\">'r'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'s'</span>,<span class=\"string\">'\\0'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要释放的时候可以手动调用函数来释放空间</p>\n<h2 id=\"为什么要使用sds\"><a href=\"#为什么要使用sds\" class=\"headerlink\" title=\"为什么要使用sds?\"></a>为什么要使用sds?</h2><ol>\n<li>sds可以杜绝缓冲区溢出的问题,获取字符串长度复杂度为常数</li>\n<li>二进制安全,sds使用len属性来判断字符串的结束</li>\n<li>减少字符串修改时的内存重分配次数</li>\n</ol>\n<h1 id=\"链表和quicklist\"><a href=\"#链表和quicklist\" class=\"headerlink\" title=\"链表和quicklist\"></a>链表和quicklist</h1><h2 id=\"数据结构-1\"><a href=\"#数据结构-1\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>抄袭自redis的源代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span>&#123;</span></span><br><span class=\"line\">\tlistNode * head;  \t<span class=\"comment\">//头节点</span></span><br><span class=\"line\">\tlistNode * tail;\t<span class=\"comment\">//尾节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len; \t<span class=\"comment\">//节点数量</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);\t<span class=\"comment\">//节点值复制函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr); \t<span class=\"comment\">//节点值释放函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*match)(<span class=\"keyword\">void</span> *ptr,<span class=\"keyword\">void</span> *key);\t<span class=\"comment\">//节点值对比函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表节点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">pre</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *value;</span><br><span class=\"line\">&#125;listNode;</span><br></pre></td></tr></table></figure>\n\n<p>换成形象点的json的形式就是如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>: &#123;</span><br><span class=\"line\">        head: &#123;</span><br><span class=\"line\">            pre: null,</span><br><span class=\"line\">            next: <span class=\"number\">2</span>,</span><br><span class=\"line\">            value: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        tail: &#123;</span><br><span class=\"line\">            pre: <span class=\"number\">99</span>,</span><br><span class=\"line\">            next: null,</span><br><span class=\"line\">            value: <span class=\"number\">100</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        len: <span class=\"number\">100</span>,</span><br><span class=\"line\">        dup:function () &#123;&#125;,</span><br><span class=\"line\">        <span class=\"built_in\">free</span>:function () &#123;&#125;,</span><br><span class=\"line\">        match:function () &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>链表是列表对象的底层实现之一(version 3.2 之前)</p>\n<p>链表在redis中主要负责的是存储和维护某一类对象,所常用到的操主要有遍历,修改等</p>\n<p>链表在redis中使用极为广泛,redis的事务,发布与订阅,服务器中维护的redisClient信息等都是用链表结构进行的存储</p>\n<h1 id=\"quicklist\"><a href=\"#quicklist\" class=\"headerlink\" title=\"quicklist\"></a>quicklist</h1><p>redis在3.2版本新加入了quicklist数据结构作为list的底层实现</p>\n<h2 id=\"数据结构-2\"><a href=\"#数据结构-2\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>以下代码来自redis源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklistEntry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> quicklist *quicklist;</span><br><span class=\"line\">    quicklistNode *node;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *zi;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *value;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> longval;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> sz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset;</span><br><span class=\"line\">&#125; quicklistEntry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* quicklist is a 32 byte struct (on 64-bit systems) describing a quicklist.</span></span><br><span class=\"line\"><span class=\"comment\"> * 'count' is the number of total entries.</span></span><br><span class=\"line\"><span class=\"comment\"> * 'len' is the number of quicklist nodes.</span></span><br><span class=\"line\"><span class=\"comment\"> * 'compress' is: -1 if compression disabled, otherwise it's the number</span></span><br><span class=\"line\"><span class=\"comment\"> *                of quicklistNodes to leave uncompressed at ends of quicklist.</span></span><br><span class=\"line\"><span class=\"comment\"> * 'fill' is the user-requested (or default) fill factor. */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklist</span> &#123;</span></span><br><span class=\"line\">    quicklistNode *head;</span><br><span class=\"line\">    quicklistNode *tail;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> count;        <span class=\"comment\">/* total count of all entries in all ziplists */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len;           <span class=\"comment\">/* number of quicklistNodes */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fill : <span class=\"number\">16</span>;              <span class=\"comment\">/* fill factor for individual nodes */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> compress : <span class=\"number\">16</span>; <span class=\"comment\">/* depth of end nodes not to compress;0=off */</span></span><br><span class=\"line\">&#125; quicklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* quicklistNode is a 32 byte struct describing a ziplist for a quicklist.</span></span><br><span class=\"line\"><span class=\"comment\"> * We use bit fields keep the quicklistNode at 32 bytes.</span></span><br><span class=\"line\"><span class=\"comment\"> * count: 16 bits, max 65536 (max zl bytes is 65k, so max count actually &lt; 32k).</span></span><br><span class=\"line\"><span class=\"comment\"> * encoding: 2 bits, RAW=1, LZF=2.</span></span><br><span class=\"line\"><span class=\"comment\"> * container: 2 bits, NONE=1, ZIPLIST=2.</span></span><br><span class=\"line\"><span class=\"comment\"> * recompress: 1 bit, bool, true if node is temporarry decompressed for usage.</span></span><br><span class=\"line\"><span class=\"comment\"> * attempted_compress: 1 bit, boolean, used for verifying during testing.</span></span><br><span class=\"line\"><span class=\"comment\"> * extra: 12 bits, free for future use; pads out the remainder of 32 bits */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklistNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklistNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quicklistNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *zl;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> sz;             <span class=\"comment\">/* ziplist size in bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count : <span class=\"number\">16</span>;     <span class=\"comment\">/* count of items in ziplist */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> encoding : <span class=\"number\">2</span>;   <span class=\"comment\">/* RAW==1 or LZF==2 */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> container : <span class=\"number\">2</span>;  <span class=\"comment\">/* NONE==1 or ZIPLIST==2 */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> recompress : <span class=\"number\">1</span>; <span class=\"comment\">/* was this node previous compressed? */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> attempted_compress : <span class=\"number\">1</span>; <span class=\"comment\">/* node can't compress; too small */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> extra : <span class=\"number\">10</span>; <span class=\"comment\">/* more bits to steal for future usage */</span></span><br><span class=\"line\">&#125; quicklistNode;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"quicklist特性\"><a href=\"#quicklist特性\" class=\"headerlink\" title=\"quicklist特性\"></a>quicklist特性</h2><p>quicklist本身是一个双向无环链表，它的每一个节点都是一个ziplist。为什么这么设计呢？</p>\n<ul>\n<li>双向链表在插入节点上复杂度很低，但它的内存开销很大，每个节点的地址不连续，容易产生内存碎片。</li>\n<li>ziplist是存储在一段连续的内存上，存储效率高，但是它不利于修改操作，插入和删除数都很麻烦，复杂度高，而且其需要频繁的申请释放内存，特别是ziplist中数据较多的情况下，搬移内存数据太费时！</li>\n</ul>\n<p>可以这么理解</p>\n<p>一个quicklist内部包含有多个ziplist, 每个ziplist里面又可以包含多个数据节点,</p>\n<p>例如: [1,2,3,4,5,6,7,8,9]</p>\n<p>上面这个链表的存储如果用quicklist来存储就可以分为3个ziplist</p>\n<p>每个ziplist又有3个数据节点,[[1,2,3],[4,5,6],[7,8,9]]</p>\n<p>主要目的还是为了在时间和空间上面取得一个平衡,至于每个ziplist分多大可以自定义配置</p>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><h2 id=\"数据结构-3\"><a href=\"#数据结构-3\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dict</span> &#123;</span></span><br><span class=\"line\">    dictType *type;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *privdata;</span><br><span class=\"line\">    dictht ht[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> rehashidx; <span class=\"comment\">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> iterators; <span class=\"comment\">/* number of iterators currently running */</span></span><br><span class=\"line\">&#125; dict;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This is our hash table structure. Every dictionary has two of this as we</span></span><br><span class=\"line\"><span class=\"comment\"> * implement incremental rehashing, for the old to the new table. */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictht</span> &#123;</span></span><br><span class=\"line\">    dictEntry **table;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used;</span><br><span class=\"line\">&#125; dictht;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *val;</span><br><span class=\"line\">        <span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">        <span class=\"keyword\">int64_t</span> s64;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> d;</span><br><span class=\"line\">    &#125; v;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; dictEntry;</span><br></pre></td></tr></table></figure>\n\n<p>hash 使用json格式表示大概如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    dict: &#123;</span><br><span class=\"line\">        type: hash,</span><br><span class=\"line\">        privadata: null,</span><br><span class=\"line\">        ht: [&#123;</span><br><span class=\"line\">                size: <span class=\"number\">100</span>,</span><br><span class=\"line\">                used: <span class=\"number\">80</span>,</span><br><span class=\"line\">                sizemask: <span class=\"string\">\"0xff778\"</span>,</span><br><span class=\"line\">                hash: &#123;</span><br><span class=\"line\">                    key: <span class=\"string\">\"test1\"</span>,</span><br><span class=\"line\">                    value: <span class=\"number\">22</span>,</span><br><span class=\"line\">                    next: <span class=\"number\">34</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;&#125;  <span class=\"comment\">// rehash时候使用</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        rehashidx: <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字典是数据库的底层实现</p>\n<p>整体数据结构由dict持有2个dictht，</p>\n<p>其中一个dictht[1]在rehash时候使用，dictht[0]中用来存储数据</p>\n<p>持有一个dictEntry组成的数组，每个dictEntry保存一个键值对</p>\n<h2 id=\"hash过程\"><a href=\"#hash过程\" class=\"headerlink\" title=\"hash过程\"></a>hash过程</h2><p>采用hash函数对键进行哈希配合dictht的sizemask计算出来索引值</p>\n<pre><code>index = hash(key) &amp; sizemask</code></pre><p>然后将键值对存入哈希表节点</p>\n<blockquote>\n<p>ps: 这个过程跟redis中计算键所对应的slot的方法相似</p>\n</blockquote>\n<h2 id=\"解决键冲突\"><a href=\"#解决键冲突\" class=\"headerlink\" title=\"解决键冲突\"></a>解决键冲突</h2><p>redis使用链地址法(separate chaining)</p>\n<p>来解决键冲突,当两个键的index值相同时,会把第二个键放到第一个键的前面,查询时对这个index的哈希节点链表进行遍历</p>\n<h2 id=\"渐进式的rehash\"><a href=\"#渐进式的rehash\" class=\"headerlink\" title=\"渐进式的rehash\"></a>渐进式的rehash</h2><p>当哈希表的负载因子(load factor)大于设定值时(平时为1,在BGREWRITEAOF时为5),哈希表会进行rehash操作</p>\n<p>rehash采用渐进式的方式进行执行,具体流程</p>\n<p><strong>把ht[0]里面的数据重新进行哈希计算放到ht[1],此时的哈希查询操作两个表同时提供服务,写入操作则只有ht[1]提供,这样ht[0]处于只减不增的状态,最终当ht[0]里面的所有数据都被转移到ht[1]时,rehashidx被设为-1,表明rehash结束,删除ht[0],并将ht[1]设为ht[0],同时重新分配新的ht[1]</strong></p>\n<blockquote>\n<p>ps:负载因子 = used /size;</p>\n</blockquote>\n<h1 id=\"跳跃表\"><a href=\"#跳跃表\" class=\"headerlink\" title=\"跳跃表\"></a>跳跃表</h1><h2 id=\"数据结构-4\"><a href=\"#数据结构-4\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跳跃表</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplist</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">header</span>,*<span class=\"title\">tail</span>;</span><span class=\"comment\">//头结点和尾节点</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> length;<span class=\"comment\">//表中节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> level;<span class=\"comment\">//表中除头节点外层数最大的节点</span></span><br><span class=\"line\">&#125; zskiplist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//跳跃表节点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//层</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplevel</span>&#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">forward</span>;</span><span class=\"comment\">//前进指针</span></span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> span;<span class=\"comment\">//跨度</span></span><br><span class=\"line\">    &#125; level[];</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zskiplistNode</span> *<span class=\"title\">backword</span>;</span><span class=\"comment\">//后退指针</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> score;<span class=\"comment\">//分值</span></span><br><span class=\"line\">    robj *obj;</span><br><span class=\"line\">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure>\n<p>跳跃表json形式:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    zskiplist: &#123;</span><br><span class=\"line\">        header: &#123;</span><br><span class=\"line\">            obj: <span class=\"string\">\"aa\"</span>,</span><br><span class=\"line\">            score: <span class=\"number\">45</span>,</span><br><span class=\"line\">            backforward: null,</span><br><span class=\"line\">            zskiplevel: [&#123;</span><br><span class=\"line\">                forward: null,</span><br><span class=\"line\">                span: <span class=\"number\">9</span></span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                forward: *p,</span><br><span class=\"line\">                span: <span class=\"number\">8</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        tail: &#123;</span><br><span class=\"line\">            obj: <span class=\"string\">\"aa\"</span>,</span><br><span class=\"line\">            score: <span class=\"number\">45</span>,</span><br><span class=\"line\">            backforward: null,</span><br><span class=\"line\">            zskiplevel: [&#123;</span><br><span class=\"line\">                forward: null,</span><br><span class=\"line\">                span: <span class=\"number\">9</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        length: <span class=\"number\">100</span>,</span><br><span class=\"line\">        level: <span class=\"number\">32</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>跳跃表图示:</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/K4POMmsa7duy3Nf.jpg\" alt=\"IMG_0256.jpeg\"></p>\n<p>跳跃表是有序集合的底层实现之一</p>\n<p>跳跃表中的头结点不计算在length长度之内,跳跃表的节点排序按照分值从小到大排序</p>\n<p>每次创建新节点的时候,redis会根据幂次定律随机生成一个1-32的层数作为level数组的大小</p>\n<p>每个节点都有指向表尾方向的前进指针和之前表头方向的后退指针</p>\n<p>这两个指针可以让程序方便的遍历所有节点,层的跨度用于记录两点之间的距离</p>\n<p>跨度可以用来计算rank值.节点的分值是一个double值</p>\n<p>节点的对象是一个指针,指向一个保存着sds字符串的字符串对象(下一节讲redis对象)</p>\n<p>跳跃表通过每个<code>zskiplistNode</code>来保存每个元素的信息，元素的键就是obj的指针指向的对象，对应的分值就是score字段</p>\n<h1 id=\"整数集合\"><a href=\"#整数集合\" class=\"headerlink\" title=\"整数集合\"></a>整数集合</h1><h2 id=\"数据结构-5\"><a href=\"#数据结构-5\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">intset</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> encoding;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int8_t</span> contents[];</span><br><span class=\"line\">&#125; intset;</span><br></pre></td></tr></table></figure>\n\n<p>顾名思义整数集合是用来保存整数值的抽象数据结构</p>\n<p>集合中不会出现重复元素</p>\n<p>contents数组中保存的整数值有小到大排列</p>\n<p>length等于contents的长度</p>\n<p>虽然contents的定义是int8_t 但实际上contents的值类型由encoding决定</p>\n<h2 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h2><p>当一个新元素超过原来整数集合encoding定义的值的类型时,会进行升级</p>\n<p>升级结果会使集合的encoding变成所有数组中元素的值最大的数据类型,并且不支持降级</p>\n<p>例如:有一个整数集合[1,2,3],本身的编码为<code>int8</code>,现在增加一个300的数字进该集合</p>\n<p>会导致集合的编码升级为<code>int16</code>,这个时候列表的大小由8x3=24 变为 16x4=64</p>\n<p>即便<code>int8</code>可以存储前三个值,但是为了简单起见,仍然会为集合中每一个元素分配同样的空间</p>\n<h1 id=\"压缩列表-Ziplist\"><a href=\"#压缩列表-Ziplist\" class=\"headerlink\" title=\"压缩列表(Ziplist)\"></a>压缩列表(Ziplist)</h1><p>压缩列表被用作列表键和哈希键的底层实现</p>\n<p>压缩列表属于特殊的结构,是一种数据存储的方式,目的是为了节约内存,是一种采用特殊编码的连续内存块组成的顺序型(sequential)数据结构.</p>\n<p>大致结构如下:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">zlbytes</th>\n<th align=\"left\">zltail</th>\n<th align=\"left\">zllen</th>\n<th align=\"left\">entry1</th>\n<th align=\"left\">entry2</th>\n<th align=\"left\">…</th>\n<th align=\"left\">zlend</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">总长度</td>\n<td align=\"left\">偏移量</td>\n<td align=\"left\">节点数量</td>\n<td align=\"left\">节点1</td>\n<td align=\"left\">节点2</td>\n<td align=\"left\">…</td>\n<td align=\"left\">结束</td>\n</tr>\n</tbody></table>\n<p>每个压缩列表节点由如下三部分组成</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">previous_entry_length</th>\n<th align=\"left\">encoding</th>\n<th align=\"left\">content</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">前一节点的长度</td>\n<td align=\"left\">记录content的类型和长度</td>\n<td align=\"left\">节点的值</td>\n</tr>\n</tbody></table>\n<p>一个ziplist示例:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    zlbytes:<span class=\"string\">\"0x50\"</span>,</span><br><span class=\"line\">    zltail:<span class=\"string\">\"0x3c\"</span>,</span><br><span class=\"line\">    zllen:<span class=\"string\">\"0x3\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        previous_entry_length:<span class=\"string\">\"0x05\"</span>,</span><br><span class=\"line\">        encoding:<span class=\"string\">\"00001011\"</span>,</span><br><span class=\"line\">        content:<span class=\"string\">\"hello word\"</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        previous_entry_length:<span class=\"string\">\"0xF\"</span>,</span><br><span class=\"line\">        encoding:<span class=\"string\">\"11000000\"</span>,</span><br><span class=\"line\">        content:<span class=\"string\">\"10086\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    zlend:<span class=\"string\">\"0xff\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果前一个节点长度小于254字节,previous_entry_length会使用1字节空间保存这个长度,<br>如果大于254字节,将使用5字节长度保存这个值,这个机制会引起”连锁更新”</p>\n<h2 id=\"ziplist连锁更新的问题\"><a href=\"#ziplist连锁更新的问题\" class=\"headerlink\" title=\"ziplist连锁更新的问题\"></a>ziplist连锁更新的问题</h2><p>假设现有连续的三个压缩列表节点l1,l2,l3,长度分别为 253,253,253</p>\n<p>现在往第一个节点前添加一个长度超过254的节点,这个时候l1要给previous_entry_length分配5个字节来存储长度,所以列表本身长度会变为257,这将导致l2也需要5字节存储l1的长度,l3也会产生同样的变化,这样由一个列表操作引起的一系列更新操作成为连锁更新</p>\n<p>连锁更新的发生有可能会严重影响性能，所以要尽量避免</p>\n","categories":["编程工具"],"tags":["redis","数据结构"]},{"title":"redis中的数据对象","url":"/2017-01-11-redis-object/","content":"<h1 id=\"redis对象\"><a href=\"#redis对象\" class=\"headerlink\" title=\"redis对象\"></a>redis对象</h1><p>redis中有五种常用对象</p>\n<p>我们所说的对象的类型大多是值的类型,键的类型大多是字符串对象,值得类型大概有以下几种,但是无论哪种都是基于redisObject实现的</p>\n<a id=\"more\"></a>\n<p>redisObject的结构如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisObject</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> type:<span class=\"number\">4</span>; <span class=\"comment\">//类型 有五种,分别对应五种常见的值类型</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> encoding:<span class=\"number\">4</span>; <span class=\"comment\">// 编码,标明底层数据结构的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> lru:LRU_BITS; <span class=\"comment\">/* LRU time (relative to global lru_clock) or</span></span><br><span class=\"line\"><span class=\"comment\">                            * LFU data (least significant 8 bits frequency</span></span><br><span class=\"line\"><span class=\"comment\">                            * and most significant 16 bits decreas time). */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> refcount; <span class=\"comment\">//  引用计数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *ptr;    <span class=\"comment\">//  存储结构指针</span></span><br><span class=\"line\">&#125; robj;</span><br></pre></td></tr></table></figure>\n\n<p>type的可选值有五种.分别是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">REDIS_STRING,</span><br><span class=\"line\">REDIS_LIST,</span><br><span class=\"line\">REDIS_SET,</span><br><span class=\"line\">REDIS_ZSET ,</span><br><span class=\"line\">REDIS_HASH</span><br></pre></td></tr></table></figure>\n\n<p>encoding的可选值有八种(redis3.2版本新加入了quicklist)</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">REDIS_ENCODING_INT</th>\n<th align=\"left\">long型的整数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">REDIS_ENCODING_EMBSTR</td>\n<td align=\"left\">embstr编码的简单动态字符串</td>\n</tr>\n<tr>\n<td align=\"left\">REDIS_ENCODING_ROW</td>\n<td align=\"left\">简单动态字符串</td>\n</tr>\n<tr>\n<td align=\"left\">REDIS_ENCODING_LINKEDLIST</td>\n<td align=\"left\">双端链表</td>\n</tr>\n<tr>\n<td align=\"left\">OBJ_ENCODING_QUICKLIST</td>\n<td align=\"left\">快速链表</td>\n</tr>\n<tr>\n<td align=\"left\">REDIS_ENCODING_HH</td>\n<td align=\"left\">字典</td>\n</tr>\n<tr>\n<td align=\"left\">REDIS_ENCODING_ZIPLIST</td>\n<td align=\"left\">压缩列表</td>\n</tr>\n<tr>\n<td align=\"left\">REDIS_ENCODING_INTSET</td>\n<td align=\"left\">整数集合</td>\n</tr>\n<tr>\n<td align=\"left\">REDIS_ENCODING_SKIPLIST</td>\n<td align=\"left\">跳跃表</td>\n</tr>\n</tbody></table>\n<p>新的redis3.2以后的源码中更改了底层的数据结构,新的的定义如下,在<code>server.h</code>文件中有定义</p>\n<p>其中linkedlist是旧的list的底层实现,现已被quicklist代替</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Objects encoding. Some kind of objects like Strings and Hashes can be</span></span><br><span class=\"line\"><span class=\"comment\"> * internally represented in multiple ways. The 'encoding' field of the object</span></span><br><span class=\"line\"><span class=\"comment\"> * is set to one of this fields for this object. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_RAW 0     <span class=\"comment\">/* Raw representation */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_INT 1     <span class=\"comment\">/* Encoded as integer */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_HT 2      <span class=\"comment\">/* Encoded as hash table */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_ZIPMAP 3  <span class=\"comment\">/* Encoded as zipmap */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_LINKEDLIST 4 <span class=\"comment\">/* No longer used: old list encoding. */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_ZIPLIST 5 <span class=\"comment\">/* Encoded as ziplist */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_INTSET 6  <span class=\"comment\">/* Encoded as intset */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_SKIPLIST 7  <span class=\"comment\">/* Encoded as skiplist */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_EMBSTR 8  <span class=\"comment\">/* Embedded sds string encoding */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OBJ_ENCODING_QUICKLIST 9 <span class=\"comment\">/* Encoded as linked list of ziplists */</span></span></span><br></pre></td></tr></table></figure>\n\n<p>type和encoding共同决定了数值对象的底层结构和存储</p>\n<h2 id=\"字符串对象\"><a href=\"#字符串对象\" class=\"headerlink\" title=\"字符串对象\"></a>字符串对象</h2><p>字符串对象的编码可以是int,embstr和row</p>\n<p>redis中的字符串对象是最常用的数据对象之一,redis中的许多键都是采用的字符串对象</p>\n<p>字符串类型在redis中根据情况不同有3中情况</p>\n<ol>\n<li>对于元素都是纯数字类型的, 例如,’1’,’2’这种会使用int类型存储,redis默认初始化了10000个数字对象</li>\n<li>对于长度小于32的字符串类型,例如’hello’,redis会使用embstr类型存储数据</li>\n<li>对于长度超过32的使用row存储原字符</li>\n</ol>\n<blockquote>\n<p>ps: embstr类型的字符串在修改后总会变成row编码类型(redis3.2之后该机制已失效)</p>\n</blockquote>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"redis3-2之前\"><a href=\"#redis3-2之前\" class=\"headerlink\" title=\"redis3.2之前\"></a>redis3.2之前</h3><p>在redis3.2之前, 列表的编码可以是linkedlist或者ziplist</p>\n<ol>\n<li>当列表对象保存的所有字符串长度小于64字节</li>\n<li>当列表对象保存的元素数量小于512个的时候</li>\n</ol>\n<p>这个时候会使用,ziplist来作为列表对象的编码, 当不满足这两个条件的时候使用linkedlist</p>\n<blockquote>\n<p>ps:这两个值是更改的,list-max-ziplist-value 和 list-max-ziplist-entries</p>\n</blockquote>\n<h3 id=\"redis3-2之后\"><a href=\"#redis3-2之后\" class=\"headerlink\" title=\"redis3.2之后\"></a>redis3.2之后</h3><p>列表的实现在3.2之后改为quicklist实现</p>\n<p>quicklist可以看做一个类似链表的结构, 但是每个节点都是一个ziplist,所以每个ziplist内部可以包含多个数据</p>\n<blockquote>\n<p>ps: 理念上有点类似于Java中的concurrenthashmap</p>\n</blockquote>\n<h2 id=\"哈希对象\"><a href=\"#哈希对象\" class=\"headerlink\" title=\"哈希对象\"></a>哈希对象</h2><p>哈希对象的编码可以是ziplist或者hashtable</p>\n<p>字典的每一个键和值都是一个字符串对象</p>\n<ol>\n<li>哈希对象保存的所有键和值的长度都小于64字节</li>\n<li>哈希对象保存的键值对数量小于512个的时候</li>\n</ol>\n<p>满足以上两个条件,使用ziplist存储,否则采用hashtable存储</p>\n<blockquote>\n<p>ps:这两个值是更改的,hash-max-ziplist-value 和 hash-max-ziplist-entries</p>\n</blockquote>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p>集合对象的编码可以是intset或者hashtable</p>\n<p>当集合对象满足以下两个条件的时候采用intset</p>\n<ol>\n<li>集合对象保存的元素都是整数</li>\n<li>集合对象保存的元素数量不超过512个</li>\n</ol>\n<p>不满足以上两个条件都是用hashtable存储</p>\n<blockquote>\n<p>ps: 该数值可以使用set-max-intset-entries设置</p>\n</blockquote>\n<h2 id=\"有序集合\"><a href=\"#有序集合\" class=\"headerlink\" title=\"有序集合\"></a>有序集合</h2><p>有序集合对象的编码可以是ziplist或者skiplist</p>\n<p>有序集合对象跟前面的几个对象不大一样</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zset</span>&#123;</span></span><br><span class=\"line\">    zskiplist *zsl;</span><br><span class=\"line\">    dict *dict;</span><br><span class=\"line\">&#125; zset;</span><br></pre></td></tr></table></figure>\n<p>zsl中保存一个跳跃表,表节点的对象即是键,score即是分值,该结构主要为 zrange,zrank等函数服务同时还保存一个dict,dict中也保存有键和对应的分值,获取某键的函数zscore使用这个结构,同时持有字典和跳跃表是为了性能考虑，当有序集合满足一下两个条件时候,使用ziplist编码</p>\n<ol>\n<li>有序集合元素数量小于128</li>\n<li>有序集合元素长度小于64</li>\n</ol>\n<p>不能满足以上两个条件的使用skiplist</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>数据对象的实现之所以有这种情况,其实是适应2个不同场景, 节省内存和常规场景,具体表格如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">对象</th>\n<th align=\"left\">省内存</th>\n<th align=\"left\">常规</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">str</td>\n<td align=\"left\">int/embstr</td>\n<td align=\"left\">row</td>\n</tr>\n<tr>\n<td align=\"left\">list</td>\n<td align=\"left\">ziplist</td>\n<td align=\"left\">linkedlist(quicklist)</td>\n</tr>\n<tr>\n<td align=\"left\">hash</td>\n<td align=\"left\">ziplist</td>\n<td align=\"left\">hashtable</td>\n</tr>\n<tr>\n<td align=\"left\">set</td>\n<td align=\"left\">intset</td>\n<td align=\"left\">hashtable</td>\n</tr>\n<tr>\n<td align=\"left\">zset</td>\n<td align=\"left\">ziplist</td>\n<td align=\"left\">skiplist</td>\n</tr>\n</tbody></table>\n<h2 id=\"回收\"><a href=\"#回收\" class=\"headerlink\" title=\"回收\"></a>回收</h2><p>redis的对象资源垃圾回收是基于引用计数</p>\n<p>当一个对象被使用一次,引用计数增加1，当一个引用被销毁,对象的引用计数会减1，当一个对象的引用计数为0,会被销毁。</p>\n<h2 id=\"对象共享\"><a href=\"#对象共享\" class=\"headerlink\" title=\"对象共享\"></a>对象共享</h2><p>redis默认创建了0到9999的数字对象1万个，其他用到这些对象的时候可以不用创建新对象,直接使用已有的对象</p>\n","categories":["编程工具"],"tags":["redis","NoSQL"]},{"title":"redis的持久化","url":"/2017-01-29-redis-persistence/","content":"<h1 id=\"redis的AOF和RDB持久化\"><a href=\"#redis的AOF和RDB持久化\" class=\"headerlink\" title=\"redis的AOF和RDB持久化\"></a>redis的AOF和RDB持久化</h1><p>Redis支持两种持久化方式, 一种是快照形式, 一种是重放命令日志的形式</p>\n<h2 id=\"RDB持久化\"><a href=\"#RDB持久化\" class=\"headerlink\" title=\"RDB持久化\"></a>RDB持久化</h2><p>特点: RDB持久化是对当前数据库的状态进行备份,备份的对象是当前数据库的数据状态</p>\n<p>例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"zhangsan\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的数据会被被分为某种格式的信息,进行数据恢复的时候是直接读入RDB文件解析数据</p>\n<p>拥有持久化的能力使得redis在服务重启时能保留大部分的内存数据</p>\n<p>RDB文件在redis主从同步时候会被发送给从节点,从节点使用RDB进行全量的数据恢复</p>\n<h3 id=\"主动触发保存\"><a href=\"#主动触发保存\" class=\"headerlink\" title=\"主动触发保存\"></a>主动触发保存</h3><ol>\n<li><p>使用 <code>save</code> 命令可以手动对redis进行保存, 该命令会阻塞redis主进程</p>\n</li>\n<li><p>使用<code>bgsave</code>会在后台创建子线程来进行存储, 此时要求redis节点有1倍以上的空闲内存 </p>\n</li>\n</ol>\n<p>比如:  机器内存有32G, 此时Redis里面数据20G, 使用 <code>bgsave</code> 就不可以,必须保证空闲内存大于20G才能使用</p>\n<h2 id=\"AOF持久化\"><a href=\"#AOF持久化\" class=\"headerlink\" title=\"AOF持久化\"></a>AOF持久化</h2><p>特点: 对写命令进行备份,一般是再有写命令的时候吧命令追加到AOF文件中,客户端每进行一次操作,服务器吧命令写入AOF文件,数据恢复就是从AOF文件中读取命令并执行</p>\n<p>但是会出现这么一种情况(ABA):</p>\n<p>对某个命令的写命令太多的话,有可能会出现这种情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">set</span> a 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">set</span> a 18 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">set</span> a 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">set</span> a 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">set</span> a 10</span></span><br></pre></td></tr></table></figure>\n\n<p>这种情况下a的值实际最终还是10,不过因为aof对所有操作的命令都会记录,导致大量的命令对数据最终的状态来说其实都是”无效”的</p>\n<p>这种情况还会引起效率问题,为了减小AOF文件的大小,这个时候需要对AOF进行重写</p>\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><p>为了应对命令有冗余,提高数据备份效率,会对数据库进行AOF重写,重写是通过对当前的数据库数据进行读取并进行反向的命令解析来进行的</p>\n<p>某种意义上来讲AOF重写和RDB有部分类似,都是针对当前数据库状态进行的备份</p>\n<p>只不过aof会把所有数据反向解析成操作命令保存起来</p>\n<p>AOF重写可以使用命令 <code>BGREWRITEAOF</code></p>\n<h3 id=\"AOF保存的格式\"><a href=\"#AOF保存的格式\" class=\"headerlink\" title=\"AOF保存的格式\"></a>AOF保存的格式</h3><p>redis的命令会被以RESP(redis的客户端通信协议)的格式保存到 *.aof的文件中</p>\n","categories":["编程工具"],"tags":["RDB","AOF"]},{"title":"软件分享(Mac OS)","url":"/2017-01-24-my-software/","content":"<h1 id=\"常用软件分享\"><a href=\"#常用软件分享\" class=\"headerlink\" title=\"常用软件分享\"></a>常用软件分享</h1><p>仅仅列举了常用的完整APP程序,终端服务应用不在此列</p>\n<a id=\"more\"></a>\n\n<h2 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h2><table>\n<thead>\n<tr>\n<th align=\"center\">软件名</th>\n<th align=\"center\">功能描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">QQ</td>\n<td align=\"center\">聊天,交流</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">微信</td>\n<td align=\"center\">聊天</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Chrome</td>\n<td align=\"center\">浏览器</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Firefox</td>\n<td align=\"center\">浏览器</td>\n<td align=\"left\">启用新的引擎之后也还不错</td>\n</tr>\n<tr>\n<td align=\"center\">有道云笔记</td>\n<td align=\"center\">云笔记</td>\n<td align=\"left\">配合本地md使用</td>\n</tr>\n<tr>\n<td align=\"center\">网易云音乐</td>\n<td align=\"center\">音乐客户端</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">虾米音乐</td>\n<td align=\"center\">音乐</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">QQ音乐</td>\n<td align=\"center\">音乐</td>\n<td align=\"left\">版权比较多</td>\n</tr>\n<tr>\n<td align=\"center\">爱奇艺</td>\n<td align=\"center\">视频</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">优酷</td>\n<td align=\"center\">视频</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">腾讯视频</td>\n<td align=\"center\">视频客户端</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Maipo</td>\n<td align=\"center\">微博客户端</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">欧陆词典</td>\n<td align=\"center\">词典</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">有道词典</td>\n<td align=\"center\">另一个英文词典工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Grammarly</td>\n<td align=\"center\">英文语法检测工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Spark</td>\n<td align=\"center\">邮件客户端</td>\n<td align=\"left\">在我的电脑上退出时候老有bug所以暂时不用了</td>\n</tr>\n<tr>\n<td align=\"center\">IINA</td>\n<td align=\"center\">基于MPV的视频播放器,但是更加好用</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">vox</td>\n<td align=\"center\">本地音乐播放</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">lastPass</td>\n<td align=\"center\">密码管理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">企业微信</td>\n<td align=\"center\">通信工具</td>\n<td align=\"left\">工作沟通利器</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>ps: firefox现在感觉有些不如chrome了</p>\n</blockquote>\n<h2 id=\"苹果家\"><a href=\"#苹果家\" class=\"headerlink\" title=\"苹果家\"></a>苹果家</h2><table>\n<thead>\n<tr>\n<th align=\"center\">mail</th>\n<th align=\"center\">邮件客户端</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ibooks</td>\n<td align=\"center\">pdf阅读器</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">QuickTime</td>\n<td align=\"center\">视频播放,视频音频录制</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">GarageBand</td>\n<td align=\"center\">谱曲,作曲</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">iMovie</td>\n<td align=\"center\">视频制作</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Grapher</td>\n<td align=\"center\">函数绘图</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">page/number/keynote</td>\n<td align=\"center\">apple办公三件套</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">automator</td>\n<td align=\"center\">自动化工具,可以做工作流</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">iturns</td>\n<td align=\"center\">不得不用的管理工具,但是并不好用</td>\n<td align=\"left\">现在不怎么用了</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>ps:mail有时会出现高CPU占用的情况,所以不经常用了</p>\n</blockquote>\n<h2 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h2><table>\n<thead>\n<tr>\n<th align=\"center\">SmartCoverter</th>\n<th align=\"center\">视频,音频格式转换</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">迅雷</td>\n<td align=\"center\">下载工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">motrix</td>\n<td align=\"center\">下载工具</td>\n<td align=\"left\">替代迅雷比较好</td>\n</tr>\n<tr>\n<td align=\"center\">百度网盘</td>\n<td align=\"center\">文件中转</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">MPV</td>\n<td align=\"center\">全能视频播放器</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">lantern</td>\n<td align=\"center\">科学上网</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">shadowsocksx-ng</td>\n<td align=\"center\">科学上网</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Github Desktop</td>\n<td align=\"center\">github官方GUI</td>\n<td align=\"left\">感觉官方的很好用,之前用过sourcetree</td>\n</tr>\n<tr>\n<td align=\"center\">Cornerstone</td>\n<td align=\"center\">SVN管理工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">SwitchHosts!</td>\n<td align=\"center\">Host管理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">DaisyDisk</td>\n<td align=\"center\">磁盘清理和管理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">CleanMyMac</td>\n<td align=\"center\">软件管理,垃圾清理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Sip</td>\n<td align=\"center\">屏幕取色</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Cerebro</td>\n<td align=\"center\">效率工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Alfred</td>\n<td align=\"center\">效率工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">MindNode</td>\n<td align=\"center\">思维导图工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">xmind-zen</td>\n<td align=\"center\">轻量级的思维导图</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">iStat Menus 6</td>\n<td align=\"center\">系统监控工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">马克飞象</td>\n<td align=\"center\">MarkDown工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Typora</td>\n<td align=\"center\">Markdown工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">iMazing</td>\n<td align=\"center\">比iTunes好用的iOS设备管理工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">iTerm2</td>\n<td align=\"center\">强大的终端工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Spectacle</td>\n<td align=\"center\">窗口管理工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Transmit</td>\n<td align=\"center\">FTP服务器管理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">zeplin</td>\n<td align=\"center\">看产品设计图</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">sketch</td>\n<td align=\"center\">设计产品</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">numi</td>\n<td align=\"center\">超级好用的编程计算器,实际上就是个编程工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">rightfont</td>\n<td align=\"center\">字体管理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Polarr Photo</td>\n<td align=\"center\">图片处理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Photolemur</td>\n<td align=\"center\">智能的图片处理</td>\n<td align=\"left\">自动处理的效果很不错</td>\n</tr>\n<tr>\n<td align=\"center\">Paste</td>\n<td align=\"center\">多剪贴板管理</td>\n<td align=\"left\">非常好用</td>\n</tr>\n<tr>\n<td align=\"center\">keka</td>\n<td align=\"center\">压缩/解压缩工具</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"开发专用\"><a href=\"#开发专用\" class=\"headerlink\" title=\"开发专用\"></a>开发专用</h2><table>\n<thead>\n<tr>\n<th align=\"center\">sublime text3</th>\n<th align=\"center\">轻便的编辑器</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Atom</td>\n<td align=\"center\">备胎编辑器,性能有点问题,其他不错</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Visual Studio Code</td>\n<td align=\"center\">微软出品的编辑器,感觉比atom要好点</td>\n<td align=\"left\">性能很好,但是权限好像有问题</td>\n</tr>\n<tr>\n<td align=\"center\">Xcode</td>\n<td align=\"center\">ios,mac os开发IDE</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">unity</td>\n<td align=\"center\">游戏开发引擎</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">robo-3t</td>\n<td align=\"center\">mongodb数据库管理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">MongoDB compass</td>\n<td align=\"center\">mongodb官方的GUI管理工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Sequel Pro</td>\n<td align=\"center\">MySQL数据库管理</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Charles</td>\n<td align=\"center\">抓包工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Surge</td>\n<td align=\"center\">调试工具</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Dash</td>\n<td align=\"center\">开发文档集合</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Medis</td>\n<td align=\"center\">GUI的redis查看工具</td>\n<td align=\"left\">简直第一好用的redis的GUI客户端</td>\n</tr>\n<tr>\n<td align=\"center\">Postman</td>\n<td align=\"center\">API测试</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Kafka Tool</td>\n<td align=\"center\">kafka管理客户端</td>\n<td align=\"left\">能查看的信息比较详细,应该是通过读zk里面的节点信息</td>\n</tr>\n</tbody></table>\n<h2 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h2><table>\n<thead>\n<tr>\n<th align=\"center\">Civilization VI</th>\n<th align=\"center\">(文明6)一款策略游戏</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Beholder</td>\n<td align=\"center\">经营策略游戏,剧情黑暗</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">MiniMetro</td>\n<td align=\"center\">益智小游戏</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Battle.net</td>\n<td align=\"center\">暴雪全家桶</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">机械迷城</td>\n<td align=\"center\">益智解谜游戏</td>\n<td align=\"left\">额,老游戏了</td>\n</tr>\n</tbody></table>\n","categories":["编程工具"],"tags":["软件分享"]},{"title":"几种分布式唯一ID的生成方式","url":"/2017-01-17-distribute-unique-id/","content":"<h1 id=\"分布式唯一ID\"><a href=\"#分布式唯一ID\" class=\"headerlink\" title=\"分布式唯一ID\"></a>分布式唯一ID</h1><p>我们在工作中经常需要用到唯一id 来对信息和记录进行唯一性标识</p>\n<p>因为许多数据库的特性, 我们对唯一id还有一个趋势增长的要求</p>\n<p>所以核心要点就两个</p>\n<ol>\n<li>全局唯一</li>\n<li>趋势有序</li>\n</ol>\n<p>下面介绍几种常用的方法</p>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><p>最常见的方式。利用数据库创建一张表，全数据库唯一。</p>\n<p>优点：</p>\n<ol>\n<li>简单，代码方便，性能可以接受。</li>\n<li>数字ID天然排序，对分页或者需要排序的结果很有帮助。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</li>\n<li>在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</li>\n<li>在性能达不到要求的情况下，比较难于扩展。</li>\n<li>如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</li>\n<li>分表分库的时候会有麻烦。</li>\n</ol>\n<p>优化方案：</p>\n<p>针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。</p>\n<p>比如：</p>\n<p>Master1生成的是  1,4,7,10<br>Master2生成的是  2,5,8,11<br>Master3生成的是  3,6,9,12</p>\n<p>这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。</p>\n<h1 id=\"使用redis\"><a href=\"#使用redis\" class=\"headerlink\" title=\"使用redis\"></a>使用redis</h1><p>当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用redis来生成ID。</p>\n<p>这主要依赖于redis是单线程的，所以也可以用生成全局唯一的ID。可以用redis的原子操作 INCR和INCRBY来实现。</p>\n<p>可以使用redis集群来获取更高的吞吐量。假如一个集群中有5台redis。可以初始化每台redis的值分别是1,2,3,4,5，然后步长都是5。各个redis生成的ID为：</p>\n<p>A：1,6,11,16,21</p>\n<p>B：2,7,12,17,22</p>\n<p>C：3,8,13,18,23</p>\n<p>D：4,9,14,19,24</p>\n<p>E：5,10,15,20,25</p>\n<p>重点: 负载到哪个机器确定好，未来很难做修改。</p>\n<p>但是3-5台服务器基本能够满足器上，都可以获得不同的ID。但是步长和初始值一定需要事先需要了。使用redis集群也可以防止单点故障的问题。</p>\n<p>另外，比较适合使用redis来生成每天从0开始的流水号。</p>\n<p>比如订单号=日期+当日自增长号。可以每天在redis中生成一个Key，使用INCR进行累加。</p>\n<p>优点：</p>\n<ol>\n<li>不依赖于数据库，灵活方便，且性能优于数据库。</li>\n<li>数字ID天然排序，对分页或者需要排序的结果很有帮助。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>如果系统中没有redis，还需要引入新的组件，增加系统复杂度。</li>\n<li>需要编码和配置的工作量比较大。</li>\n</ol>\n<h1 id=\"twitter\"><a href=\"#twitter\" class=\"headerlink\" title=\"twitter\"></a>twitter</h1><p>twitter在把存储系统从MySQL迁移到Cassandra的过程中由于Cassandra没有顺序ID生成机制，于是自己开发了一套全局唯一ID生成服务:<code>Snowflake</code>。</p>\n<p>Snowflake使用二进制计数,讲一个完整的UUID分为不同部分,依据不同的规则生成</p>\n<ol>\n<li>41位的时间序列（精确到毫秒，41位的长度可以使用69年）</li>\n<li>10位的机器标识（10位的长度最多支持部署1024个节点）</li>\n<li>12位的计数顺序号（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号） 最高位是符号位，始终为0。</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2020/05/09/t15uSWF8PhCGpcs.png\" alt=\"snow-flak.png\"></p>\n<p>优点：</p>\n<ol>\n<li>高性能，低延迟；独立的应用;</li>\n<li>按时间有序。 </li>\n</ol>\n<p>缺点:</p>\n<ol>\n<li>需要独立的开发和部署。</li>\n<li>强依赖时钟,如果主机时间回拨,则会造成重复ID,会产生</li>\n<li>ID虽然有序,但是不连续</li>\n</ol>\n<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>MongoDB的ObjectId和snowflake算法类似。</p>\n<p>它设计成轻量型的，不同的机器都能用全局唯一的同种方法方便地生成它。</p>\n<p>MongoDB 从一开始就设计用来作为分布式数据库，处理多个节点是一个核心要求。</p>\n<p>使其在分片环境中要容易生成得多</p>\n<p>如果观察过mongodb的数据会发现,在短期内插入大量数据的话只有后面几位不一致</p>\n<p>但是如果你等几秒再插入数据,中间部分地方也会不一致</p>\n<p>ObjectId使用12字节的存储空间，其生成方式如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">0-1-2-3</th>\n<th align=\"left\">4-5-6</th>\n<th align=\"left\">7-8</th>\n<th align=\"left\">9-10-11</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">时间戳</td>\n<td align=\"left\">机器ID</td>\n<td align=\"left\">PID</td>\n<td align=\"left\">计数器</td>\n</tr>\n</tbody></table>\n<p>前四个字节时间戳是从标准纪元开始的时间戳，单位为秒，有如下特性：</p>\n<p> 1 时间戳与后边5个字节一块，保证秒级别的唯一性；<br> 2 保证插入顺序大致按时间排序；<br> 3 隐含了文档创建时间；<br> 4 时间戳的实际值并不重要，不需要对服务器之间的时间进行同步（因为加上机器ID和进程ID已保证此值唯一，唯一性是ObjectId的最终诉求）。</p>\n<p>机器ID是服务器主机标识，通常是机器主机名的散列值。</p>\n<p>同一台机器上可以运行多个mongod实例，因此也需要加入进程标识符PID。</p>\n<p>前9个字节保证了同一秒钟不同机器不同进程产生的ObjectId的唯一性。后三个字节是一个自动增加的计数器（一个mongod进程需要一个全局的计数器），保证同一秒的ObjectId是唯一的。同一秒钟最多允许每个进程拥有（256^3 = 16777216）个不同的ObjectId。</p>\n<p>如: “5a3fa45b421aa93195b92d67”</p>\n<p>优点: </p>\n<ol>\n<li>时间戳保证秒级唯一</li>\n<li>机器ID保证设计时考虑分布式</li>\n<li>避免时钟同步</li>\n<li>PID保证同一台服务器运行多个mongod实例时的唯一性</li>\n<li>最后的计数器保证同一秒内的唯一性（选用几个字节既要考虑存储的经济性，也要考虑并发性能的上限）。</li>\n<li>既可以在服务器端生成也可以在客户端生成，在客户端生成可以降低服务器端的压力。</li>\n</ol>\n<p>缺点:</p>\n<ol>\n<li>需要独立实现和部署</li>\n</ol>\n<h1 id=\"携程的方案\"><a href=\"#携程的方案\" class=\"headerlink\" title=\"携程的方案\"></a>携程的方案</h1><p>携程采用了另一种解决方案</p>\n<p>也是基于数据库</p>\n<p>先在数据库中创建一个表</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>server</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>192.168.8.1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>192.168.8.2</td>\n</tr>\n</tbody></table>\n<p>要获取id的时候先使用 replace into 更新自己服务器的记录, 然后在查询自己服务器的当前值</p>\n<blockquote>\n<p>ps: replace into 会先尝试insert into 如果已经存在会进行对当前记录删除,然后重新插入</p>\n</blockquote>\n<p>这样就能获取到每个服务器的最大的值了</p>\n<p>但是这样性能会损耗比较大</p>\n<p>所以携程做了id段缓存</p>\n<p>一次性生成 1000(这个数字可配置) 个id</p>\n<p>要获取当前id的时候会先去请求缓存检查当前要获取的数字是否在缓存段中,如果在就直接获取,不存在就重新触发id段的生成,然后获取id</p>\n<p>举例:</p>\n<p>192.168.8.1 第一次拿到的id是1,那他就会把号段 (1 * 1000,(1+1)*1000)(左闭右开区间)存入缓存, 该机器上面的客户获取id的时候就检查是否在这个范围之内, 如果刚好等于2000</p>\n<p>则去触发号段更新,此时号段id为3, 生成的对应号段为 (3*1000, (3+1) *1000)</p>\n<p>再执行号码分发的处理</p>\n<p>优点:</p>\n<ol>\n<li>数字类型, 使用方便</li>\n<li>生成简单</li>\n</ol>\n<p>缺点:</p>\n<ol>\n<li>需要单独实现</li>\n<li>当缓存服务器数据丢失的话,会造成id段浪费</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总体而言，分布式唯一ID需要满足以下条件：</p>\n<p>高可用性：不能有单点故障。</p>\n<p>全局唯一性：不能出现重复的ID号，既然是唯一标识，这是最基本的要求。</p>\n<p>趋势递增：在MySQL InnoDB引擎中使用的是聚集索引，由于多数RDBMS使用B-tree的数据结构来存储索引数据，在主键的选择上面我们应该尽量使用有序的主键保证写入性能。</p>\n<p>时间有序：以时间为序，或者ID里包含时间。这样一是可以少一个索引，二是冷热数据容易分离。</p>\n<p>分片支持：可以控制ShardingId。比如某一个用户的文章要放在同一个分片内，这样查询效率高，修改也容易。</p>\n<p>单调递增：保证下一个ID一定大于上一个ID，例如事务版本号、IM增量消息、排序等特殊需求。</p>\n<p>长度适中：不要太长，最好64bit。使用long比较好操作，如果是96bit，那就要各种移位相当的不方便，还有可能有些组件不能支持这么大的ID。</p>\n<p>信息安全：如果ID是连续的，恶意用户的扒取工作就非常容易做了，直接按照顺序下载指定URL即可；如果是订单号就更危险了，竞争对手可以直接知道我们一天的单量。所以在一些应用场景下，会需要ID无规则、不规则。</p>\n","categories":["系统设计"],"tags":["UUID"]},{"title":"消息通知系统的设计","url":"/2017-03-01-message-system/","content":"<h1 id=\"站内信通知系统的设计\"><a href=\"#站内信通知系统的设计\" class=\"headerlink\" title=\"站内信通知系统的设计\"></a>站内信通知系统的设计</h1><p>站内信系统是一个成熟的系统所应该具有的基本系统组件</p>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>站内信通知系统的核心目标是为系统提供一个 用户与用户,系统与用户交互的手段,属于网站信息传播的一个重要途径,如果详细考虑,该系统实在是一个非常庞大的系统设计,可以做的事情非常的多</p>\n<p>这里只是简单梳理一下普通消息系统需要做到的部分和功能设计,并提供一个可用的实际消息系统框架</p>\n<p>一个完成的消息通知系统大概可以分为两部分, 消息系统和通知系统</p>\n<p>消息系统主要负责消息的产生,接收等,通知系统则要实现事件机制,通知机制,对接各种消息通知平台(短信,微信,邮件等)</p>\n<p>消息通知系统的核心处理大概可以分为以下3个部分:</p>\n<ol>\n<li><p>消息产生</p>\n<pre><code>消息的产生:消息如何产生,来源和消息对象的结构</code></pre></li>\n<li><p>推送消息</p>\n<pre><code>消息的分发:消息如何到达用户,用户如何获取消息</code></pre></li>\n<li><p>处理消息</p>\n<pre><code>消息的处理:用户可以对消息所做的操作</code></pre></li>\n</ol>\n<p>同时还要在整个过程中随时持有消息的状态,这样才能最大化消息通知系统的功能</p>\n<p>一个成熟消息处理的流程大概如下图:</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/HhJdn5CA14lwLjc.png\" alt=\"flow1.png\"></p>\n<h2 id=\"消息产生\"><a href=\"#消息产生\" class=\"headerlink\" title=\"消息产生\"></a>消息产生</h2><p>消息系统的消息按类型大致可以分为私信类和通知类,其中私信类就是上文提到的消息部分,又可以分为管理员发送的和用户个人发送的</p>\n<p>私信类的消息大概情况如下:</p>\n<ol>\n<li>A给B发送了S内容,B给A回复了私信S2</li>\n<li>管理员(admin)给A/B发送了S内容(这一种也可以看做是公告)</li>\n</ol>\n<p>通知类,消息是由用户某些动作产生的提醒类的信息,具体情况大概如下(拿知乎举例子):</p>\n<ol>\n<li>A回答了问题W</li>\n<li>A在专栏Z中发布了文章P</li>\n<li>B评论了A在问题W下的回答H</li>\n<li>B赞了A在问题W下的回答H</li>\n<li>B赞了A在问题W中的回答H下的评论C</li>\n</ol>\n<blockquote>\n<p>ps:用户: A,B,C 专栏: Z 回答: H 问题: W 文章: P 消息: S 评论: C</p>\n</blockquote>\n<p>私信形式的实现起来比较容易,这里不多做表述,现在主要针对消息通知类型的进行方案分析</p>\n<h3 id=\"基于订阅模式的消息产生\"><a href=\"#基于订阅模式的消息产生\" class=\"headerlink\" title=\"基于订阅模式的消息产生\"></a>基于订阅模式的消息产生</h3><p>消息类的通知总结一下就是A对B的某操作进行了某操作,具体模式是:  </p>\n<pre><code>用户X 收到了 用户B 对 对象O 的 事件E 操作的通知</code></pre><p>这种模式很符合订阅模型,以下几种消息都可以用订阅关系表示</p>\n<ol>\n<li>B订阅了问题W的回答事件ER</li>\n<li>B订阅了专栏Z的发表事件EP</li>\n<li>B订阅了回答H的评论</li>\n<li>B订阅了回答H的点赞事件</li>\n<li>B订阅了评论C的点赞事件</li>\n</ol>\n<p>只要根据触发改消息的那条记录生成对应的消息即可</p>\n<h3 id=\"表结构设计\"><a href=\"#表结构设计\" class=\"headerlink\" title=\"表结构设计\"></a>表结构设计</h3><p>具体设计如下:</p>\n<blockquote>\n<p>ps:(这里模拟了几条记录,方便用来做演示)</p>\n</blockquote>\n<h4 id=\"订阅关系表\"><a href=\"#订阅关系表\" class=\"headerlink\" title=\"订阅关系表\"></a>订阅关系表</h4><p>用于记录用户的订阅信息</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>用户</th>\n<th>订阅对象id</th>\n<th>订阅对象类型</th>\n<th>订阅事件</th>\n<th>时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>B</td>\n<td>30</td>\n<td>post</td>\n<td>answer</td>\n<td>2017-01-01</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>1</td>\n<td>zhuanlan</td>\n<td>publish</td>\n<td>2016-01-01</td>\n</tr>\n<tr>\n<td>3</td>\n<td>B</td>\n<td>112</td>\n<td>answer</td>\n<td>common</td>\n<td>2016-01-01</td>\n</tr>\n<tr>\n<td>4</td>\n<td>B</td>\n<td>113</td>\n<td>answer</td>\n<td>up</td>\n<td>2018-01-01</td>\n</tr>\n<tr>\n<td>5</td>\n<td>B</td>\n<td>12</td>\n<td>comment</td>\n<td>up</td>\n<td>2018-01-01</td>\n</tr>\n</tbody></table>\n<p>当某对象产生某动作的时候,根据订阅关系表的订阅关系生成消息</p>\n<h4 id=\"订阅配置\"><a href=\"#订阅配置\" class=\"headerlink\" title=\"订阅配置\"></a>订阅配置</h4><p>用于为用户生成默认的订阅配置</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>动作</th>\n<th>订阅事件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>关注问题</td>\n<td>问题更新/问题回答</td>\n</tr>\n<tr>\n<td>2</td>\n<td>回答</td>\n<td>回答被评论/被点赞</td>\n</tr>\n</tbody></table>\n<p>这个表格记录了用户的某些操作会订阅怎样的对象动作,用于生成用户默认的订阅事件,后期如果开放权限,用户就可以对自己收到的提醒类型进行定制</p>\n<h4 id=\"消息内容表\"><a href=\"#消息内容表\" class=\"headerlink\" title=\"消息内容表\"></a>消息内容表</h4><p>消息内容表用来存储消息的具体内容,用户将来收到的信息就是该表中的信息</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">type</th>\n<th align=\"center\">content</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">notice</td>\n<td align=\"center\">用户C回答了问题W(id=30)</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">announce</td>\n<td align=\"center\">知乎形象刘看山发布了</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">notice</td>\n<td align=\"center\">B赞了你在问题W下面的R</td>\n</tr>\n</tbody></table>\n<h4 id=\"消息记录表\"><a href=\"#消息记录表\" class=\"headerlink\" title=\"消息记录表\"></a>消息记录表</h4><p>消息记录表用来存储消息和用户的分发关系</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>remindid(消息ID)</th>\n<th>senderid(发送方)</th>\n<th>reciverid(接收方)</th>\n<th>isread</th>\n<th>type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>message</td>\n</tr>\n</tbody></table>\n<h3 id=\"私信类消息\"><a href=\"#私信类消息\" class=\"headerlink\" title=\"私信类消息\"></a>私信类消息</h3><p>对于第一类私信类的消息,原则上即便用户不上线也需要对用户进行推送,也即是直接写入消息表</p>\n<p>现在从消息的产生开始分析消息的数据流程</p>\n<p>用户A-&gt;发消息(“你吃饭了吗”)-&gt;消息内容表-&gt;消息记录表<br>用户B上线-&gt;查询消息记录表中的未读-&gt;阅读消息-&gt;回复内容</p>\n<p>私信类型的比较简单,如果是管理员的话,把id设置为特殊值或者将消息类型标记为announce,在前台就可以进行相应的展示限制</p>\n<h3 id=\"提醒类消息\"><a href=\"#提醒类消息\" class=\"headerlink\" title=\"提醒类消息\"></a>提醒类消息</h3><p>重点是第二类提醒类的消息,提醒类消息也不允许用户漏接</p>\n<p>提醒类消息的产生流程就比较麻烦</p>\n<ol>\n<li><p>某用户在某专栏发布某文章-&gt;生成消息存入消息表-&gt;检查订阅该专栏文章发布的用户和关注了该用户动态的其他用户-&gt;把消息表中的记录分发给这些用户-&gt;这些用户上线收到消息</p>\n</li>\n<li><p>你回答了一个问题-&gt;增加订阅该回答的点赞和评论动作-&gt;有人评论你的回答-&gt;生成消息内容表的内容-&gt;检查订阅该回答评论的用户-&gt;分发消息</p>\n</li>\n</ol>\n<p>例如以上记录会产生消息:</p>\n<ol>\n<li>用户C在专栏Z(id=1)中发布了文章P</li>\n<li>用户C评论了某用户在问题W下的回答H</li>\n<li>B赞了你在问题W下的回答(该消息推送给回答者)</li>\n</ol>\n<p>消息表用于存储消息信息,当某事件被触发时,会生成对应的消息提醒内容,然后查询订阅该事件的所有用户,将消息和用户关系写入消息记录表</p>\n<h3 id=\"通知合并\"><a href=\"#通知合并\" class=\"headerlink\" title=\"通知合并\"></a>通知合并</h3><p>有时候,当某用户收到大量用户对某对象进行相似的操作的时候为了性能和用户体验,我们需要对用户的同志进行合并</p>\n<p>比如: 用户A 发布了一篇文章, 有5万人在1小时内都点赞了该文章, 我们就可以生成一条”张三,李四等5万个用户点赞了你的文章XXX”.</p>\n<p>消息合并的规则:</p>\n<ol>\n<li>按时间合并消息</li>\n<li>按发送方合并消息</li>\n<li>按种类合并消息</li>\n</ol>\n<p>合并的周期:</p>\n<ol>\n<li>固定时间的周期性的消息进行汇总</li>\n<li>无固定时间,产生未读消息即汇总</li>\n</ol>\n<p>合并的具体方法:</p>\n<ol>\n<li>C点赞了你的回答之后，这条消息会被标记为可聚合，聚合keyword为操作ID/对象类型/对象ID</li>\n</ol>\n<p>例如: 在某段时间之类有两个用户赞了你的评论,这个时候可以使用 C,V等两个用户赞了你的评论C,当产生第一条通知的时候,消息表中有一条消息: C赞了你的回答,这个时候V赞了你的回答之后,两条记录可以合并成一条”c,v等两个人赞了你的回答”, 这个例子中的两条记录的操作类型(都是点赞)和操作对象(都是你的回答)相同</p>\n<h2 id=\"消息分发\"><a href=\"#消息分发\" class=\"headerlink\" title=\"消息分发\"></a>消息分发</h2><p>通知消息产生以后我们只是有个要推送给用户的消息体,怎么把消息推送给用户也是一个很重要的部分</p>\n<h4 id=\"通知的分发\"><a href=\"#通知的分发\" class=\"headerlink\" title=\"通知的分发\"></a>通知的分发</h4><p>消息分发一半常用的有两种方式,一种是消息推送(push)一种是消息拉取(pull),不过现在大多采用两者结合的方式,针对不同的场景使用不同的方式</p>\n<ol>\n<li>push方式: 推送你有XX条消息未读(针对在线的用户)</li>\n<li>pull方式: 用户点击未读消息时对内容进行拉取</li>\n</ol>\n<p>消息分发的话可以采用redis来作为中间桥梁,将未读消息的数量存入redis, uid:unread:10 用户有10条未读消息</p>\n<p>当用户点击未读消息的标志的时候,从消息记录+消息内容表获取该用户的具体未读信息内容</p>\n<p>这里可以做一些优化:</p>\n<ol>\n<li>未读消息太多的话会每次取前20条</li>\n<li>某些公用的消息比如公告和某文章发布的消息可以存入redis,使用类似messageid:content:xxxx.这样的内容存储消息内容,当所有订阅该类消息的用户获取消息的时候会先从redis中获取数据,取不到的才从数据库中查询</li>\n</ol>\n<p>分发频率</p>\n<ol>\n<li>实时分发</li>\n<li>按小时分发</li>\n<li>按周和天分发</li>\n</ol>\n<p>分发管道 Web,微信,邮件,短信</p>\n<h4 id=\"用户对消息的处理\"><a href=\"#用户对消息的处理\" class=\"headerlink\" title=\"用户对消息的处理\"></a>用户对消息的处理</h4><h5 id=\"通知已读\"><a href=\"#通知已读\" class=\"headerlink\" title=\"通知已读\"></a>通知已读</h5><p>每条消息都应该带有一个是否已读的状态,以防止对用户造成重复的打扰</p>\n<p>一旦用户点击获取消息,打开消息详情或点击消息体的任意连接,就算作已读该消息,已读消息不做重复提醒</p>\n<p>已读消息的排序: 用户有30条未读消息,点击列表已读20条,剩余10条未读消息怎么处理<br>解决方案: 获取消息未读消息列表时按时间顺序取前20条</p>\n<h5 id=\"通知内容的处理\"><a href=\"#通知内容的处理\" class=\"headerlink\" title=\"通知内容的处理\"></a>通知内容的处理</h5><pre><code>点击链接: 点击链接之后进入到与该消息有关的详情页面  \n回复: 用户可以对私信进行回复\n删除: 用户可以删除消息</code></pre><blockquote>\n<p>ps: 不同终端消息状态应保持统一</p>\n</blockquote>\n<h4 id=\"redis中消息的存储\"><a href=\"#redis中消息的存储\" class=\"headerlink\" title=\"redis中消息的存储\"></a>redis中消息的存储</h4><p>redis中不存储普通的用户消息,但是会存储系统公告和文章更新之类容易被复用的消息</p>\n<p>消息:</p>\n<pre><code>msgid:xx:content:你订阅的XXX专栏更新了\n\nuid:xx:unread:10</code></pre><h3 id=\"消息回收\"><a href=\"#消息回收\" class=\"headerlink\" title=\"消息回收\"></a>消息回收</h3><p>消息处理还有其他一些需要系统处理的地方</p>\n<ol>\n<li>用户对话消息的显示范围(可以根据时间),是否允许用户删除</li>\n<li>用户拉黑名单是否自动删除会话消息</li>\n<li>用户长时间未读取的系统消息自动回收的时间</li>\n<li>长时间的未读消息的处理, 永久保留,二次推送(通过其他渠道)</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>一个消息系统还涉及到其他的一些关键的地方</p>\n<h3 id=\"消息的离线计算和处理\"><a href=\"#消息的离线计算和处理\" class=\"headerlink\" title=\"消息的离线计算和处理\"></a>消息的离线计算和处理</h3><p>消息系统数据量有可能非常大,如果一个用户有50万粉丝,该用户发一篇文章,理论上就要为50万用户产生消息.想要实时计算消息基本是不可行的, 所以应该有一套成熟的数据处理系统来支持消息系统</p>\n<h3 id=\"新消息到达时候的交互\"><a href=\"#新消息到达时候的交互\" class=\"headerlink\" title=\"新消息到达时候的交互\"></a>新消息到达时候的交互</h3><p>用户获取消息以后的UI交互也是消息系统的一部分功能,也是需要考虑的一部分</p>\n<ol>\n<li>声音提示</li>\n<li>标题闪烁</li>\n<li>未读信息浮动层</li>\n<li>弹窗</li>\n</ol>\n<h3 id=\"防骚扰\"><a href=\"#防骚扰\" class=\"headerlink\" title=\"防骚扰\"></a>防骚扰</h3><ol>\n<li>增加屏蔽功能</li>\n<li>设定接受消息的权限(例如:仅我关注的人可以给我发消息)</li>\n<li>黑名单</li>\n</ol>\n<h3 id=\"用户拉回\"><a href=\"#用户拉回\" class=\"headerlink\" title=\"用户拉回\"></a>用户拉回</h3><ol>\n<li>长时间未处理消息的用户进行二次推送(通过短信和邮件等)</li>\n</ol>\n","categories":["系统设计"],"tags":["系统设计","消息通知系统"]},{"title":"两种网站限流方案","url":"/2017-03-03-rate-limit-method/","content":"<h1 id=\"网站限流\"><a href=\"#网站限流\" class=\"headerlink\" title=\"网站限流\"></a>网站限流</h1><p>随着网站用户规模的增加,业务的扩张, 我们网站所承受的流量规模和并发数也会不断增加</p>\n<p>到了一定时候我们就会希望可以对网站的流量进行一定程度的控制,因为我们的业务处理能力是有限的,我们需要优先保证关键业务的正常运转</p>\n<p>技术人员一直以来都在致力于可以彻底的解决高并发问题,但是到目前为止也没有一种可以彻底解决的方案</p>\n<p>我们只能尽量的提升业务处理的性能,做业务拆分,分布式,进行错峰处理等手段</p>\n<p>其实我们可以从一整个用户请求的过程中的每个阶段进行分析, 在不同的阶段采用不同的方案</p>\n<p>在用户请求刚刚进入的时候进行限流处理就是一种十分有效的手段</p>\n<h2 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h2><p>限流就是从用户访问出限制用户的请求,常用于秒杀等并发量极高的场景之下</p>\n<p>限流的核心思想就是人为的丢弃一部分用户请求, 不作处理, 这样相当于从最根源处就避免的用户后续的操作,虽然对用户体验来说影响非常大, 但是只要采用合适的丢弃策略,就能在有效保护系统的同时,尽量减少对用户体验的影响</p>\n<h2 id=\"漏桶算法\"><a href=\"#漏桶算法\" class=\"headerlink\" title=\"漏桶算法\"></a>漏桶算法</h2><p>漏桶算法就是一种有效的限流算法,顾名思义,就是像漏桶一样以固定的速率将用户请求控制在一个确定的范围之内</p>\n<p>漏桶有两个关键属性,一个是漏桶的大小(最大存储的请求容量),另一个是漏桶的开口(处理请求的速率)</p>\n<p>用户的请求过来之后可以认为会被放到一个漏桶内,然后桶本身以一定的速率处理请求,当用户的请求速率过快,桶内的请求数量过多就会造成请求溢出,这部分请求就会被视为无效的请求</p>\n<p>特点: 根据时间以固定速率允许请求通过</p>\n<p>缺点: 针对部分由突发场景的效率有点低</p>\n<p>流程图: </p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/EKMs4BrGwvPmN5c.png\" alt=\"flow1.png\">令牌桶算法</p>\n<p>另一种常用的限流算法叫令牌桶算法,令牌桶的思想跟漏桶有点不大一样,令牌桶是先假设了一个桶, 桶内装有令牌(token),系统以一定的时间往桶里添加令牌.请求过来以后需要使用桶里面的令牌才能执行,也就是说我们可以通过控制桶内令牌的数量来控制最大请求数,也能通过改变添加令牌的速率来调整请求的处理速率</p>\n<p>令牌桶也有关键参数,一个是桶的大小,一个是令牌的发放速率</p>\n<p>特点: 使用请求+令牌来进行请求处理,没有令牌的请求不予处理</p>\n<p>缺点: 实现起来比漏桶算法复杂一点</p>\n<p>流程图:</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/EerPIDbnmcM92XB.png\" alt=\"flow2.png\"></p>\n<blockquote>\n<p>ps: 往令牌桶内添加令牌并不需要一个单独的程序来执行,只要在请求过来时候根据时间自动计算可用的令牌就行了</p>\n</blockquote>\n<p>虽然两种算法都能控制请求的处理速率, 但是这两者其实都受到之后请求处理速率的影响, 也就是说就算我们限流部分允许每秒2万的请求,但是后台业务的处理速度只有每秒1千,依然会造成严重的业务阻塞</p>\n<h2 id=\"RateLimiter\"><a href=\"#RateLimiter\" class=\"headerlink\" title=\"RateLimiter\"></a>RateLimiter</h2><p>Google开源工具包Guava提供了限流工具类RateLimiter,该类基于令牌桶算法(Token Bucket)来完成限流</p>\n","tags":["漏桶算法","令牌桶算法"]},{"title":"多git账号配置","url":"/2017-06-01-multi-git-user-config/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>我们有时候可能会遇到这样的情况</p>\n<p>公司部署了一个gitlab服务器</p>\n<p>我们自己也有在github上面使用仓库</p>\n<p>但是这两个服务器上面的账号是不一样的</p>\n<p>我们需要在公司的项目中使用公司的git账号,私人项目使用私人的git账号</p>\n<p>这时候就需要在同一台电脑上面使用多个git账号</p>\n<h2 id=\"生成两个ssh-key\"><a href=\"#生成两个ssh-key\" class=\"headerlink\" title=\"生成两个ssh-key\"></a>生成两个ssh-key</h2><p>现在大家普遍使用ssh-key来作为授权验证的工具.</p>\n<p>大多数的git服务器也使用这样的方式</p>\n<p>那我们就需要生成两个对应的ssh-key, 一个用于私人项目,一个用于公司项目</p>\n<h2 id=\"获取服务器项目权限\"><a href=\"#获取服务器项目权限\" class=\"headerlink\" title=\"获取服务器项目权限\"></a>获取服务器项目权限</h2><p>首先我们要拥有对应服务器(github/gitlab/coding等)的权限</p>\n<p>一般去的权限的方法是</p>\n<ol>\n<li><p>注册github/gitlab/coding账号</p>\n</li>\n<li><p>生成ssh-key</p>\n</li>\n</ol>\n<p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 生成ssh-key</p>\n<ol start=\"3\">\n<li>将生成的ssh-key中的xxx.pub公钥添加到github或者gitlab的ssh-key授权中</li>\n</ol>\n<p>此时我们的电脑实际上已经获得了往对应的平台中的账户下面的仓库中推送代码的权利, git推送代码是只认机器不认人</p>\n<p>此时机器已经可以推送代码了,但是服务器还无法针对不同的服务使用不同的ssh-key设置</p>\n<h2 id=\"在ssh中增加config文件\"><a href=\"#在ssh中增加config文件\" class=\"headerlink\" title=\"在ssh中增加config文件\"></a>在ssh中增加config文件</h2><p>可以通过配置.ssh文件夹下的config文件,通知ssh对不同的服务器使用不同的ssh-key</p>\n<p>例如,config内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># github</span></span><br><span class=\"line\">Host github.com    <span class=\"comment\"># 指定主机地址</span></span><br><span class=\"line\">    HostName github.com   <span class=\"comment\"># 主机名, 选填</span></span><br><span class=\"line\">    User 111@qq.com      <span class=\"comment\"># 用户名</span></span><br><span class=\"line\">    PreferredAuthentications publickey  <span class=\"comment\"># 授权方式</span></span><br><span class=\"line\">    IdentityFile ~/.ssh/id1_rsa     <span class=\"comment\"># 该服务器上使用的ssh-key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gitlab</span></span><br><span class=\"line\">Host gitlab.com</span><br><span class=\"line\">    HostName gitlab.com</span><br><span class=\"line\">    User 222@qq.com</span><br><span class=\"line\">    PreferredAuthentications publickey</span><br><span class=\"line\">    IdentityFile ~/.ssh/id2_rsa</span><br></pre></td></tr></table></figure>\n\n<p>以上内容就是 对github.com 使用 id1_rsa这份公钥,对gitlab.com使用 id2_rsa公钥,配置好了以后ssh就可以的对不同的服务器使用不同的公钥了</p>\n<blockquote>\n<p>ps: 没有域名host可以直接设置为服务器ip</p>\n</blockquote>\n<p>但是此时我们可能推送代码的用户标识可能不正确</p>\n<p>例如:  你的私人用户名叫A ,公司账号叫B, 此时你推送代码到公司账户但是却显示推送者是A</p>\n<h2 id=\"在目标项目中使用git-config设置用户\"><a href=\"#在目标项目中使用git-config设置用户\" class=\"headerlink\" title=\"在目标项目中使用git config设置用户\"></a>在目标项目中使用git config设置用户</h2><p>git中的配置分为全局配置和项目配置,默认使用全局配置,如果要在特定项目中使用特定的用户名,需要在项目的git配置中进行指定</p>\n<p>可以在项目目录中执行以下命令,指定需要使用的用户名和邮箱</p>\n<p><code>git config user.email &quot;aaa@qq.com&quot;</code>: 设置项目用户邮箱</p>\n<p><code>git config user.name &quot;aaa&quot;</code>: 设置项目用户名</p>\n<p>也可以手动修改<code>项目名/.git/config</code>文件中的user标签下的内容</p>\n<h2 id=\"ssh-T-测试\"><a href=\"#ssh-T-测试\" class=\"headerlink\" title=\"ssh-T 测试\"></a>ssh-T 测试</h2><p>使用如下命令可以测试配置结果,需要测试@ 后面的服务器地址可以自己修改</p>\n<p><code>ssh -T git@github.com</code></p>\n","categories":["编程工具"],"tags":["git"]},{"title":"读红楼","url":"/2017-09-10-reading-hongloumeng/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>说起来惭愧,最近才有幸拜读中国古代小说的巅峰之作&lt;红楼梦&gt;</p>\n<p>从很早之前打算好好看一下了, 遗憾的是一直以来都没有时间</p>\n<p>最近才抽出一部分时间将曹雪芹所写的前八十回看完</p>\n<p>之所以只看前八十回</p>\n<p>是因为我个人并不认同后四十回的高鹗/程伟元续写的版本</p>\n<p>所以只说前八十回的内容</p>\n<h1 id=\"关于全书\"><a href=\"#关于全书\" class=\"headerlink\" title=\"关于全书\"></a>关于全书</h1><p>&lt;红楼梦&gt;原著全本因为各种原因,现在已经寻不见了 </p>\n<p>现在流传的大多是经过后人补全或者修改的,不过版本太多了</p>\n<p>但是大多数版本都已被后人篡改太多内容,目前看来脂砚斋重批版本的应该是最符合原书原意的</p>\n<p>脂砚斋在批注中剧透了大量后面的故事情节对于解读红楼原意非常有帮助,也是解读红楼最重要的依据之一</p>\n<p>虽然我也很希望看到全书, 但是又有点犹豫</p>\n<p>毕竟从脂砚斋的批注中我们可以知道大部分人物的结局都是悲剧的</p>\n<p>我不想亲眼看到这种悲剧. 现在的高鹗和程伟元的续书虽然也有悲剧</p>\n<p>但是我还能骗自己说这不是原书,不可作信</p>\n<p>如果真的原本红楼被挖出来了,且不说我能不能接受得了,便是那些依靠红楼吃饭的红学家,可能也会有部分人因此丢掉饭碗</p>\n<blockquote>\n<p>ps: 清朝的富察明义看过全本的红楼梦, 这在他的诗集&lt;绿烟琐窗集&gt;里面有记载</p>\n</blockquote>\n<h1 id=\"关于87版电视剧\"><a href=\"#关于87版电视剧\" class=\"headerlink\" title=\"关于87版电视剧\"></a>关于87版电视剧</h1><p>如果是没看过红楼梦的书的人, 非常不建议直接去看电视剧</p>\n<p>因为电视剧里面其实是演的一个一个的书中的片段,而且后面几集被删减的内容太多,连续性不强</p>\n<p>还是建议先把书读一遍,然后再去看电视剧</p>\n<h2 id=\"电视剧中的一些非常好的点\"><a href=\"#电视剧中的一些非常好的点\" class=\"headerlink\" title=\"电视剧中的一些非常好的点\"></a>电视剧中的一些非常好的点</h2><ol>\n<li>服饰</li>\n</ol>\n<p>剧中的服饰非常讲究,林黛玉的各种服饰造型既符合传统,又完全没有传统汉朝服饰那种笨,糙的感觉</p>\n<p>据说为了拍87版的电视剧剧组设计了2700多套衣服, 按照三年的时间来计算平均每天设计三套…</p>\n<ol start=\"2\">\n<li>建筑</li>\n</ol>\n<p>剧中的荣国府是专门为此建造的影视基地,建筑用料,建制,建筑上面的一砖一瓦都极为讲究,之前看过一部与此相关的纪录片</p>\n<ol start=\"3\">\n<li>音乐</li>\n</ol>\n<p>剧中的词曲甚多, 也有人专门对此进行研究,剧中的&lt;枉凝眉&gt;简直好听到爆</p>\n<h2 id=\"其他相关\"><a href=\"#其他相关\" class=\"headerlink\" title=\"其他相关\"></a>其他相关</h2><p>87版的红楼梦毫无疑问是最经典的版本, 而其中的林黛玉毫无疑问是表演非常非常好的一个角色</p>\n<p>我其实看书的时候并没有那么喜欢林黛玉, 但是后来看了陈晓旭的林黛玉, 越看越喜欢</p>\n<p>其实我个人觉得87版的陈晓旭老师的林黛玉演得好绝非是因为长得好看</p>\n<p>就纯粹的长相而言,剧中的林黛玉绝对算不上顶尖的美女,但是架不住里面各种俏皮的小动作, 实在是太可爱了</p>\n<p>我现在依然记得几个经典的片段</p>\n<blockquote>\n<p>part1: 贾宝玉用老鼠偷香芋的故事编排黛玉的时候<br>part2: 史湘云第一次出场,黛玉笑湘云说话咬字,被湘云反过来调戏的时候,生气追湘云被宝玉拦下来的时候<br>part3: 凤姐调笑黛玉吃了我家的茶怎么还不给我们家做媳妇的时候,黛玉生气的样子<br>part4: 宝玉被魇好了以后,黛玉向菩萨祈愿,被宝钗调笑<br>part5: 探宝钗黛玉半含酸<br>part6: 蘅芜君兰言解疑癖<br>part7: 以及湘云刚出场, 黛玉问宝玉去处<br>part8: 宝玉跟黛玉一块哭, 黛玉把手帕递给他<br>part9: 惊呆雁片段</p>\n</blockquote>\n<p>以上几个片段我也读过书, 分明就有好多小动作是陈晓旭自己加上去的</p>\n<p>而且看之后的而采访时候也听扮演贾宝玉的欧阳奋强说,片场的陈晓旭十分鬼灵</p>\n<p>陈晓旭老师真的是把林黛玉身上那种俏皮可爱,表现的淋漓尽致</p>\n<p>陈晓旭老师自己都说她就是林黛玉,我觉得此言非虚</p>\n<h2 id=\"跟10版的对比\"><a href=\"#跟10版的对比\" class=\"headerlink\" title=\"跟10版的对比\"></a>跟10版的对比</h2><p>我之前老是听人说红楼梦是一部伟大的现实主义作品, 但是我个人其实并不是很同意这个说法</p>\n<p>10版就是认为应该写实, 结果拍出来跟那啥一样</p>\n<p>&lt;红楼梦&gt;中浪漫主义的体现非常之多</p>\n<p>贾宝玉的玉的来历,贾宝玉性格,薛宝钗吃的药,很多地方都说明红楼梦不是完完全全的写实主义, 反而是浪漫主义偏多</p>\n<p>书中人物性格之所以那么明显, 不就是因为各种戏剧化事件的推动吗</p>\n<p>所以我很喜欢87版偏浪漫主义的拍摄</p>\n<h1 id=\"关于人物\"><a href=\"#关于人物\" class=\"headerlink\" title=\"关于人物\"></a>关于人物</h1><h2 id=\"薛宝钗\"><a href=\"#薛宝钗\" class=\"headerlink\" title=\"薛宝钗\"></a>薛宝钗</h2><p>在我还没有看过红楼梦的时候我就听过好多人说喜欢薛宝钗而不喜欢林黛玉, 因为宝钗明显更符合传统的封建礼教的那一套大家闺秀的形象,通古博今,待人友善,同时又很少干涉他人私事,王熙凤说她”不关己事不开口,一问摇头三不知”</p>\n<p>书中的宝钗是个脾气极好的人,好像除了清虚观那一段发过脾气外就再也没有发过脾气了,刘心武说宝钗那一段时间心情不好是因为选秀失败了,结合宝玉把她比作杨妃,宝钗生气说出的话来看,确实有一定的道理</p>\n<p>而且宝钗在元春省亲时候的态度和所说的话,明显看得出宝钗是很崇拜元春的,可能因为她也想当娘娘</p>\n<p>宝钗一出场,气场就与众不同,日常吃的冷香丸的配方看似普通,实则需要极强的机缘与运气.</p>\n<p>宝钗自来到贾府与贾府众人都关系融洽(我个人觉得王熙凤不喜欢薛宝钗,按理说,王熙凤和薛宝钗因为王夫人的关系还算亲人呢,结果前八十回,王熙凤和薛宝钗正面交流的描写极少)</p>\n<p>宝钗在书中几件比较重要的出场无一不是以控制场面的形象出现的,少数几个宝钗受挫的场面大概也只有清虚观生气,宝玉睡梦中说木石前盟,宝琴出现等几个</p>\n<p>宝钗到底才情到什么地步,书中并没有直接描写,不过能跟黛玉并列金陵十二钗之首,才情可想而知</p>\n<p>黛玉跟宝玉一起看过牡丹亭和西厢记, 然而宝钗早就看过, 惜春会画画, 然而宝钗给她列画画需要的物品列表时候如数家珍, 你猜宝钗会不会画画?后来还给湘云出主意办螃蟹宴,细想以上几件事情,件件执行者都不是宝钗,但宝钗却都在以上几件事情上扮演了极为重要的角色</p>\n<p>总体而言,宝钗给人的感觉是比黛玉和宝玉高一个level的,宝钗完全明白宝玉在想什么但是宝玉却猜不透宝钗所想,两人在感情地位上实际上是有点不平等的</p>\n<h2 id=\"林黛玉\"><a href=\"#林黛玉\" class=\"headerlink\" title=\"林黛玉\"></a>林黛玉</h2><p>相比宝钗,黛玉和宝玉才是真正的互为知己,宝玉懂黛玉,理解黛玉</p>\n<blockquote>\n<p>“林妹妹有说过那混账话吗,林妹妹压根就不说那混账话”</p>\n</blockquote>\n<p>一句话就表明了宝玉和黛玉互为知己到什么地步</p>\n<p>两人互相理解互相关心</p>\n<p>宝玉偷偷吊祭金钏儿,黛玉不问而知</p>\n<p>宝玉有什么好东西第一个想到的一定是林妹妹,”西厢记妙词通戏语”基本上已经是明写两人的感情了</p>\n<blockquote>\n<p>“你我既为知己,又何必来一宝钗”</p>\n</blockquote>\n<p>可惜宝玉身在花丛中,为此,林黛玉还吃醋, 开始吃宝钗的醋, 湘云来了吃湘云的醋, 后来宝琴来了倒没见有什么大的反应</p>\n<p>从书中看,黛玉是极为关心宝玉的, 宝玉被魇和挨打那两次,黛玉都十分的担心</p>\n<p>“慧紫鹃情辞试莽玉”一回, 听说宝玉的状况, 说出了”你倒是找个绳子勒死我才是正经”</p>\n<blockquote>\n<p>“仙杖香桃芍药花”</p>\n</blockquote>\n<p>可惜因为寄人篱下,只能把自己的希望寄予贾母身上,仙杖是不是就是指贾母啊</p>\n<h2 id=\"贾探春\"><a href=\"#贾探春\" class=\"headerlink\" title=\"贾探春\"></a>贾探春</h2><p>探春其实是个十分有才气的人, “才自精明志自高”, 从探春兴利除弊就能看出来,她对家族的一些问题早就看在眼里,并早就在思考解决方案. 据说也是曹雪芹寄托自己精神的一个人物, 可惜为家族和身份所累</p>\n<p>书中的探春毫无疑问是三春之冠,在十二钗排名中排第四,据说书中的四春分别对应 琴棋书画, 探春也确实工于书法,屋里陈设也有很明显的体现</p>\n<p>书中<code>抄检大观园</code>一段,探春的表现使的这个人物形象无比的丰满,一个片段就有如此的威力</p>\n<h2 id=\"史湘云\"><a href=\"#史湘云\" class=\"headerlink\" title=\"史湘云\"></a>史湘云</h2><p>湘云是十分可爱的一个角色,说话咬字,天天爱哥哥的, 黛玉打趣她,她也不生气, 书中的史湘云十分可爱, 然而也免不了成为封建制度的牺牲品.</p>\n<p>湘云才情不下于宝黛, 擅长对联, 在书中有一段把黛钗都给比下去了, 也就宝琴能跟她比比,还和黛玉对出了”寒塘渡鹤影,冷月葬花魂”这样的句子.</p>\n<p>黛玉其实是懂世故而不世故, 但是湘云是真的没心机,所以叫”憨湘云”</p>\n","categories":["阅读记录"],"tags":["红楼梦"]},{"title":"给团队成员的Redis分享总结","url":"/2017-10-29-redis-share-in-group/","content":"<h1 id=\"redis分享\"><a href=\"#redis分享\" class=\"headerlink\" title=\"redis分享\"></a>redis分享</h1><p>Author:   leriou lee       2017.10.12<br>本篇内容主要是针对团队成员的redis中间件分享</p>\n<p>目的是帮助不熟悉redis的团队成员快速的了解redis，对redis大概有一个了解<br>已经使用过redis的能对其有进一步的了解，以及总结了一些遇到的业务问题和解决方案</p>\n<h1 id=\"redis基础\"><a href=\"#redis基础\" class=\"headerlink\" title=\"redis基础\"></a>redis基础</h1><ol>\n<li>redis是什么</li>\n</ol>\n<p><code>redis</code>是一个使用c语言开发的k-v存储系统,其实不仅仅作为缓存,由于<code>redis</code>内部的底层数据结构设计的非常完善</p>\n<p>我们也可以把<code>redis</code>作为一个现成的数据结构实现集合,只要了解<code>redis</code>内部的基础数据结构和实现,我们就能利用它做很多事情</p>\n<p>比如我们想利用某种数据结构的特性(例如:跳跃表),又不想自己实现,就可以在<code>redis</code>的基础之上构建业务</p>\n<p>redis目前支持5种数据对象, 基本可以满足大多数的业务场景</p>\n<blockquote>\n<p>ps: 现在5.0发布已经有6种了</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>redis的大致工作流程</p>\n<ol>\n<li>启用redis-server,使用socket服务监听端口(redis服务端)</li>\n<li>客户端启用socket连接到服务器,通过认证,服务器维护client的信息(使用链表持有)</li>\n<li>客户端发送命令, 服务器接收到命令根据命令表进行执行和查找等,返回结果(将结果保存到client的输出缓冲区)</li>\n<li>客户端解析服务器返回的结果</li>\n</ol>\n</li>\n<li><p>redis能做什么</p>\n</li>\n</ol>\n<p>redis作为一个缓存中间件, 可以帮助我们解决很多业务中遇到的问题,由于redis内部功能机制比较丰富,其实不仅仅可以作为简单的缓存中间件使用</p>\n<p>redis可以作为高速的k-v存储，非常适合存储一些直接针对用户的应用数据，或者进行用户行为统计。 比如：对用户进行限流，统计用户访问量</p>\n<ol start=\"4\">\n<li>基于redis可以解决的一些常见问题</li>\n</ol>\n<p>redis可以帮助我们解决很多业务中的问题,下面简单列举一下</p>\n<ul>\n<li><p>作为服务间的共享空间或临时存储，解决数据共享问题 例如: 计数器,注册器/协调器,在分布式应用中做桥接</p>\n<p>  由于redis是一个独立的服务,不依赖任何其他的服务,同时又具有高效的存储功能<br>  我们可以用redis在不同的应用和系统服务之间进行简单的数据传递,或者存放部分中间数据<br>  相当于多个服务之间的共享内存,我们可以”使用共享内存来通信”</p>\n</li>\n</ul>\n<p>*为高读写要求的场景提供数据存储，解决性能问题  例如: 热点数据缓存/流量控制(漏桶和令牌桶)</p>\n<pre><code>redis由于是一个内存数据库,读写速度执行非常的快\n在一个最低配的的阿里云机器上可以达到8w/s的ops,非常适合用来处理一些对读写性能要求极高的场景\n比如:部分热点商品数据,秒杀活动,流量控制等</code></pre><p>*其他可以利用redis特性的场景，解决业务问题    例如: 搜索/bitmap/数据匹配/消息队列/发布订阅</p>\n<pre><code>redis内部还有很多的特殊机制实现了比较丰富的功能, 如:发布订阅.\n我们也可以利用redis的一写数据结构特性来构建倒排索引,以实现简单的搜索功能 \n也可以利用list的数据结构的特性实现简单的消息队列</code></pre><h1 id=\"Redis的读写流程\"><a href=\"#Redis的读写流程\" class=\"headerlink\" title=\"Redis的读写流程\"></a>Redis的读写流程</h1><ul>\n<li>通信协议RESP</li>\n</ul>\n<p>RESP协议在Redis 1.2中引入，但它成为与Redis 2.0中的Redis服务器通信的标准方式。 这是每一个Redis客户端中应该实现的协议。</p>\n<p>RESP实际上是一个支持以下数据类型的序列化协议：单行字符串，错误信息，整型，多行字符串和数组。<br>RESP在Redis中用作请求 - 响应协议的方式如下：</p>\n<p>客户端将命令作为字符串数组发送到Redis服务器。<br>服务器根据命令实现回复一种RESP类型数据。<br>在 RESP 中, 一些数据的类型通过它的第一个字节进行判断：</p>\n<p>单行回复：回复的第一个字节是 “+”</p>\n<p>错误信息：回复的第一个字节是 “-“</p>\n<p>整形数字：回复的第一个字节是 “:”</p>\n<p>多行字符串：回复的第一个字节是 “$”</p>\n<p>数组：回复的第一个字节是 “*”</p>\n<p>此外，RESP能够使用稍后指定的Bulk Strings或Array的特殊变体来表示Null值。<br>在RESP中，协议的不同部分始终以“\\ r \\ n”（CRLF）结束。</p>\n<ul>\n<li>读写过程</li>\n</ul>\n<p>Redis的读过程可以简化为:</p>\n<ol>\n<li>client客户端通过socket发请求</li>\n<li>server端监听服务端口, 收到请求, 解析协议, 查找命令表</li>\n<li>server端进行数据操作, 更新数据状态</li>\n<li>server端返回数据或信息, client端接受并解析</li>\n</ol>\n<p>其中细节颇多, 值得注意的就是 server端内部会进行很多检查工作</p>\n<p>比如: 检查键的订阅者, 是否有监听者(monitor), hash负载因子如何, 是否需要rehash, 主从同步等信息 </p>\n<p>Redis在集群模式下, 会把<code>key</code>根据hash映射到 <code>16384</code>个槽其中的一个, 再根据槽所在的节点对客户端操作进行应答</p>\n<p>如果该<code>key</code>所在槽不归本节点维护, 服务器会返回<code>moved</code>错误</p>\n<p>而且cluster模式下不能使用Redis的pipeline功能, 除非你能保证pipeline操作的所有key都在同一节点上</p>\n<h1 id=\"Redis的特色功能\"><a href=\"#Redis的特色功能\" class=\"headerlink\" title=\"Redis的特色功能\"></a>Redis的特色功能</h1><ol>\n<li>Redis的持久化</li>\n</ol>\n<p>redis有别于memcache的一个区别就是redis支持数据持久化,redis可以通过采用一定的策略将内存中的数据持久化到本地磁盘上面</p>\n<p>这么做不仅有利于数据的完整性和可用性, 同时也可以在服务器重启或者迁移过程中实现方便的数据恢复,一般来说如果设置了合理的持久化策略,就算是服务进程出了问题只要重启服务,并不会丢失太多的数据</p>\n<p>redis的持久化相关的主要有以下几点:</p>\n<ol>\n<li>RDB: 基于内存状态的持久化操作</li>\n<li>AOF: 基于命令操作的持久化操作</li>\n<li>AOF重写: 基于内存的持久化(命令格式)</li>\n</ol>\n<p><strong>RDB</strong></p>\n<p>RDB:持久化相当于对当前的数据库状态进行一次快照备份, 是将当前的内存数据库中的数据进行序列化保存到本地的操作, 如果数据库使用量比较大,在持久化的时候可能会对性能造成比较大的影响,可以使用命令 <code>save</code>(在主进程执行持久化,会造成主进程阻塞) 或 <code>bgsave</code>(创建一个子进程来执行持久化,不会阻塞主进程,但是执行时会消耗大量的内存)来执行RDB持久化</p>\n<p><strong>AOF</strong></p>\n<p>AOF(append only file): AOF持久化是对redis的命令进行记录,恢复时按照命令重新执行一遍,以恢复数据库状态的持久化形式,有点类似于GFS里面的基于日志的恢复机制. AOF持久化对性能影响没有RDB那么大,每当redis执行一个命令,redis会根据AOF持久化的设置规则判断是否进行持久化,AOF可以根据命令执行时间和频率来执行持久化策略,比如: 3s执行100个命令则进行持久化,每个命令都持久化等</p>\n<p><strong>Rewrite AOF</strong></p>\n<p>AOF重写: 但是AOF也有一些缺点,有可能造成AOF文件非常的大,举个例子: 我先设置键a为10(set a 10),然后设置键a为5(set a 5),重新设置键a为10(set a 10), 这三条命令执行以后最终的数据状态中的表现结果是a=10,但是在AOF文件中会有3条命令.如果某个键的变动频率非常的高,就会消耗还多的数据命令来记录数据的变化,比如计数器. </p>\n<p>redis提供了AOF重写功能来解决这种情况, AOF重写是对当前的内存数据库状态进行命令反向解析,比如,上面的例子,在进行AOF重写的时候,redis看到数据库中的键a的值是10 ,会反向生成一条命令 set a 10,将该命令写到重写文件中,这样就能有效的减小AOF文件的体积</p>\n<ol>\n<li><p>事务</p>\n<pre><code>redis中的事务基于链表实现,跟普通的数据库事务不同的是,redis的事务不支持回滚数据,执行失败了也不会进行通知\nredis在的事务其实相当于使用一个pipeline 将一系列的操作一起打包发给redisServer来执行</code></pre></li>\n<li><p>发布订阅</p>\n<pre><code>redis的发布订阅也是基于链表实现,redis的订阅相当于将某个客户端加入到订阅该模式的链表中,redis在执行发布消息的时候会沿着链表去检查所有订阅了符合该模式的所有客户端,将消息发送给他们.</code></pre></li>\n<li><p>监控(monitor)</p>\n<pre><code>监控功能也是基于链表实现,redis的监视器是一种特殊的redis客户端,服务器会在执行命令时候,将命令同时发送给所有监视器列表上面的客户端</code></pre></li>\n<li><p>哨兵(sentinal)</p>\n<pre><code>redis哨兵是官方的集群方案出来之前的一种分布式解决方案,哨兵可以监控服务器,并在服务器出问题时候采用选举策略将从服务器省纪委主服务器保证服务稳定</code></pre></li>\n<li><p>排序(内部实现)</p>\n<pre><code>redis的内部排序主要对set,sort set,list这三个数据结构起作用,旨在让用户可以用过自定义的方式对内部数据进行排序</code></pre></li>\n</ol>\n<h1 id=\"redis-Representation\"><a href=\"#redis-Representation\" class=\"headerlink\" title=\"redis Representation\"></a>redis Representation</h1><p>这里做了一个简单的redis的脑图, 着重描述了一下内部的基本数据结构的关系</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/BKtdElZifANIg8c.png\" alt=\"redis.png\"></p>\n<p>百度脑图地址:<br><a href=\"http://naotu.baidu.com/file/ee2d1316a2eb6b2d4fc5b0c876c50685?token=cb284164f0989037\" target=\"_blank\" rel=\"noopener\">http://naotu.baidu.com/file/ee2d1316a2eb6b2d4fc5b0c876c50685?token=cb284164f0989037</a></p>\n<h1 id=\"Redis集群\"><a href=\"#Redis集群\" class=\"headerlink\" title=\"Redis集群\"></a>Redis集群</h1><p>redis的常见高可用部署方案</p>\n<ul>\n<li>keepalived(基于VRRP协议)</li>\n<li>哨兵(sentinal)</li>\n<li>集群(cluster): redis3.0之后提供，同时也是个人比较建议的方案</li>\n<li>其他第三方方案</li>\n</ul>\n<p>其中各种方案各有优点, 我们使用的是redis的官方cluster方案</p>\n<p><strong>集群使用中的一些坑</strong></p>\n<ol>\n<li>主从切换,故障转移</li>\n</ol>\n<p>redis的主服务器出问题以后,从服务器会顶替主服务器对外提供副服务,但是如果客户端没有对集群中的主节点配置进行更新, 会导致客户端和服务器主节点配置对应不上,从而导致redis操作失败,部分redis客户端支持集群模式,可以自动判断当前集群的主节点,从而自动进行配置调整</p>\n<ol start=\"2\">\n<li>分片导致的数据分布问题</li>\n</ol>\n<p>redis内部采用16384个槽来对存储的数据进行分配,数据分配到槽上面,槽分配到节点机器上面.但是这样也而导致在进行部分数据操作的时候会出现问题</p>\n<p><strong>故障转移</strong></p>\n<p>主节点挂掉之后,怎么自动修改配置,使服务正常?</p>\n<p>3个思路:</p>\n<ol>\n<li>后台定时检查,修改配置或将配置放入zk等,实例化客户端的时候从zk中实时获取配置信息</li>\n<li>客户端程序执行redis命令失败时,进行消息通知,检查当前的节点配置,修改配置 </li>\n<li>每次redis对象实例化之后检查集群状态,程序中动态修改配置 </li>\n</ol>\n<p>以上思路都需要使用<code>cluster node</code>命令从集群中获取当前节点信息,解析出来当前的集群主节点,区别就是修改配置的方式和时间点不同</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cluster info <span class=\"comment\">// 检查集群状态</span></span><br><span class=\"line\">cluster info返回信息如下(redis3<span class=\"number\">.2</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:<span class=\"number\">16384</span></span><br><span class=\"line\">cluster_slots_ok:<span class=\"number\">16384</span></span><br><span class=\"line\">cluster_slots_pfail:<span class=\"number\">0</span></span><br><span class=\"line\">cluster_slots_fail:<span class=\"number\">0</span></span><br><span class=\"line\">cluster_known_nodes:<span class=\"number\">6</span></span><br><span class=\"line\">cluster_size:<span class=\"number\">3</span></span><br><span class=\"line\">cluster_current_epoch:<span class=\"number\">9</span></span><br><span class=\"line\">cluster_my_epoch:<span class=\"number\">8</span></span><br><span class=\"line\">cluster_stats_messages_sent:<span class=\"number\">8625814</span></span><br><span class=\"line\">cluster_stats_messages_received:<span class=\"number\">8601220</span></span><br><span class=\"line\"></span><br><span class=\"line\">cluster nodes <span class=\"comment\">// 检查集群节点的状态</span></span><br><span class=\"line\">cluster nodes返回信息如下:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">634</span>f54bcec482a1a048f2604793c06acd47c93c6 <span class=\"number\">10.113</span><span class=\"number\">.1</span><span class=\"number\">.231</span>:<span class=\"number\">7001</span> slave c1eecd493eee0644a76bb9e691b6d13a31b25628 <span class=\"number\">0</span> <span class=\"number\">1510321448626</span> <span class=\"number\">6</span> connected</span><br><span class=\"line\"><span class=\"number\">1</span>ed54647073d60118a35df253e9b04459cc30e49 <span class=\"number\">10.113</span><span class=\"number\">.2</span><span class=\"number\">.82</span>:<span class=\"number\">7001</span> slave c464639a33800da984875866391a549647af4a5a <span class=\"number\">0</span> <span class=\"number\">1510321447623</span> <span class=\"number\">3</span> connected</span><br><span class=\"line\"><span class=\"number\">01334</span>b7a5802032461966cc382b2f97f004ab027 <span class=\"number\">10.113</span><span class=\"number\">.2</span><span class=\"number\">.82</span>:<span class=\"number\">7000</span> myself,master - <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> connected <span class=\"number\">0</span><span class=\"number\">-5460</span></span><br><span class=\"line\">c1eecd493eee0644a76bb9e691b6d13a31b25628 <span class=\"number\">10.113</span><span class=\"number\">.1</span><span class=\"number\">.231</span>:<span class=\"number\">7000</span> master - <span class=\"number\">0</span> <span class=\"number\">1510321446623</span> <span class=\"number\">5</span> connected <span class=\"number\">10923</span><span class=\"number\">-16383</span></span><br><span class=\"line\">c464639a33800da984875866391a549647af4a5a <span class=\"number\">10.113</span><span class=\"number\">.1</span><span class=\"number\">.42</span>:<span class=\"number\">7000</span> master - <span class=\"number\">0</span> <span class=\"number\">1510321445622</span> <span class=\"number\">3</span> connected <span class=\"number\">5461</span><span class=\"number\">-10922</span></span><br><span class=\"line\"><span class=\"number\">98</span>b58ef327f872dec466761cabae23bad74622db <span class=\"number\">10.113</span><span class=\"number\">.1</span><span class=\"number\">.42</span>:<span class=\"number\">7001</span> slave <span class=\"number\">01334</span>b7a5802032461966cc382b2f97f004ab027 <span class=\"number\">0</span> <span class=\"number\">1510321450631</span> <span class=\"number\">4</span> connected</span><br></pre></td></tr></table></figure>\n\n<p>其他问题:</p>\n<pre><code>1. 多主节点的槽分配导致的无法对复杂数据结构(例如hash)进行重命名操作\n2. pipeline的使用受节点限制</code></pre><h1 id=\"数据对象和底层数据结构\"><a href=\"#数据对象和底层数据结构\" class=\"headerlink\" title=\"数据对象和底层数据结构\"></a>数据对象和底层数据结构</h1><p><strong>redis基本数据对象在我们自己项目中的使用</strong></p>\n<p>redis提供了多种基本的数据对象,已经能满足我们的大部分业务需求</p>\n<p>以下是各种数据结构在我们业务中的使用示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">str:  适用于简单存储(临时标记,计数器等)          </span><br><span class=\"line\">list: 适用于线性存储和类似场景(简单线性容器,vector,简单的消息队列)</span><br><span class=\"line\">hash: 适用于对象存储(产品池,产品信息)</span><br><span class=\"line\"><span class=\"keyword\">set</span>:  适用于需要进行集合运算的场景(行政区服务,A和B都喜欢的产品,倒排索引等)</span><br><span class=\"line\">zset: 适用于有排序需求的场景(360凤舞系统,消息系统中的优先级实现)</span><br><span class=\"line\">stream:  流式对象, 类似于kafka中的topic  (5.0新增)</span><br></pre></td></tr></table></figure>\n\n<p>其他一些不建议的数据对象使用方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 使用str存储json对象</span><br><span class=\"line\"></span><br><span class=\"line\">\t如: a:&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xiaohua\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"number\">8</span>&#125;,像这种可以使用hash来存储</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 过度使用有序集合</span><br><span class=\"line\"></span><br><span class=\"line\">\t集合和有序集合和list在部分特性上面比较类似,很多人时候问题都可以使用list替代而不必要使用集合,因为有序集合底层使用的跳跃表,性能方面比简单的列表稍微差点,但是集合和有序集合都可以方便的使用集合操作,交/并/差集等</span><br></pre></td></tr></table></figure>\n<p><strong>redis中的数据库键空间</strong></p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/deSBNkvgwpaE2tK.jpg\" alt=\"IMG_0255.jpeg\"></p>\n<p><strong>数据对象和底层实现的数据结构对应关系</strong></p>\n<p>数据对象的实现之所以有这种情况,其实是适应2个不同场景, 省内存和常规使用</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">对象</th>\n<th align=\"left\">省内存</th>\n<th align=\"left\">常规</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">str</td>\n<td align=\"left\">int/embstr</td>\n<td align=\"left\">row</td>\n</tr>\n<tr>\n<td align=\"left\">list</td>\n<td align=\"left\">ziplist(quicklist)</td>\n<td align=\"left\">linkedlist(quicklist)</td>\n</tr>\n<tr>\n<td align=\"left\">hash</td>\n<td align=\"left\">ziplist</td>\n<td align=\"left\">hashtable</td>\n</tr>\n<tr>\n<td align=\"left\">set</td>\n<td align=\"left\">intset</td>\n<td align=\"left\">hashtable</td>\n</tr>\n<tr>\n<td align=\"left\">zset</td>\n<td align=\"left\">ziplist</td>\n<td align=\"left\">skiplist</td>\n</tr>\n</tbody></table>\n<p>redis在3.2之后使用quicklist替代了linkedlist作为列表对象的底层实现</p>\n<blockquote>\n<p>ps: 我还另外写过两篇稍微详细点的关于redis数据结构(<a href=\"https://leriou.github.io/post-redis-data-structure/\">https://leriou.github.io/post-redis-data-structure/</a>)和数据对象的文章(<a href=\"https://leriou.github.io/post-redis-object/\">https://leriou.github.io/post-redis-object/</a>)</p>\n</blockquote>\n<h1 id=\"生产问题实例\"><a href=\"#生产问题实例\" class=\"headerlink\" title=\"生产问题实例\"></a>生产问题实例</h1><ol>\n<li>使用redis注册器起到类似分布式锁的作用</li>\n</ol>\n<p>一个曾经的小问题,一段伪代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">flag = get(redis_key)?redis_key:<span class=\"number\">0</span></span><br><span class=\"line\">res = DB.op(select * from table where id &gt; flag)</span><br><span class=\"line\"><span class=\"keyword\">while</span>(res) &#123;</span><br><span class=\"line\">\tforeach(a in res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span>(a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twrite(redis_key,flag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>潜在的问题: 不支持多线程并发, 任务不能多线程同时进行</p>\n<p>解决方案:   借用redis作为注册器,实现类似乐观锁的机制</p>\n<p>具体方案:  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">redis中存储正在进行的处理进程:</span><br><span class=\"line\">[<span class=\"number\">2000</span>:<span class=\"number\">1505290677</span>,<span class=\"number\">3000</span>:<span class=\"number\">1505287997</span>,<span class=\"number\">5000</span>:<span class=\"number\">1505287993</span>,<span class=\"number\">6000</span>:<span class=\"number\">1505287892</span>,<span class=\"number\">8000</span>:<span class=\"number\">1505287844</span>]</span><br><span class=\"line\">流程:</span><br><span class=\"line\"><span class=\"number\">1.</span> 从注册器根据过期时间和处理范围获取当前应该处理的flag的值</span><br><span class=\"line\"><span class=\"number\">2.</span> 将自己的当前处理进度存入注册器列表,处理数据</span><br><span class=\"line\"><span class=\"number\">3.</span> 处理结束移除注册器中自己注册的进度和范围</span><br></pre></td></tr></table></figure>\n<p>以上这个程序的核心思想可以用以下流程来描述:</p>\n<ol>\n<li><p>第一步: 正常的数据处理流程   </p>\n<p>第一个进程来到向注册器索要自己处理的数据起始值,注册器发现当前没有进程在进行,<br>并且没有flag标记(程序处理到哪里了),给出起始值0,<br>并在注册器记录里面记录0:1505287993,意思是有程序正在执行从0开始的数据,<br>进程取1000条数据,将待处理的最大的数据的id设为flag = 1006,<br>处理完毕将删除注册器中的0:1505287993记录;</p>\n</li>\n<li><p>第二步: 有其他进程在执行时候的情况   </p>\n<p>然后第二个程序来执行的时候向注册器索要可以执行的起始值,<br>注册器查看记录发现0:1505287997并且时间没有过期,<br>说明0其实的数据已经有人在处理,并且没有过期的注册信息,<br>于是发放当前的flag给第二个程序,并想注册期记录1006:1505287997,<br>第二个程序取数据1000条,假设ID范围为1006-2390,将处理标记标记为flag = 2390,<br>处理完毕删除注册其中的自己的处理进度记录1006:1505287997;</p>\n</li>\n<li><p>第三步: 针对有部分进程断掉的情况   </p>\n<p> 如果第一个程序中间断掉,<br> 则不能删除自己的处理进度记录0:1505287993,<br> 此时新的程序向注册器索要起始值时,<br> 注册器会发送当前过期的(过期表示处理该记录的程序处理中断了)的程序起始值0,<br> 并标记当前处理的程序是二次处理,<br> 二次处理的程序不会更新flag,<br> 处理完毕删除自己的处理记录</p>\n</li>\n</ol>\n<blockquote>\n<p>ps: 整个流程有点类似于常见的”锁”的概念</p>\n</blockquote>\n<p><strong>缺点</strong></p>\n<p>这个处理方案有个缺点, 要求数据的处理操作是<code>幂等</code>的,也就是无论操作多少次,操作结果都是一样的,或者不具有累加效应</p>\n<p>查询操作就是最常见的<code>幂等操作</code></p>\n<p><strong>流程图</strong></p>\n<p>具体流程图:</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/xpNhU9XPYFn4OcA.png\" alt=\"flow1.png\"></p>\n<ol start=\"2\">\n<li>使用redis解决超高并发</li>\n</ol>\n<p><strong>使用redis的bitmap，hyperloglog等数据结构</strong></p>\n<p>redis的Bitmap非常适合用来做一些数据量大，id分布紧凑，且值类型为bool型的数据的存储， 比如用户标签</p>\n<p>hyperloglog也适合用来进行用户访问量统计，视频播放统计等大数据量的统计工作</p>\n<p><strong>其他应用</strong></p>\n<p>我们也可以使用redis的集合来构建倒排索引以实现搜索功能</p>\n<p>也能使用redis的发布订阅来实现简单的消息通知系统(不过redis的发布订阅缺点很明显，不建议使用)</p>\n<p>或者使用redis的有序集合统计同时在线用户数</p>\n","categories":["编程工具"],"tags":["redis","NoSQL"]},{"title":"浅谈Kafka消息系统","url":"/2017-11-01-kafka-share-in-group/","content":"<h1 id=\"kafka分享\"><a href=\"#kafka分享\" class=\"headerlink\" title=\"kafka分享\"></a>kafka分享</h1><p>听闻kafka已经是很早之前的事情了</p>\n<p>在2016年的时候, 就在一次我们公司的数据团队的内部分享中听过他们基于kafka做的一套数据处理系统</p>\n<p>不过当时我对他的认知还仅仅知道是一个能处理海量数据的消息队列服务</p>\n<p>后来随着深入使用才发现kafka其实不仅仅是纯粹的消息队列, 而是一种分布式消息系统甚至于流处理平台(基于scala开发)</p>\n<h2 id=\"消息传递在现代业务中的地位\"><a href=\"#消息传递在现代业务中的地位\" class=\"headerlink\" title=\"消息传递在现代业务中的地位\"></a>消息传递在现代业务中的地位</h2><p><strong>面向对象的程序 = 对象 + 消息传递</strong></p>\n<p>消息系统在我们业务中的重要性由此可见, 消息系统可以作为系统与系统进行交互,或者对业务进行解耦的一个利器</p>\n<p>我们通常会把许多实时性要求不那么高的任务处理通过消息系统进行解耦,以平衡数据处理的性能和功能</p>\n<p>例如: 用户下了一个订单,我们需要马上告诉用户下单成功, 但是之后的物流发货, 订单入账和商品信息更新等消息都可以通过一个消息系统进行拆分,这样不仅不会影响用户体验,也可以对之后触发的多个属于不同系统的业务进行并行处理,提升系统处理的性能</p>\n<h1 id=\"Kafka基础介绍\"><a href=\"#Kafka基础介绍\" class=\"headerlink\" title=\"Kafka基础介绍\"></a>Kafka基础介绍</h1><p>kafka作为一个消息平台, 其中有一些基础概念跟传统的消息队列服务对应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">broker(instance)    承载服务的实例</span><br><span class=\"line\">topic (queue)  \t\t逻辑上的消息通道</span><br><span class=\"line\">paitition(sharding) 一个消息通道进行存储的区域(物理上的,本质是对应着一个文件序列)</span><br><span class=\"line\">consumer       \t\t消费者 (通常指客户端的使用者)</span><br><span class=\"line\">producer       \t\t生产者 (也是客户端的使用者)</span><br><span class=\"line\">consumer group   \t消费者组 (虚拟概念, 消费者的逻辑分组)</span><br></pre></td></tr></table></figure>\n\n<p><strong>broker</strong></p>\n<p>broker就相当于我们的kafka实例, 每个集群由多个broker组成, 每个broker具有完整的存储消息的功能, 多个broker可以组成broker集群, 但是这些实例不一定要分布在不同的机器上(虽然我们建议不要在同一个机器上部署多个broker)</p>\n<p>broker是链接<code>producer</code>和<code>consumer</code>的中间桥梁, 是消息真正的存储者, producer将消息发送给broker, broker对消息进行存储, 等待consumer消费和使用消息，kafka的性能, 很大程度上取决于broker参数配置</p>\n<p><strong>topic</strong></p>\n<p>topic就相当于其他消息队列中的queue, 我们发送消息需要指定topic, 读取消息也需要指定topic, 同一个topic可以有多个生产者和多个消费者</p>\n<p>topic是一个逻辑上的概念, 每个topic由至少一个或多个partition组成, 每个partition保存topic内的<code>一部分</code>消息。topic内的消息无法保证有序, 除非只有一个partition</p>\n<p><strong>partition</strong></p>\n<p>partition相当于是topic内部的一个分片 </p>\n<p>假如说我们有个topic其中有5个patition, 一个消息在每个topic中只会存储在一个patition中, 整个topic的消息等于该topic下所有partition的总和 </p>\n<p>每个partition至多只能有一个消费者, topic下的总消费者数量也受限于partition, 比如你topic有10个分片, 如果使用12个消费者就会有两个消费者永远获取不到数据  </p>\n<p>每个partition是一个文件集合, 集合内同一时刻只有一个文件可写入数据，单个partition里面的数据因为这个关系可以保持有序  </p>\n<p>partition还可以有自己的replication，replication只有一个功能, 就是提供数据冗余, 防止partition出问题时造成数据丢失 。不过同一个partition的多个replication中同一时间只能有一个primary replication(通过选举得出)，由这个primary  replication来执行整个partition的数据操作</p>\n<p><strong>consumer</strong></p>\n<p>每个消费者可以消费一个topic的一个partition, 可以同时消费多个topic</p>\n<p>consumer数量如果超过一个topic的分片数量, 会造成某些consumer永远消费不到数据</p>\n<p>消费者消费数据需要提交offset告诉broker自己已经消费过某条数据</p>\n<p>当topic新增一个consumer的时候会触发其他消费此topic的consumer group内consumer的<code>Rebalance</code>, 重新在consumer之间重新进行分区分配</p>\n<p><strong>consumer group</strong></p>\n<p>消费者组也是一个逻辑上的概念, 每个消费者组内的消费者只能消费同一个topic内的某一条消息一次, 除非进行手动offset调整重新消费</p>\n<p>如果某个topic中的数据希望同时给多个业务方使用, 每个业务方应该使用一个单独的consumer group</p>\n<p><strong>producer</strong></p>\n<p>每个生产者可以为一个或多个topic生产数据, producer只负责将数据发送给broker, 后续操作通通由broker来负责</p>\n<h1 id=\"kafka的主要应用何特点\"><a href=\"#kafka的主要应用何特点\" class=\"headerlink\" title=\"kafka的主要应用何特点\"></a>kafka的主要应用何特点</h1><p><strong>常见应用场景</strong></p>\n<ol>\n<li>消息队列：kafka通常被用作消息队列, 这也是kafka的主要用途之一, 因为他可以一定程度上保证消息的可靠和有序</li>\n<li>日志/消息存储：kafka由于基于文件存储, 所以很适合用来存储日志信息, 通知消息等有序且数据巨大的信息</li>\n<li>数据总线：kafka还适合在不同的存储系统和业务之间做数据总线, 这样可以方便的把一份数据传递给多方公用</li>\n</ol>\n<p><strong>优点</strong></p>\n<pre><code>1. 增加了partition层, 高度解耦, 支持分布式, 支持副本, 扩展方便\n2. 基于文件存储消息, 采用文件指针的读方式, 速度快, 且可重复读\n3. 保证多消费者情况下消息的有序性\n4. 在producer, broker, consumer三者做了大量性能优化,例如:`cache buff`和`sendfile()`等</code></pre><p>kafka的大部分分布式特性都得益于partition的设计,由于采用了文件集合来存储每一个partition,使得kafka在性能和有序性方面获得了巨大的优势</p>\n<p><strong>kafka作为消息队列的缺点</strong></p>\n<pre><code>1. 只有topic一个逻辑隔离级别\n2. 高并发依赖于partition数量限制, 扩展不是特别的方便\n3. 没有消息优先级机制\n4. 数据中心级别的数据同步不成熟\n5. 功能和数据存储系统没有隔离开</code></pre><p>同时也由于kafka的部分设计不可避免的有一些缺点</p>\n<p>由于partition的限制, 应对高并发场景, 如果需要加快一个topic的处理速度只能通过增加消费者的方式, 这个增加过程又不像其他内存式的消息队列来的方便</p>\n<p>相比于很多传统消息队列服务, kafka也没有消息优先级的机制</p>\n<p>kafka的竞争对手Apache Pulsar在后两点比kafka要更加优秀, 且在很多基础功能上提供了更多的选择性</p>\n<h1 id=\"kafka工作流程示意图\"><a href=\"#kafka工作流程示意图\" class=\"headerlink\" title=\"kafka工作流程示意图\"></a>kafka工作流程示意图</h1><p><img data-src=\"https://i.loli.net/2020/05/09/JaQFedmhsk175PS.png\" alt=\"kafka1.png\"></p>\n<p>kafka中的一个完整的消息流程如上图所示</p>\n<p>Producer将消息发给broker中的topic,存储到topic下的某一个partition</p>\n<p>Consumer从partition中消费数据,将该消费者在该topic中的数据偏移标记为最新</p>\n<h1 id=\"kafka为什么这么快\"><a href=\"#kafka为什么这么快\" class=\"headerlink\" title=\"kafka为什么这么快\"></a>kafka为什么这么快</h1><ol>\n<li>吞吐量和延迟</li>\n</ol>\n<p>吞吐量和延迟是一个kafka的平衡选择</p>\n<p>吞吐量大, 延迟就高, 延迟高, 吞吐量就小</p>\n<p>这个需要自己做抉择, kafka一定程度上选择了用牺牲延迟换吞吐量</p>\n<p>kafka在producer和broker中都使用了<code>cache buff</code>的方式来增加吞吐量</p>\n<ol start=\"2\">\n<li>零拷贝</li>\n</ol>\n<p>kafka的broker发送数据时采用零拷贝技术, 减少了一次内部的从用户态到内核态的状态切换过程, 使用<code>sendfile</code>将文件直接通过内存地址发送给网卡</p>\n<ol start=\"3\">\n<li>基于文件的追加方式</li>\n</ol>\n<p>kafka采用追加文件记录的形式来处理数据, 这种方式要比随机读写快上很多  </p>\n<ol start=\"4\">\n<li>buff发送</li>\n</ol>\n<p>对发送的文件进行了了缓冲区处理, 缓冲区满了以后或者到了一定时间才会发送数据</p>\n<p>相当于对发送信息做了批处理</p>\n<h2 id=\"kafka和ZooKeeper\"><a href=\"#kafka和ZooKeeper\" class=\"headerlink\" title=\"kafka和ZooKeeper\"></a>kafka和ZooKeeper</h2><p>kafka 使用zk存储一些关键配置信息</p>\n<p>如: 某个topic的消息总量, 每个partition的消费数据等信息,消费者消费的记录offset等都存储于zk</p>\n<p>许多的kafka监控应用也都是通过读取zk中的kafka数据来进行监控的</p>\n<blockquote>\n<p>ps: kafka新版本中已经允许客户端提交offset到kafka的topic中</p>\n</blockquote>\n<p>具体保存消息的节点路径如下图: </p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/8hymVr34eTK6ndq.jpg\" alt=\"kafka_zk.jpeg\"></p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/md1eiYFCEnIVBst.jpg\" alt=\"kafka_zk2.jpeg\"></p>\n<h1 id=\"kafka数据存储\"><a href=\"#kafka数据存储\" class=\"headerlink\" title=\"kafka数据存储\"></a>kafka数据存储</h1><p>kafka的数据存储大致分为三层, broker, partition, segment</p>\n<p>kafka配置文件中的 server.properties中的以下属性指明了kafka的数据存储位置</p>\n<p><code>log.dirs=/usr/local/var/lib/kafka-logs</code></p>\n<p>具体如下图:</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/2gVbKren4BGyxQ1.jpg\" alt=\"kafka_store.jpeg\"></p>\n<p>一个broker中虽然可以随处多个topic数据, 但是真正的存储还是要落实到 segment上<br>topic和partition只能决定存放segment的上层文件夹的名字</p>\n<h2 id=\"segment内的存储细节\"><a href=\"#segment内的存储细节\" class=\"headerlink\" title=\"segment内的存储细节\"></a>segment内的存储细节</h2><p><img data-src=\"https://i.loli.net/2020/05/09/AO3746RkVfgZiL2.jpg\" alt=\"kafka_segment.jpeg\"></p>\n<p>一个topic的一个partition拥有多个segment file, 每个segment file拥有多个部分 </p>\n<p>一般由以下四个类型文件组成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">xxx.index  \t\t\t\t\t\t//segment的索引文件</span><br><span class=\"line\">xxx.log    \t\t\t\t\t\t//segment的数据文件</span><br><span class=\"line\">xxx.timeindex            \t\t//segment的时间索引</span><br><span class=\"line\">leader-epoch-checkpoint   \t\t//检查点文件</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用kafka遇到的问题\"><a href=\"#使用kafka遇到的问题\" class=\"headerlink\" title=\"使用kafka遇到的问题\"></a>使用kafka遇到的问题</h1><p><strong>1.kafka的topic不消费</strong><br>原因：<br>topic中的消息容量是有限制的,假如短时间内某topic中进入了大量的消息<br>消费者来不及消费可能导致消费者的消费offset小于当前topic的最小消息偏移</p>\n<p>举例:<br>假如我们topic最大可以存储200万消息,消费者每分钟消费30万的消息<br>现在有个入消息的接口每分钟入100万的消息,那topic, consumer就会产生如下问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"topic\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"start\"</span>: <span class=\"number\">211450</span>, <span class=\"comment\">// 当前topic消息最小值</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"end\"</span>: <span class=\"number\">2211450</span>, <span class=\"comment\">// 当前topic的消息最大值</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"consumer\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"topic1\"</span>: <span class=\"number\">311450</span>, <span class=\"comment\">// 消费者在topic中的消费位置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 然后等了一分钟</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"topic\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"start\"</span>:<span class=\"number\">2211450</span>,<span class=\"comment\">// 当前最小的消息值</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"end\"</span>:<span class=\"number\">4211450</span>,<span class=\"comment\">// 当前最大的消息值</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"consumer\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"topic1\"</span>: <span class=\"number\">461450</span>, <span class=\"comment\">// 消费者当前的消费消息位置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说消费者的消费值在内存中的topic中找不到了.因为消息入得太快,消费者跟不上,当前消费消息,被”顶”出去了</p>\n<p>解决方案:</p>\n<ol>\n<li>可以手动设置消费者的消费位置,将其置为 当前topic中可以找到的消息偏移位置</li>\n<li>可以重新设置消费方式,这种方式也是变相将该消费者在该topic的消费位置重置</li>\n</ol>\n<p><strong>2.kafka的topic不能直接删除</strong></p>\n<p>原因: 因为要删除一个topic必须符合两个条件</p>\n<ol>\n<li>无消费者消费  </li>\n<li>文件中无消息记录,普通的删除只能删除文件中的消息记录,无法删除消费者得消费信息</li>\n</ol>\n<p>方案: 将该topic的所有消费者消费偏移置为0 ,然后执行删除，或者使用kafka tool工具可以直接删除</p>\n<p><strong>3.kafka的分片数据分布不均匀</strong></p>\n<p>原因: kafka早期的算法会根据key的hash值来对消息进行分配<br>如果没有key可能会被分配至随机的一个固定的partition中<br>这样会导致topic中的消息分布不均匀,</p>\n<p>方案: 1. 可以更改分配算法 2. 使用时间戳作为key的结尾 </p>\n<p><strong>4.kafka的消费者分组的使用</strong></p>\n<p>描述: 由于每个消费者分组中的topic只能被消费一次<br>kafka可以通过消费者分组来对某一topic中的数据进行重复消费<br>我们可以通过给不同部门设置消费者分组来实现类似订阅的机制</p>\n<p>举例: 我们有一个订单消息队列, topic为 <code>order-topic</code><br>我们可以通过给 订单部门和 物流部门 分配不同的消费者分组<br>来对同一个topic中的消息进行重复消费</p>\n<h1 id=\"Kafka的高级特性和流处理\"><a href=\"#Kafka的高级特性和流处理\" class=\"headerlink\" title=\"Kafka的高级特性和流处理\"></a>Kafka的高级特性和流处理</h1><ul>\n<li>kafka事务</li>\n</ul>\n<p>kafka现在已经支持事务, 这个是kafka一致性保证的重大进步</p>\n<p>kafka的事务目前还有一定的限制, 实现方式是使用 事务ID和客户端id做幂等处理</p>\n<p>kafka事务流程：</p>\n<ol>\n<li><p>生产者发起事务请求</p>\n</li>\n<li><p>发送消息</p>\n</li>\n<li><p>服务器接受数据,进行追加写入</p>\n</li>\n<li><p>生产者结束事务</p>\n</li>\n</ol>\n<p>如果客户端没有结束事务, kafka虽然将数据写入到了broker,但是不会让其他消费者客户端读到这部分数据</p>\n<p>这部分数据在kafka上会被标记为abort掉的数据</p>\n<ul>\n<li>kafka多版本混布</li>\n</ul>\n<p>kafka现在支持多个kafka版本混合部署, 可以同时使用1.0 和2.0 版本组建一个kafka集群</p>\n<ul>\n<li>流处理</li>\n</ul>\n<p>什么是流? 流一个无限持续的数据集，比如 用户的行为数据</p>\n<p>流处理的目的是尽可能的保证业务处理的实时性，就是事件一旦发生我们就希望立刻处理</p>\n<p>目前常见的流处理框架有 spark, storm, flink等，kafka streaming与他们相比显得更为轻量和易用</p>\n<p>流处理更像业务逻辑的一部分, 而不是业务的分拆, 是一个独立的微服务, 而不是MapReduce任务</p>\n<ul>\n<li>流处理的常用方法</li>\n</ul>\n<p>流处理常用的方法有 <code>filter /map /join /aggregate</code></p>\n<p>其中 <code>map/filter</code> 属于对单个数据进行的无状态操作</p>\n<p><code>join/aggregate</code> 属于数据统计需求, 有一定的状态要求</p>\n<p>此外还有<code>window函数</code>等</p>\n<p>kafka stream作为一个库的形式像我们提供了以上各种方法, 使得我们使用起来非常容易</p>\n<ul>\n<li>使用kafka streaming的一个场景</li>\n</ul>\n<p>例如在产品池项目中, 我们用 kafka stream 从canal的事件消息topic中接收数据  </p>\n<p>从中根据不同的消息内容将事件按照<code>库和表</code>发送给不同的后续topic, 达到了消息路由的功能  </p>\n<p>kafka stream将三个不同来源的topic中的待更新产品信息融合到同一个 待更新的产品信息Topic中  </p>\n<ul>\n<li>Kstream和Ktable</li>\n</ul>\n<p>kafka向我们提供了以下两个概念方便我们进行流处理</p>\n<ol>\n<li>KStream</li>\n</ol>\n<p>一个纯粹的流就是所有的更新都被解释成INSERT语句(因为没有记录会替换已有的记录)的表。</p>\n<p>在一个流中(KStream)，每个key-value是一个独立的信息片断，比如，用户购买流是：alice-&gt;黄油，bob-&gt;面包，alice-&gt;奶酪面包，我们知道alice既买了黄油，又买了奶酪面包。</p>\n<blockquote>\n<p>ps: 表中每条记录的变动就是一个流</p>\n</blockquote>\n<ol start=\"2\">\n<li>KTable(changelog流)</li>\n</ol>\n<p>KTable 一张表就是一个所有的改变都被解释成UPDATE的流(因为所有使用同样的key的已存在的行都会被覆盖)。</p>\n<p>对于一个表table( KTable)，是代表一个变化日志，如果表包含两对同样key的key-value值，后者会覆盖前面的记录，因为key值一样的，比如用户地址表：alice -&gt; 纽约, bob -&gt; 旧金山, alice -&gt; 芝加哥，意味着Alice从纽约迁移到芝加哥，而不是同时居住在两个地方。</p>\n<blockquote>\n<p>ps: 对某一时刻的流数据进行切面,按时间对数据进行覆盖,那个切面数据就是表</p>\n</blockquote>\n<p>这两个概念之间有一个二元性，一个流能被看成表，而一个表也可以看成流。</p>\n<p>我们一般用KStream来支持流式处理功能，同时使用KTable支持批处理功能作为补充，两者互相结合可以满足大部分的业务处理场景</p>\n<p>同时KTable 还提供了通过key查找数据值的功能，该查找功能可以用在Join等功能上。</p>\n<p>总的来说kafka streaming做为流式处理系统跟老牌的spark streaming/flink还有一定的差距，但是很适合轻量级的数据处理场景</p>\n<p>还是拥有一定的市场空间</p>\n","categories":["编程工具"],"tags":["Kafka"]},{"title":"分布式服务组内分享","url":"/2017-11-02-distribute-database-share-in-group/","content":"<p>这个是写给组内成员的分布式知识简单分享</p>\n<h1 id=\"什么是分布式\"><a href=\"#什么是分布式\" class=\"headerlink\" title=\"什么是分布式\"></a>什么是分布式</h1><p>什么是集群? 什么是分布式?<br>集群:   一个任务多个人可以做(实际是一个人做), 集群的主要目的是高可用, 通过冗余解决单点故障问题<br>分布式: 一个任务拆分成多个部分由多个机器来做, 解决业务解耦, 水平扩展和性能问题   </p>\n<p>几个典型的分布式系统:</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>数据分布方式</th>\n<th>故障转移</th>\n<th>底层存储</th>\n<th>节点类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>kafka</td>\n<td>消息系统</td>\n<td>broker-&gt;partition</td>\n<td>partition选举</td>\n<td>file</td>\n<td>对等节点</td>\n</tr>\n<tr>\n<td>redis</td>\n<td>缓存</td>\n<td>instance-&gt;shard</td>\n<td>sentinal选举</td>\n<td>memeory</td>\n<td>对等节点</td>\n</tr>\n<tr>\n<td>es</td>\n<td>搜索服务</td>\n<td>node-&gt;shard</td>\n<td>master选举和partition选举</td>\n<td>file</td>\n<td>对等节点</td>\n</tr>\n<tr>\n<td>Tidb</td>\n<td>数据库</td>\n<td>TiDB+TiKV+PD</td>\n<td>node选举</td>\n<td>file</td>\n<td>非对等节点</td>\n</tr>\n<tr>\n<td>hdfs</td>\n<td>文件系统</td>\n<td>namenode+datanode</td>\n<td>主从</td>\n<td>file</td>\n<td>非对等节点</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p> 节点类型：对等节点是说节点之间功能相似，非对等节点是说节点之间功能不同，无法互相取代</p>\n</blockquote>\n<h1 id=\"分布式要解决的常见问题\"><a href=\"#分布式要解决的常见问题\" class=\"headerlink\" title=\"分布式要解决的常见问题\"></a>分布式要解决的常见问题</h1><p>分布式要满足三个特性之二 CAP(C:一致性, P:分区容忍性, A:可用性)</p>\n<ul>\n<li>一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本），换句话就是说，任何时刻，所用的应用程序都能访问得到相同的数据。</li>\n<li>可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性），换句话就是说，任何时候，任何应用程序都可以读写数据。</li>\n<li>分区容错性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择，换句话说，系统可以跨网络分区线性的伸缩和扩展。</li>\n</ul>\n<p>CAP三个特性不可能同时满足, 只能同时满足两个特性<br>对大多数的分布式应用来说 CAP中的 P 是必不可少的<br>所以我们一般都会从CA中选取一个, 一般会选择CP 或者 AP   </p>\n<p>具体处理cap协议的方法如下图</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/bO1gZiWHtFBvKj2.jpg\" alt=\"cap.jpg\"></p>\n<h1 id=\"如何解决分区容忍性\"><a href=\"#如何解决分区容忍性\" class=\"headerlink\" title=\"如何解决分区容忍性\"></a>如何解决分区容忍性</h1><p>解决分区容忍性问题首先就是对数据进行分区或者叫分片</p>\n<p>分区手段有很多, 但大多分两种, hash分区和线性分区<br>系统将数据分为逻辑上的几个区块, 每个区块可以在多个机器上进行自由的部署和移动<br>这样就做到了将数据和机器进行隔离, 可以以分片为单位在不同机器上进行数据的移动和备份<br>但是这样在使用数据的时候就需要从多个分片同时获取数据进行合并<br>如果因为某些原因， 导致某些分片所在的节点出现故障， 此时我们就认为出现了网络分区，<br>分区容忍性要求在此种状况下，系统依然能对外提供有效服务 </p>\n<h2 id=\"Gossip\"><a href=\"#Gossip\" class=\"headerlink\" title=\"Gossip\"></a>Gossip</h2><p>使用者: Redis<br>Gossip协议是节点将自己的数据通知给集群内所有节点的协议, 但是不能做到数据一致性<br>Gossip只能保证可用性和分区容忍性</p>\n<p>如果对数据的分片进行备份, 同时将备份分布到多个不同的网络节点上, 这样即便部分数据分区不可用, 在可容忍的范围内只要不是该分区的所有数据分片都出问题, 还是能提供正常的数据服务  </p>\n<p>数据分片是分布式存储的基础, 数据分片好处很多    </p>\n<ol>\n<li>对数据分片可以使数据不受单机存储制约</li>\n<li>对数据分片可以通过多分区共同协作并行处理提高性能</li>\n<li>对分区数据进行冗余可以提高系统可用性</li>\n</ol>\n<p>但是数据分片和副本会带来一致性问题</p>\n<h1 id=\"如何保证数据一致性\"><a href=\"#如何保证数据一致性\" class=\"headerlink\" title=\"如何保证数据一致性\"></a>如何保证数据一致性</h1><h2 id=\"单节点的数据一致性\"><a href=\"#单节点的数据一致性\" class=\"headerlink\" title=\"单节点的数据一致性\"></a>单节点的数据一致性</h2><p>单节点如何保证数据一致性和完整性</p>\n<p>比如: 数据库索引的更新, B树在分裂过程中出现问题怎么办, </p>\n<p>一般处理单节点的一致性可以用 WAL(预写日志,或者叫redo日志) 或者 写时复制(copy on write)</p>\n<p>WAL就是先把操作追加到一个日志文件, 然后再对内存进行操作, lsm树中的memtable就是典型的使用这种方案</p>\n<p>写时复制就是先在其他地方把数据处理完毕, 最后直接修改数据引用, gfs的快照技术有使用类似的方案</p>\n<p>典型的例子是 修改B+树时预先生成一个小的B+树, 然后直接替换B+树上的节点指针</p>\n<h2 id=\"分布式的一致性\"><a href=\"#分布式的一致性\" class=\"headerlink\" title=\"分布式的一致性\"></a>分布式的一致性</h2><h3 id=\"主从一致性\"><a href=\"#主从一致性\" class=\"headerlink\" title=\"主从一致性\"></a>主从一致性</h3><p>目前业界的普遍做法是将分区的多个副本形成一个小组, 组内选举一个primary副本来执行写操作或确定写入顺序, 其他副本仅提供读操作或根本只提供备份功能, 这样对外部系统只有一个主副本做写入操作, 就可以保证数据写入的一致性</p>\n<p>如何从多个副本集合中选举主副本就涉及到共识算法（选主算法），常见的共识算法有 <code>Paxos</code>,<code>Raft</code>,<code>Zab协议</code>,<code>Bully</code> 等</p>\n<h3 id=\"NRW算法\"><a href=\"#NRW算法\" class=\"headerlink\" title=\"NRW算法\"></a>NRW算法</h3><p>NRW是一种特殊的保障一致性的算法, 通过饱和读取策略充分保证数据读取的一致性，具体详情如下:   </p>\n<pre><code>R(读取分片数) + W(写入分片数) &gt; N(节点总分片数)</code></pre><p>只要满足以上公式, 我们必然可以拿到一个正确分片的数据<br>举例: 我们对某个数据有5个分片, 我们只要保证 写入分片为3,读取分片为3,这样,我们必然可以保证读取的分片其中有一个含有最新的数据 </p>\n<h1 id=\"如何处理可用性\"><a href=\"#如何处理可用性\" class=\"headerlink\" title=\"如何处理可用性\"></a>如何处理可用性</h1><p>实现高可用一般都是通过节点或数据备份来实现, 采用主从或主备节点, 主节点或主分片不可用, 就采用副本分片或备份节点替代原有的服务</p>\n<h1 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h1><p>解决分布式事物要处理ACID 四个问题，常用如下方式</p>\n<ol>\n<li>2PC, 使用者: mysql, 两阶段提交协议</li>\n<li>3PC, 三阶段提交协议, 二阶段提交协议的优化</li>\n<li>TCC  事务补偿</li>\n</ol>\n<h1 id=\"使用经验\"><a href=\"#使用经验\" class=\"headerlink\" title=\"使用经验\"></a>使用经验</h1><h3 id=\"如何设置合理的分区和副本数量\"><a href=\"#如何设置合理的分区和副本数量\" class=\"headerlink\" title=\"如何设置合理的分区和副本数量\"></a>如何设置合理的分区和副本数量</h3><ol>\n<li>其实对于副本数量的设置一般取决于副本的用途</li>\n</ol>\n<p>如果你副本只做备份，不对外提供读取服务，那设置3个是比较理想的情况，因为3个副本足以覆盖副本所有的可能状态（可用，不可用，升级中），也就是说只要有3个副本， 就一定有一个副本处于可用状态</p>\n<p>如果副本同时提供读功能， 那可以酌情增加副本数量</p>\n<ol start=\"2\">\n<li>分片的设置</li>\n</ol>\n<p>其实针对不同的系统，不通的分片方式，分片设置有各自的考虑，不过一般受以下因素影响</p>\n<ul>\n<li>数据量</li>\n<li>分布节点数量</li>\n<li>使用者数量</li>\n<li>数据同步和网络开销</li>\n</ul>\n","categories":["计算机编程"],"tags":["分布式"]},{"title":"2018-追番-看书记录","url":"/2018-01-01-comic-book-2018/","content":"<h2 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h2><p>年度目标: <em>20本书以上</em></p>\n<h3 id=\"January\"><a href=\"#January\" class=\"headerlink\" title=\"January\"></a>January</h3><p>Done:</p>\n<ul>\n<li>Book</li>\n</ul>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> HTML5游戏开发实战</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 刻意练习</li>\n<li><input disabled=\"\" type=\"checkbox\"> PRINCIPLES(原则)</li>\n</ul>\n<ul>\n<li>Bangumi</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 鬼途奇行录</li>\n<li><input disabled=\"\" type=\"checkbox\"> 紫罗兰的永恒花园</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 少年锦衣卫第二季</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 画江湖之换世门生</li>\n<li><input disabled=\"\" type=\"checkbox\"> 狐妖小狐娘</li>\n</ul>\n<p>Plan:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 机器学习相关基础知识的学习</li>\n</ul>\n<h3 id=\"February\"><a href=\"#February\" class=\"headerlink\" title=\"February\"></a>February</h3><ul>\n<li>Book</li>\n</ul>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 计算机组成与操作系统</li>\n<li><input disabled=\"\" type=\"checkbox\"> 分布式服务架构</li>\n<li><input disabled=\"\" type=\"checkbox\"> 神经网络与深度学习</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 东方快车谋杀案</li>\n</ul>\n<ul>\n<li>Bangumi</li>\n</ul>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 冰菓</li>\n<li><input disabled=\"\" type=\"checkbox\"> 狐妖小红娘</li>\n<li><input disabled=\"\" type=\"checkbox\"> 紫罗兰的永恒花园</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Angel Beats</li>\n<li><input disabled=\"\" type=\"checkbox\"> 龙王的工作</li>\n</ul>\n<h3 id=\"March\"><a href=\"#March\" class=\"headerlink\" title=\"March\"></a>March</h3><ul>\n<li>Book</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 原则</li>\n<li><input disabled=\"\" type=\"checkbox\"> 月亮与六便士</li>\n</ul>\n<ul>\n<li>Bangumi</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 紫罗兰的永恒花园</li>\n<li><input disabled=\"\" type=\"checkbox\"> 鬼途奇行录</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 龙王的工作</li>\n</ul>\n<h3 id=\"April\"><a href=\"#April\" class=\"headerlink\" title=\"April\"></a>April</h3><ul>\n<li>Book</li>\n</ul>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 原则</li>\n<li><input disabled=\"\" type=\"checkbox\"> 神经网络与深度学习</li>\n<li><input disabled=\"\" type=\"checkbox\"> 大规模分布式存储系统</li>\n</ul>\n<ul>\n<li>Bangumi</li>\n</ul>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 紫罗兰永恒花园</li>\n<li><input disabled=\"\" type=\"checkbox\"> 鬼途奇行录</li>\n<li><input disabled=\"\" type=\"checkbox\"> 一人之下</li>\n<li><input disabled=\"\" type=\"checkbox\"> 狐妖小红娘</li>\n</ul>\n<h3 id=\"May\"><a href=\"#May\" class=\"headerlink\" title=\"May\"></a>May</h3><ul>\n<li>Book</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 大规模分布式存储系统</li>\n<li><input disabled=\"\" type=\"checkbox\"> 分布式实时处理系统</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 神经网络与深度学习</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 月亮与六便士</li>\n</ul>\n<ul>\n<li>Bangumi</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 鬼途奇行录</li>\n<li><input disabled=\"\" type=\"checkbox\"> 一人之下</li>\n<li><input disabled=\"\" type=\"checkbox\"> 没关系, 是爱情啊</li>\n</ul>\n<h3 id=\"June\"><a href=\"#June\" class=\"headerlink\" title=\"June\"></a>June</h3><ul>\n<li>Book</li>\n</ul>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 大规模分布式存储系统</li>\n<li><input disabled=\"\" type=\"checkbox\"> 大规模分布式系统架构与设计实战</li>\n</ul>\n<ul>\n<li>Bangumi</li>\n</ul>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 鬼途奇行录</li>\n</ul>\n<h3 id=\"July\"><a href=\"#July\" class=\"headerlink\" title=\"July\"></a>July</h3><ul>\n<li>Books</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 国富论</li>\n</ul>\n<ul>\n<li>Bangumi</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 海贼王</li>\n</ul>\n<h3 id=\"August\"><a href=\"#August\" class=\"headerlink\" title=\"August\"></a>August</h3><ul>\n<li>Books</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 国富论</li>\n</ul>\n<ul>\n<li>Bangumi</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 工作细胞</li>\n<li><input disabled=\"\" type=\"checkbox\"> 魔道祖师</li>\n</ul>\n<h3 id=\"Sep\"><a href=\"#Sep\" class=\"headerlink\" title=\"Sep\"></a>Sep</h3><ul>\n<li>Books</li>\n</ul>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 编码</li>\n</ul>\n<h3 id=\"Oct\"><a href=\"#Oct\" class=\"headerlink\" title=\"Oct\"></a>Oct</h3><ul>\n<li>Books</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 深入理解Java虚拟机</li>\n</ul>\n<h3 id=\"Nov\"><a href=\"#Nov\" class=\"headerlink\" title=\"Nov\"></a>Nov</h3><ul>\n<li>Books</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 深入理解Java虚拟机</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 大数据技术体系详解</li>\n<li><input disabled=\"\" type=\"checkbox\"> Designing Data-Intensive Application</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 走向分布式(Scalability)</li>\n<li><input disabled=\"\" type=\"checkbox\"> Spark大数据处理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Spark编程指南</li>\n</ul>\n<h3 id=\"Dec\"><a href=\"#Dec\" class=\"headerlink\" title=\"Dec\"></a>Dec</h3><ul>\n<li>Book</li>\n</ul>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 深入理解Java虚拟机</li>\n<li><input disabled=\"\" type=\"checkbox\"> Designing Data-Intensive Application</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> kafka权威指南</li>\n<li><input disabled=\"\" type=\"checkbox\"> Scala编程实战</li>\n</ul>\n<h2 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h2><p>图书: </p>\n<p>读完: 11本(技术类7本, 其他4本)<br>未完: 6本</p>\n","categories":["生活记录"]},{"title":"程序语言不是工具","url":"/2017-12-29-programming-languages-are-not-tools/","content":"<p>原作者： 王垠<br>原文： <a href=\"http://www.yinwang.org/blog-cn/2013/04/21/programming-languages-are-not-tools\" target=\"_blank\" rel=\"noopener\">http://www.yinwang.org/blog-cn/2013/04/21/programming-languages-are-not-tools</a></p>\n<h1 id=\"程序语言不是工具\"><a href=\"#程序语言不是工具\" class=\"headerlink\" title=\"程序语言不是工具\"></a>程序语言不是工具</h1><p>在谈论到程序语言的好坏的时候，总是有人说：程序语言只是一种工具。只要你的算法好，不管用什么语言都能写出一样好的程序。在本科第一堂编程课上，我的教授就这么对我们说。可是现在我却发现，这是一个根本错误的说法。</p>\n<p>我不知道这种说法确切的来源，然而昨天在浏览网页的时候，偶然发现了 C++ 的设计者 Bjarne Stroustrup 的一些类似的说法。这些说法来自于 2007 年 MIT Technology Review 对 Stroustrup 的采访。</p>\n<blockquote>\n<p>问：一个好的语言是什么样的？<br>Stroustrup：所有能帮助人们表达他们的想法的东西都会让语言更好。一个语言在一个好的工匠手里应该能胜任每天的任务。语言是否优美是次要的问题。被认为是丑陋的语言开发出来的有用的系统，比优美的语言开发出来的系统要多得多。</p>\n</blockquote>\n<blockquote>\n<p>问：优雅难道不重要吗？<br>Stroustrup：优雅很重要，可是你如何衡量”优雅”？可以表达问题答案的最少字数？我觉得我们应该看构造出来的应用程序的优雅程度，而不是语言自身的优雅程度。就像你不能把木工的一套复杂的工具（很多是危险的工具）叫做”优雅”一样。但是我的餐桌和椅子却真的很优雅，很美。当然，如果一个语言本身也很美，那当然最好。</p>\n</blockquote>\n<h2 id=\"一些基本的错误\"><a href=\"#一些基本的错误\" class=\"headerlink\" title=\"一些基本的错误\"></a>一些基本的错误</h2><p>对这两个回答，我都不满意，我觉得这只是他对于 C++ 的恶劣设计的借口而已。下面我对其中几个说法进行质疑：</p>\n<p>所有能帮助人们表达他们的想法的东西都会让语言更好。</p>\n<p>作为一个程序语言，并不是好心想”帮助人”就可以说是好的。如果是这样的话，那么我就可以把所有国家的脏话都加到你的语言里面，因为它们可以帮助我们骂人。</p>\n<p>被认为是丑陋的语言开发出来的有用的系统，比优美的语言开发出来的系统要多得多。</p>\n<p>系统的数量再多也不能说明这个语言好。正好相反，众多的系统由于语言的一些设计失误，把人们的生命置于危险之中，这说明了这个语言的危害性之大。一种像炸药一样的语言，用的人越多越是危险。</p>\n<h2 id=\"语言不是工具，而是材料\"><a href=\"#语言不是工具，而是材料\" class=\"headerlink\" title=\"语言不是工具，而是材料\"></a>语言不是工具，而是材料</h2><p>我这篇文章想说的最关键的部分，其实是他所支持的”语言工具论”的错误。</p>\n<p>Stroustrup 说：</p>\n<p>我觉得我们应该看构造出来的应用程序的优雅程度，而不是语言自身的优雅程度。就像你不能把木工的一套复杂的工具（很多是危险的工具）叫做”优雅”一样。但是我的餐桌和椅子却很优雅，很美。</p>\n<p>他的言下之意就是把程序语言比作木工的工具，而餐桌也椅子就是这些工具做出来的产品。比方的威力是很大的，很多人一见到大牛给出这么形象的比方，想都不用想就接受了。如果你不仔细分析的话，这貌似一个恰当的比方，然而经过仔细推敲，这却是错误的比方。这是因为程序语言其实不是一种”工具”，而是一种”材料”。</p>\n<p>木工不会把自己的锯子，墨线等东西放进餐桌和椅子里面，而程序员却需要把语言的代码放到应用程序里面。虽然这些程序经过了编译器的转化，但是程序本身却仍然带有语言的特征。这就像一种木材经过墨线和锯子的加工，仍然是同样的木材。一个 C++ 的程序在编译之后有可能产生内存泄漏和下标越界等低级错误，而更加安全的语言却不会出现这个问题。</p>\n<p>所以在这个比方里面，程序语言所对应的应该是木工所用的木料，钉子和粘胶等”材料”，而不是锯子和墨线等”工具”。这些材料其实随着应用程序一起，到了用户的手里。那么对应木工工具的是什么呢？是 Emacs, vi, Eclipse, Visual Studio 等编程环境，以及各种编译器，调试器，make，界面设计工具，等等。这些真正的”工具”丑一点，真的暂时无所谓。</p>\n<p>现在你还觉得程序语言的优雅程度是次要的问题吗？一个复杂而不安全的语言就像劣质的木料和粘胶。它不但会让餐桌和椅子的美观程度大打折扣，而且会造成它们结构的不牢靠，以至于威胁到用户的生命安全。同时它还可能会造成木工的工作效率低下以及工伤的产生。</p>\n<p>这也许就是为什么我的一个同事说，他看 C++ 代码的时候都会带上 OSHA（美国职业安全与健康管理局）批准的护目镜。</p>\n","categories":["计算机编程"],"tags":["编程语言"]},{"title":"分布式文件系统-GFS学习总结","url":"/2018-02-02-distribute-storage-gfs/","content":"<p>GFS是谷歌的底层文件系统</p>\n<h1 id=\"GFS简介\"><a href=\"#GFS简介\" class=\"headerlink\" title=\"GFS简介\"></a>GFS简介</h1><p>GFS(Google File System)是谷歌开发的一个分布式文件系统, 目的是提供一个基于众多廉价服务器工作的基础层分布式的文件存储服务</p>\n<p>GFS服务的是上层的<code>Bigtable</code>, <code>Megastore</code>等上层数据库应用，所以GFS的读写基本都是其他应用的大文件批量数据读写</p>\n<p>Google于2003年放出了GFS的设计论文</p>\n<p>论文地址 <a href=\"https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/gfs-sosp2003.pdf\" target=\"_blank\" rel=\"noopener\">The Google File System</a></p>\n<h1 id=\"GFS的特点\"><a href=\"#GFS的特点\" class=\"headerlink\" title=\"GFS的特点\"></a>GFS的特点</h1><ol>\n<li>仅支持文件追加操作 (适用于谷歌的爬虫数据存储需求)</li>\n<li>文件块大小为64M (优点很多, 减少元数据量, 减低master服务器压力, 缺点也有)</li>\n<li>采用中心化的master节点管理元数据 (可能造成单点故障和性能存储瓶颈)</li>\n<li>基于廉价服务器实现高容错高可用</li>\n</ol>\n<h1 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h1><p>GFS的核心服务分为三个部分</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/jB41UqSaMQwFWZc.jpg\" alt=\"1334712344_6225.jpg\"></p>\n<p>GFS采用中心化的管理方式,Client作为应用使用方,Master作为ChunkServer的管理者,ChunkServer来负责数据的存储,client与master进行交互获取控制信息,然后与对应的ChunkServer交互获取具体的数据</p>\n<ol>\n<li><p>Client</p>\n<p> Client就是各种应用中使用GFS的客户端,以库文件的形式提供</p>\n</li>\n<li><p>MasterServer</p>\n<p> MasterServer相当于对ChunkServer数据进行管理的管理者,存储整个文件传统的目录结构和文件元信息(包括Chunk分片信息和分片位置),Client从Master获取到具体的文件所在的ChunkServer的地址,然后直接与ChunkServer通信进行数据操作</p>\n</li>\n<li><p>ChunkServer</p>\n<p> 存储具体文件数据的服务器</p>\n</li>\n</ol>\n<h1 id=\"内部数据管理机制\"><a href=\"#内部数据管理机制\" class=\"headerlink\" title=\"内部数据管理机制\"></a>内部数据管理机制</h1><h2 id=\"Master数据存储\"><a href=\"#Master数据存储\" class=\"headerlink\" title=\"Master数据存储\"></a>Master数据存储</h2><p>MasterServer中存储3类信息:</p>\n<ol>\n<li>文件系统的命名空间,整个文件系统的目录结构和Chunk基本信息</li>\n<li>文件与Chunk的映射关系</li>\n<li>Chunk副本的位置信息,默认每个Chunk使用3个副本</li>\n</ol>\n<p>由于MasterServer采用中心化的单节点管理,所以MasterServer的内存使用和性能都是我们要关注的点:</p>\n<pre><code>假设要存储1Pb的数据 MasterServer的内存使用为 \n\n(1P * 64b * 3) / 64Mb = 3Gb\n\n1P  : 是总数据大小\n64Mb: 是每个Chunk的容量\n3   : 是Chunk备份数量,默认为3\n64b : 是每个Chunk的元属性所占的空间</code></pre><h2 id=\"ChunkServer存储的数据\"><a href=\"#ChunkServer存储的数据\" class=\"headerlink\" title=\"ChunkServer存储的数据\"></a>ChunkServer存储的数据</h2><p>ChunkServer中存储Chunk的具体文件内容</p>\n<p>GFS将每个Chunk限制为64M, Chunk内部又分为众多的Block</p>\n<p>同时ChunkServer还负责进行具体每个Chunk文件的读写操作, 接受并执行每个主Chunk(租约Chunk)的指令</p>\n<p>ChunkServer还需要定时与master进行心跳同步，上报自己持有的运行状态和维护的chunk信息</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>由于GFS是由众多的廉价服务器组成的系统,所以系统的负载问题就是十分重要</p>\n<p>GFS会根据每个服务器的负载和最近操作数来决定新数据的分布,以保证数据分布的均匀</p>\n<p>一般有三个基本原则</p>\n<ol>\n<li>同一个Chunk的多个副本不会放在同一个机架</li>\n<li>ChunkServer最近操作数有一定的限制</li>\n<li>优先选择磁盘负载较低的服务器</li>\n</ol>\n<p>第二点十分重要但时常被忽略,如果没有第二条规则限制, 很容易出现新加的机器由于负载过低导致短时间内大量数据都往这个机器上操作, 导致新添加的机器被压垮</p>\n<p>ChunkServer启动时会向MasterServer上报存储的文件信息,也会周期性的向MasterServer上报自己的服务器状态, 以此来保证master上的ChunServer信息保持更新, 并及时发现ChunkServer的故障</p>\n<h2 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h2><p>GFS采用标记回收的方式处理,删除一个文件之后,GFS并不会立即要求归还可用的物理空间,而是在元数据中将文件表示为一个不可用的隐藏名字,标记一个删除的时间戳</p>\n<p>Master定时检查,文件被删除超过一定时间,Master会删除文件的元数据信息,之后在与ChunkServer交互时通知ChunkServer删除对应的Chunk信息,ChunkServer来处理后续的存储释放</p>\n<p>过期的Chunk也是通过垃圾回收机制来进行删除</p>\n<h2 id=\"快照\"><a href=\"#快照\" class=\"headerlink\" title=\"快照\"></a>快照</h2><p>一但对一个文件采取快照, GFS会通过租约机制先停止所有Chunk的写操作, 更新所有Chunk副本的引用计数</p>\n<p>然后之后的写请求在执行时会copy一个Chunk副本,后续的修改都会落到新的Chunk上面</p>\n<p>例如:</p>\n<p>对文件 f 执行快照生成 f_back , f在GFS中有三个Chunk: C1,C2,C3 </p>\n<p>Master首先会回收C1,C2,C3的写租约,从而保证此时的f状态一致,然后Master复制 f的元数据生成一个新的文件 f_back</p>\n<p>此时f_back的 Chunk仍然指向 C1,C2,C3. 快照之前, C1,C2,C3只被一个文件引用,引用计数为1, 快照之后引用技术更新为2</p>\n<p>当客户端向C3增加数据时,Master发现c3引用计数超过1,会通知ChunkServer生成新的C3’, 新的操作也会在C3’上面进行</p>\n<p>f的Chunk映射也会更新为 C1,C2,C3’</p>\n<blockquote>\n<p>ps: 这个机制叫写时复制(Copy On Write)</p>\n</blockquote>\n<h1 id=\"读写数据的流程\"><a href=\"#读写数据的流程\" class=\"headerlink\" title=\"读写数据的流程\"></a>读写数据的流程</h1><h2 id=\"读取流程\"><a href=\"#读取流程\" class=\"headerlink\" title=\"读取流程\"></a>读取流程</h2><p>GFS中的文件读取流程大致如下:</p>\n<pre><code>1. client发送给master需要获取的文件名和偏移量(告诉服务器我要读某文件的某段数据)\n2. master根据文件名查找命名空间中的文件对应的文件块id,返回对应的ChunkServer和副本的位置\n3. client根据返回的ChunkServer的位置信息去对应的Chunk上面取对应的数据</code></pre><blockquote>\n<p>ps: client会缓存一部分的ChunkServer元信息(某个ChunkServer在某个机器上面,副本分布情况等),但并不会缓存具体的文件内容, 以此降低Master服务器的负载, ChunkServer会对服务器的请求进行校验, 当ChunkServer信息有变动时, 客户端如果使用过期的Chunk信息, 能从ChunkServer得到反馈, 重新去Master获取最新的Chunk信息</p>\n</blockquote>\n<h2 id=\"数据的写\"><a href=\"#数据的写\" class=\"headerlink\" title=\"数据的写\"></a>数据的写</h2><p>GFS中写入数据的流程如下:</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/J5EbuqjnQHvRUIf.jpg\" alt=\"1334931385_9113.jpg\"></p>\n<p>master使用租约授权一个chunk副本为primary副本,执行client的写操作</p>\n<ol>\n<li>client需要更新一个数据块，询问master谁拥有该数据块的租约（谁是primary）；</li>\n<li>master将持有租约的primary和其它副本的位置告知client，client缓存之；</li>\n<li>client向所有副本传输数据，这里副本没有先后顺序，根据网络拓扑情况找出最短路径，数据从client出发沿着路径流向各个chunkserver，这个过程采用流水线（网络和存储并行）。chunkserver将数据放到LRU缓存；</li>\n<li>一旦所有的副本都确定接受数据，client向primary发送写请求，primary为这个前面接受到的数据分配序列号（primary为所有的写操作分配连续的序列号表示先后顺序），并且按照顺序执行数据更新；</li>\n<li>primary将写请求发送给其它副本，每个副本都按照primary确定的顺序执行更新；</li>\n<li>其它副本向primary汇报操作情况；</li>\n<li>primary回复client操作情况，任何副本错误都导致此次请求失败，并且此时副本处于不一致状态（写操作完成情况不一样）。client会尝试几次3到7的步骤，实在不行就只能重头来过了</li>\n</ol>\n<p>也就是说GFS也是使用持有租约的primary副本来进行一致性保证， 其他所有副本均按照primary确定的写入顺序执行</p>\n<h1 id=\"故障恢复和容错机制\"><a href=\"#故障恢复和容错机制\" class=\"headerlink\" title=\"故障恢复和容错机制\"></a>故障恢复和容错机制</h1><h2 id=\"快速恢复\"><a href=\"#快速恢复\" class=\"headerlink\" title=\"快速恢复\"></a>快速恢复</h2><p>GFS能使用checkpoint 文件和日志文件快速进行故障的恢复</p>\n<h2 id=\"副本复制\"><a href=\"#副本复制\" class=\"headerlink\" title=\"副本复制\"></a>副本复制</h2><p>GFS通过副本进行数据备份， 只要一个chunk有一个副本所在的机器存活，数据就可以恢复</p>\n<h2 id=\"Matser的容错\"><a href=\"#Matser的容错\" class=\"headerlink\" title=\"Matser的容错\"></a>Matser的容错</h2><p>Master会进行远程备份，Master存储文件的信息有</p>\n<ol>\n<li>文件的命名空间信息(整个文件系统的目录)</li>\n<li>Chunk服务器和文件名的映射关系</li>\n<li>Chunk服务器的地址和副本信息</li>\n</ol>\n<p>对于前两种操作GFS通过操作日志提供容错,日志会被被分到远程服务器<br>最后一种保存在ChunkServer上, 当ChunkServer跟master注册时,或者Master启动时,使用轮询的方式去ChunkServer获取元数据</p>\n<h2 id=\"ChunkServer的容错\"><a href=\"#ChunkServer的容错\" class=\"headerlink\" title=\"ChunkServer的容错\"></a>ChunkServer的容错</h2><ol>\n<li>每个Chunk默认拥有3个副本, 分布在不同的ChunkServer上面</li>\n<li>ChunkServer在发送数据之前会检查block的32的校验和,如果不一致就会上报Master,Master会从其他副本进行复制,并删除出错的副本数据</li>\n</ol>\n<blockquote>\n<p>ps：为什么是默认3个副本呢，是因为副本的分布要同时满足性能和安全性需求，也就是同一机架放两个副本，另一副本放到另一机架，平衡安全性和速度。<br>同时三个副本正好能覆盖chunk所有的可能存在的状态，1. 正常获得租约状态 2. 租约到期，进行转换  3. 作为其他chunk的副本 </p>\n</blockquote>\n<h1 id=\"其他优化的点\"><a href=\"#其他优化的点\" class=\"headerlink\" title=\"其他优化的点\"></a>其他优化的点</h1><ul>\n<li>文件树存储</li>\n</ul>\n<p>由于master需要存储所有的文件树和块的对应关系，采用了前缀树进行数据压缩，大大提高了可存储数据的容量</p>\n<ul>\n<li>高并发热点文件的读写</li>\n</ul>\n<p>GFS采用副本机制和错峰控制来处理热点文件的高并发读写，同时提出了一种长效解决方案：允许客户端读取客户端数据，形成客户端链</p>\n<ul>\n<li>为什么要采用中心化的服务</li>\n</ul>\n<p>为了简化系统设计，保持灵活性</p>\n<ul>\n<li>读数据时候的数据流</li>\n</ul>\n<p>GFS写入数据的时候客户端并不是采用星型或者树形结构，同时持有多个副本的链接并向副本发送数据，而是经过了一定的拓扑优化<br>客户端会将数据发送给离自己最近的节点s1，同时该节点会继续将数据发送给离自己最近的节点s2，没一个节点都发送给离自己最近同时又没有接受数据的节点，以其充分利用机器的带宽</p>\n<blockquote>\n<p>ps: 这个问题有点像旅行商问题</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>GFS是一个中心化的分布式文件系统, 文件的具体信息分块存储, 同一文件可能被分为多个Chunk块, 每个Chunk块有多个副本</li>\n<li>Master负责文件的元数据的管理, ChunkServer负责文件具体数据的管理</li>\n<li>Client读数据需要先从Matser处获取到文件的Chunk分布信息, 然后去对应的ChunkServer上取得真正的文件数据</li>\n<li>Client写数据会先跟Master交互获取Chunk文件的信息, 然后向所有Chunk副本发送文件数据流, 最后向PrimaryChunk发送写入控制流, 由PrimaryChunk通知其他Chunk副本执行真正的写操作</li>\n<li>GFS可以以Chunk为单位在不同机器之间调度数据分布, 还有 CheckPoint和Redo日志来处理容错性</li>\n</ol>\n","categories":["编程工具"],"tags":["GFS"]},{"title":"学习分布式计算框架-MapReduce","url":"/2018-02-08-distribute-map-reduce/","content":"<p>Google背后的索引计算工作是搜索引擎的核心之一, Google现有的搜索引擎是基于Caffeine的增量索引系统构建的,Google后续的一系列大数据计算引擎都是基于MapReduce的思想构建出来的</p>\n<h1 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h1><p>在2004年google发布了一篇论文, 描述了google内部针对大数据处理的一种通用模式:MapReduce</p>\n<p>MapReduce是一种编程模型,主要用来对大量的数据进行分布式处理和计算,很多常见的数据处理任务都可以被拆分为符合mapreduce模型的编程过程,MapReduce主要过程分为Map和Reduce两个过程</p>\n<p>论文地址:<a href=\"https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf\" target=\"_blank\" rel=\"noopener\">MapReduce论文</a></p>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>Map是一个将问题分解成多个小问题为后续的分发提供基础的技术</p>\n<p>Map的过程用函数来表示就是:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>(k,v) = (k1,v1&lt;<span class=\"built_in\">list</span>&gt;)</span><br><span class=\"line\"><span class=\"comment\">// map函数接收一对k,v键值对,返回一个(k1,v1&lt;list&gt;)</span></span><br></pre></td></tr></table></figure>\n\n<p>map函数的目的是为了将任务分割方便后续的任务合成</p>\n<h2 id=\"Reduce\"><a href=\"#Reduce\" class=\"headerlink\" title=\"Reduce\"></a>Reduce</h2><p>Reduce是将多个k-v pair按照相同的k进行合并的过程</p>\n<pre><code>reduce(k,v2&lt;list&gt;) = (v3&lt;list&gt;)\n// reduce函数接收一个k,v1&lt;list&gt;, 返回一个v2&lt;list&gt;</code></pre><blockquote>\n<p>ps:大多数情况下map的返回结果不能直接用于reduce函数,需要特殊处理一下</p>\n</blockquote>\n<h2 id=\"过程图\"><a href=\"#过程图\" class=\"headerlink\" title=\"过程图\"></a>过程图</h2><p>以下是一个很详细的对MongoDB中的MapReduce过程的解读图</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/4lu5Ek2yZDi7doF.png\" alt=\"map-reduce.png\"></p>\n<p>我们可以看到map函数的输入是多个被查询过滤过的文档集合,返回值是一个map对应的值列表,我们可以认为map函数式对所有符合条件的数据进行一次简单的处理</p>\n<p>reduce则是将这个值列表按照key进行处理,即对map的结果进行最终结果操作</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>我们用一个实际的问题来描述MapReduce的思想</p>\n<p>假设我们有一个文件集合(C),里面包含M个文档,我们要对文件集合中的文档进行单词次数统计,统计在所有文档中的每个单词出现的次数</p>\n<p>可以用以下过程描述:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>(String key, String value): <span class=\"comment\">// key: document name</span></span><br><span class=\"line\">    <span class=\"comment\">// value: document contents for each word w in value:</span></span><br><span class=\"line\">    EmitIntermediate(w, <span class=\"string\">\"1\"</span>);<span class=\"comment\">// 该函数返回一个[(\"to\",1),(\"yours\",12)]这样的列表数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">reduce(String key, Iterator values): <span class=\"comment\">// key: a word eg: \"t1\"</span></span><br><span class=\"line\">    <span class=\"comment\">// values: a list of counts 示例: [1,2,3]</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> each v in values:</span><br><span class=\"line\">      result += ParseInt(v);</span><br><span class=\"line\">    Emit(AsString(result)); <span class=\"comment\">// 该函数同样返回一个[(\"to\",1),(\"yours\",12)]的数据</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码-单机版\"><a href=\"#代码-单机版\" class=\"headerlink\" title=\"代码(单机版)\"></a>代码(单机版)</h2><p>以下是使用mapreduce进行文档词频统计的示例代码</p>\n<p>其中的主要代码简单解释一下</p>\n<h3 id=\"MapReduce类\"><a href=\"#MapReduce类\" class=\"headerlink\" title=\"MapReduce类\"></a>MapReduce类</h3><p><code>MapReduce</code>类是一个通用的MapReduce框架,理论上任意MapReduce任务都可以套用这个框架</p>\n<p>要处理不同的问题我们只需要修改对应的map和reduce函数即可</p>\n<p>MapReduce类接收3个参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">i:       要处理的数据源,格式是一个普通的字典; </span><br><span class=\"line\">mapper:  映射函数,该函接收一个kv键值对,根据需要对每个v值进行处理,返回一个(k,v&lt;list&gt;),此处的k值并不一定是传入的k值; </span><br><span class=\"line\">reducer: 压缩函数,接收一个(k,v&lt;list&gt;),根据需求对数据进行压缩合并;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"map函数\"><a href=\"#map函数\" class=\"headerlink\" title=\"map函数\"></a>map函数</h3><p>其中<code>get_most_common_from_text</code>使用了结巴分词插件</p>\n<p>参数:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">k:\"a\"</span><br><span class=\"line\">v:\"The quick brown fox jumped over the lazy grey dogs.\"</span><br></pre></td></tr></table></figure>\n\n<p>返回:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  (<span class=\"string\">\"the\"</span>,<span class=\"number\">1</span>),</span><br><span class=\"line\">  (<span class=\"string\">\"quick\"</span>,<span class=\"number\">1</span>),</span><br><span class=\"line\">  (<span class=\"string\">\"fox\"</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reduce函数\"><a href=\"#reduce函数\" class=\"headerlink\" title=\"reduce函数\"></a>reduce函数</h3><p>参数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">k:<span class=\"string\">\"the\"</span></span><br><span class=\"line\">v&lt;list&gt;:[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>返回: </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[(<span class=\"string\">\"the\"</span>,<span class=\"number\">3</span>),(<span class=\"string\">\"quick\"</span>:<span class=\"number\">1</span>)...]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapReduce</span>:</span></span><br><span class=\"line\">    __doc__ = <span class=\"string\">'''提供map_reduce功能'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">map_reduce</span><span class=\"params\">(i, mapper, reducer)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        map_reduce方法</span></span><br><span class=\"line\"><span class=\"string\">        :param i: 需要MapReduce的集合</span></span><br><span class=\"line\"><span class=\"string\">        :param mapper: 自定义mapper方法</span></span><br><span class=\"line\"><span class=\"string\">        :param reducer: 自定义reducer方法</span></span><br><span class=\"line\"><span class=\"string\">        :return: 以自定义reducer方法的返回值为元素的一个列表</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        intermediate = []  <span class=\"comment\"># 存放所有的(intermediate_key, intermediate_value)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (key, value) <span class=\"keyword\">in</span> i.items():</span><br><span class=\"line\">            intermediate.extend(mapper(key,value))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># sorted返回一个排序好的list，因为list中的元素是一个个的tuple，key设定按照tuple中第几个元素排序</span></span><br><span class=\"line\">        <span class=\"comment\"># groupby把迭代器中相邻的重复元素挑出来放在一起,key设定按照tuple中第几个元素为关键字来挑选重复元素</span></span><br><span class=\"line\">        <span class=\"comment\"># 下面的循环中groupby返回的key是intermediate_key，而group是个list，是1个或多个</span></span><br><span class=\"line\">        <span class=\"comment\"># 有着相同intermediate_key的(intermediate_key, intermediate_value)</span></span><br><span class=\"line\">        groups = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, group <span class=\"keyword\">in</span> itertools.groupby(sorted(intermediate, key=<span class=\"keyword\">lambda</span> im: im[<span class=\"number\">0</span>]), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>]):</span><br><span class=\"line\">            groups[key] = [y <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> group]</span><br><span class=\"line\">        <span class=\"comment\"># groups是一个字典，其key为上面说到的intermediate_key，value为所有对应intermediate_key的intermediate_value</span></span><br><span class=\"line\">        <span class=\"comment\"># 组成的一个列表</span></span><br><span class=\"line\">        <span class=\"comment\"># print(groups)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [reducer(intermediate_key, groups[intermediate_key]) <span class=\"keyword\">for</span> intermediate_key <span class=\"keyword\">in</span> groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_most_common_from_text</span><span class=\"params\">(self,text,n = <span class=\"number\">100</span>)</span>:</span></span><br><span class=\"line\">        word_list = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> jieba.cut(text) <span class=\"keyword\">if</span> len(x) &gt;= <span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Counter(word_list).most_common(n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">map</span><span class=\"params\">(self,k,v)</span>:</span> <span class=\"comment\"># k:文档名, v:文档内容</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.get_most_common_from_text(v,<span class=\"number\">10000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reducer</span><span class=\"params\">(self,k,v)</span>:</span> <span class=\"comment\"># k:词  v:词出现的次数</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> k, sum(v)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        i = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"a\"</span>:<span class=\"string\">\"The quick brown fox jumped over the lazy grey dogs.\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"b\"</span>:<span class=\"string\">\"That's one small step for a man, one giant leap for mankind.\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"c\"</span>:<span class=\"string\">\"　　Mary had a little lamb,Its fleece was white as snow;And everywhere that Mary went,The lamb was sure to go\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"d\"</span>:<span class=\"string\">\"I pledge to honor and defend you and yours above all others\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"e\"</span>:<span class=\"string\">\"To share in blessings and burdens, to be your advocate, your champion\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        t = MapReduce.map_reduce(i,self.map,self.reducer)</span><br><span class=\"line\">        print(t)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">m = test()</span><br><span class=\"line\">m.run()</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MapReduce其实就是我们常说的分而治之的思想</p>\n<p>不过这个过程中借助了中间存储</p>\n<p>统一了数据模型规范, 使之能适用于更广泛的数据计算</p>\n","categories":["编程工具"],"tags":["MapReduce"]},{"title":"使用Bitmap来存储海量用户标签系统","url":"/2017-12-29-user-tag-sys-on-bitmap/","content":"<h1 id=\"用户标签的存储方案\"><a href=\"#用户标签的存储方案\" class=\"headerlink\" title=\"用户标签的存储方案\"></a>用户标签的存储方案</h1><h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>我们在日常的工作中经常遇到这种场景</p>\n<p>对一个用户添加许多的标签信息方便对用户身份进行搜索和精细化运营</p>\n<blockquote>\n<p>ps:本文我们不考虑用户身上的标签是怎么来的,只讨论用户已经拥有标签的情况下怎么进行存储</p>\n</blockquote>\n<h1 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h1><p>我们给用户做标签的目的是为了支持更加精细化的运营,算是用户画像的一部分,用户的标签来源可能跟消费,登录,浏览等记录都有关系</p>\n<p>我们要做的是可以根据用户身上已经存在的标签,筛选出来符合我们需求的用户</p>\n<p>我们可以在大量的标签中查找具有某一些标签的用户,或者获取某用户身上的所有标签</p>\n<p>我们如果要满足以上的需求, 需要提供以下几个基本接口来方便进行数据查找</p>\n<ol>\n<li>查找某标签的所有用户以及非该标签的用户</li>\n<li>查找某个用户身上的所有标签</li>\n<li>判断某个用户是否有某个标签</li>\n</ol>\n<p>一般来说对以上需求,对于用户和用户身上的标签数据,如果我们采用数据库来进行存储</p>\n<p>可能会采用以下方式(为了方便我们模拟了7个用户,7个标签,以下测试都基于该假数据),例如:</p>\n<ol>\n<li>使用字段标识标签信息</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">name</th>\n<th align=\"left\">vip</th>\n<th align=\"left\">mobile</th>\n<th align=\"left\">email</th>\n<th align=\"left\">male</th>\n<th align=\"left\">mac</th>\n<th align=\"left\">supervip</th>\n<th align=\"left\">lost</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">小明</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">小花</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">小江</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">小红</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">小九</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">小七</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">小四</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n<td align=\"left\">1</td>\n</tr>\n</tbody></table>\n<p>或者是这样</p>\n<ol start=\"2\">\n<li>使用记录标识标签信息</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">tag</th>\n<th align=\"left\">uid</th>\n<th align=\"left\">result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">vip</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">mobile</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">email</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">male</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">mac</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">supervip</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">lost</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">vip</td>\n<td align=\"left\">2</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">mobile</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">email</td>\n<td align=\"left\">2</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">male</td>\n<td align=\"left\">2</td>\n<td align=\"left\">0</td>\n</tr>\n</tbody></table>\n<p>以上两种方式功能上都可以达到我们想要的效果,但第一种方式在标签数量非常多的时候明显是不合适的,我们不可能给每个标签都添加一个字段,那样性能和扩展性都损失非常大</p>\n<p>在上面的两个表中第二个表相当于对第一个表进行了拆分,增强了标签的扩展性.如果我们采用第二种方式存储,对于上面的需求 1,2,3 都能很好的满足</p>\n<p>但是方式2依然有两个可能遇到的问题</p>\n<ol>\n<li>我们要查找在某一些标签的用户需要使用如下sql</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">    uid </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">    tag_table </span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">    <span class=\"keyword\">result</span> = <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"keyword\">and</span> tag <span class=\"keyword\">in</span> (<span class=\"string\">'vip'</span>,<span class=\"string\">'mobile'</span>,<span class=\"string\">'email'</span>,<span class=\"string\">'male'</span>,<span class=\"string\">'supervip'</span>,<span class=\"string\">'lost'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这样的语句在标签数万甚至数十万的时候对性能影响会非常大</p>\n<ol start=\"2\">\n<li>存储: 因为每个行记录同时标明了用户,标签,和结果, 所以其中的重复数据非常的多,对数据库存储是个极大地浪费</li>\n</ol>\n<h1 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h1><h2 id=\"Bitmap的概念\"><a href=\"#Bitmap的概念\" class=\"headerlink\" title=\"Bitmap的概念\"></a>Bitmap的概念</h2><p>Bitmap 翻译做中文称为”位图”, 其核心里面是充分利用一部分数据本身就存在的元属性(空间/位置/容量)信息,我们这李主要是使用其中的每一位的位置信息,达到使用一个信息表达两种含义的作用</p>\n<p>其实就也是一种特殊的编码(coding)过程(或者叫多工(multiplex))</p>\n<h2 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h2><p>bitmap可以用来有效解决两类问题</p>\n<ol>\n<li>存储大量值可以用布尔值标识的数据</li>\n<li>部分有用到交,并,差等集合运算的数据</li>\n</ol>\n<p>第一个特性主要是利用位存储的节省空间的特性,第二个是利用计算机位运算比较快速的特性</p>\n<p>eg: </p>\n<ol>\n<li><p>以前的搜索引擎爬虫在处理网页爬取的时候需要给已经爬取过的网页做标记,避免陷入死循环的重复爬取,当时的搜索网站的爬虫就有一些采用过bitmap来给爬取过的网页做标记,大致就是取页面的url取hash,然后处理成数字,把对应的数字位置为1</p>\n</li>\n<li><p>微博里面你关注的A也关注了B, 使用B的粉丝列表和你的关注列表进行交集运算就可以了,同样 购买这件商品的人也购买了M,也可以用 购买这件商品的用户列表里面取某个用户购买过的某个商品即可</p>\n</li>\n</ol>\n<p>以上应用确实能有效的减少数据的存储容量和提高集合计算速度, 如果我们用这种方法来存储用户标签信息也能大量减少存储容量</p>\n<p>但是怎么把用户标签的表信息数据转换成bitmap形式的数据呢?</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>我们如果要记录一个用户对应的一个标签的信息,假如我们知道5号用户是小九,而她是一位超级会员用户(我们可以在上面的表中查到该信息)</p>\n<p>我们要如何使用bitmap来表示这条信息呢</p>\n<ul>\n<li>存储用户和标签的关系</li>\n</ul>\n<p>我们可以这样:</p>\n<ol>\n<li>使用一个键<code>user:supervip</code>来记录所有用户是否是超级会员的信息,这个值最初是空的字符串值,表明没有超级会员用户</li>\n<li>我们为了标明 5 号用户是超级会员 可以使用这个键中对应位置的二进制位来表明会员的身份,将这个键的第 5 位置为1, 这样这个<code>user:supervip</code>值现在是’000001’(从第0位开始计算)</li>\n<li>同样,如果<code>user:supervip</code>的值现在是’01001010’ 我们就可以知道 1,4,6号用户都是超级会员用户</li>\n</ol>\n<p>我们根据这个数据可以做到2点:</p>\n<ul>\n<li><p>我们可以根据该标签数据键的对应位置的二进制位的值来判断以该位置为id的用户的标签结果</p>\n</li>\n<li><p>也可以查询某个标签下的所有用户</p>\n</li>\n</ul>\n<p>这样我们存储上万个标签也只需要上万个键</p>\n<ul>\n<li>存储所有用户</li>\n</ul>\n<p>但是我们如果需要查找不属于某个标签的用户怎么办啊,如果直接对上一个例子取反肯定是不行的</p>\n<p>为了解决这个问题我们需要一个存储所有用户的键</p>\n<p>我们知道了所有用户,知道了拥有某标签的用户</p>\n<pre><code>不含某标签的用户 = 总用户 - 含有某标签的用户</code></pre><p>用二进制的操作方法就是使用<code>异或</code>, 举例:</p>\n<p>我们有7个用户(编号1-7),5号用户是超级vip,我们要查找所有不是vip的用户可以使用下面的运算</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">01111111</span> ^ <span class=\"number\">00001000</span> = <span class=\"number\">01110111</span> <span class=\"comment\">// 127 ^ 8 = 119</span></span><br><span class=\"line\"><span class=\"comment\">// 01111111:所有用户的二进制键  00001000:5号用户是超级会员的键 01110111:所有不是超级会员的用户</span></span><br></pre></td></tr></table></figure>\n<p>以上操作我们就能得到所有不是超级会员的用户</p>\n<ul>\n<li>存储某用户的所有标签</li>\n</ul>\n<p>我们如果要获得用户的所有标签,也可以将用户拥有的标签id在用户标签键中所对应的位置置为1,这样每一个用户的表示所有标签的键的最大位长度就是固定的,比如:</p>\n<p>我们可以用如下方式存储用户的所有标签</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">usertag:all:<span class=\"number\">1</span> =&gt; <span class=\"number\">01101010</span>  <span class=\"comment\">// 1号用户的所有标签</span></span><br><span class=\"line\">usertag:all:<span class=\"number\">5</span> =&gt; <span class=\"number\">00010110</span>  <span class=\"comment\">// 5号用户的所有标签</span></span><br></pre></td></tr></table></figure>\n\n<p>这样我们就能使用bitmap来满足以上基本查询需求</p>\n<p>同样我们也可以将所有标签存储成一个<code>usertag:alltag</code>键, 再使用异或运算计算某用户不含有的标签</p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><p>我们如果自己来对位运算做管理就有点麻烦了,我们可以借助<code>redis</code></p>\n<p><code>redis</code>原生提供了可以对字符串进行位操作的命令,具体如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> SETBIT key pos value  // 将 key 的第 pos 位设为 value(只能取1/0)</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> GETBIT key pos        // 获取 key 的第 pos 位的值</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> BITOP cmd key1 key2 key3 ... // 对 key2,key3 等执行 </span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyN</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> BITOP OR destkey srckey1 srckey2 srckey3 ... srckeyN</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> BITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyN</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> BITOP NOT destkey srckey</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> BITPOS key bit start end  // 将 key 的 strat 到 end 位全部设为 bit(0/1)</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> BITCOUNT mykey 1 1</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> BITFIELD mystring SET i8 <span class=\"comment\">#0 100 i8 #1 200</span></span></span><br></pre></td></tr></table></figure>\n\n<p>我们就直接使用<code>redis</code>来存储数据了,这样方便点</p>\n<h2 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h2><p>我们这边为了方便直接使用redis提供的<code>setbit</code>,<code>getbit</code>和<code>bitop</code>来进行字符串的位操作</p>\n<p>因为我们要存储用户标签,所以我们首先需要对用户和标签进行编号,这样我们需要两个表</p>\n<p>用户表:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">uid</th>\n<th align=\"left\">name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">小明</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">小花</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">小江</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">小红</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">小九</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">小七</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">小四</td>\n</tr>\n</tbody></table>\n<p>标签表:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">tid</th>\n<th align=\"left\">name</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">vip</td>\n<td align=\"left\">是否vip</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">mobile</td>\n<td align=\"left\">是否绑定手机</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">email</td>\n<td align=\"left\">是否绑定邮箱</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">male</td>\n<td align=\"left\">是否男性</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">mac</td>\n<td align=\"left\">是否使用Mac</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">supervip</td>\n<td align=\"left\">是否年费会员</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">lost</td>\n<td align=\"left\">是否易流失用户</td>\n</tr>\n</tbody></table>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><p>我们这里为了性能考虑使用redis来进行存储</p>\n<p>我们将最上面的表格数据转换成以下键值对</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // 所有用户</span><br><span class=\"line\">    \"user:all\":&#123;</span><br><span class=\"line\">        <span class=\"string\">\"01111111\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 所有vip用户</span><br><span class=\"line\">    \"user:vip\":&#123;</span><br><span class=\"line\">        <span class=\"string\">\"01001001\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 所有绑定了手机的用户</span><br><span class=\"line\">    \"user:mobile\":&#123;</span><br><span class=\"line\">        <span class=\"string\">\"01101010\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 所有绑定了邮箱的用户</span><br><span class=\"line\">    \"user:email\":&#123;</span><br><span class=\"line\">        <span class=\"string\">\"00001010\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 所有男性用户</span><br><span class=\"line\">    \"user:male\":&#123;</span><br><span class=\"line\">        <span class=\"string\">\"01010011\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 用户1的所有标签</span><br><span class=\"line\">    \"usertag:all:1\":&#123;</span><br><span class=\"line\">        <span class=\"string\">\"01101010\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //用户2的所有标签</span><br><span class=\"line\">    \"usertag:all:2\":&#123;</span><br><span class=\"line\">        <span class=\"string\">\"00100001\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h2><p>我们可以使用redis的命令<code>getbit</code>来查询某个键的某个位置的值<br>比如,我们要查询5号用户是否具有vip标签,可以使用以下命令   </p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ getbit user:vip <span class=\"number\">5</span> <span class=\"comment\">// 返回 0</span></span><br></pre></td></tr></table></figure>\n<p>要查询某用户身上的所有标签可以使用如下   </p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ get usertag:all:<span class=\"number\">1</span> <span class=\"comment\">// 获取用户1的所有标签 返回'01101010'</span></span><br></pre></td></tr></table></figure>\n<p>我们如果要获取某标签下的所有用户可以使用如下命令   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> get user:vip // 返回一个二进制字符串 类似 <span class=\"string\">'01001001'</span></span></span><br></pre></td></tr></table></figure>\n<p>查询不具有某个标签的用户   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> bitop xor user:not_vip user:all user:vip // 根据所有用户和具有标签的用户进行异或运算,得到不含有某标签的用户</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> get user:not_vip // 返回二进制字符串</span></span><br></pre></td></tr></table></figure>\n\n<p>我们现在知道如何快速的获取我们想要的数据了,但是我们发现有时候我们获取到的都是二进制的数据例如 <code>00001000</code> 这种,而群殴们想从这样的数据中获取的是 <code>[5]</code> 这样的比较易读的信息</p>\n<p>我们需要有一个将二进制字符串 转化为对应位置为1的位置数组的形式</p>\n<p>如: function(<code>01001010</code>) =&gt; <code>[1,4,6]</code> </p>\n<h2 id=\"结果解析\"><a href=\"#结果解析\" class=\"headerlink\" title=\"结果解析\"></a>结果解析</h2><p>这里我们提供两个函数来进行这样的操作</p>\n<ol>\n<li>遍历法</li>\n</ol>\n<p>我们遍历二进制字符串中的每一位, 每遇到一个为1的位置就将该位置放入数组</p>\n<p>这种方法比较慢,不建议使用,这里贴一个示例代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key2array</span><span class=\"params\">(self, key)</span>:</span>  <span class=\"comment\"># 将二进制('\\x05'-&gt;'0b00000101')变为数组[5,7], 表示第五位和第七位为1</span></span><br><span class=\"line\">    tmpstr = <span class=\"string\">''</span>.join([bin(i).replace(<span class=\"string\">'0b'</span>, <span class=\"string\">''</span>).zfill(<span class=\"number\">8</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> key])</span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    str_len = len(tmpstr)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, str_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> int(tmpstr[i]) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            arr.append(i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (arr)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查表</li>\n</ol>\n<p>我们可以观察一下redis返回的二进制数据的特点, 每8个二进制位属于一个字节,每个字节都可以表示成具体的数字(如:0,23,127)这个数字最大也只能到255,而且同一个数字有可能出现非常多次,而每个数字所对应的转换过后的位置数组都是固定的,比如: 100(二进制:1100100) =&gt; [1,2,5]</p>\n<p>我们可以利用这一点,提前制作一个 <code>0-255</code>的所对应的位置表,然后每次处理8位,处理完把当前处理的位数加上新表中对应的值就可以快速的得到这个值了</p>\n<blockquote>\n<p>ps: 我们也可以扩大这个表的容量以提高速度</p>\n</blockquote>\n<p>贴下示例代码:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_bit_table</span><span class=\"params\">(self)</span>:</span>  <span class=\"comment\"># 生成0-255的表</span></span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">256</span>):</span><br><span class=\"line\">        tmp_arr = []</span><br><span class=\"line\">        tstr = bin(i).replace(<span class=\"string\">'0b'</span>, <span class=\"string\">''</span>).zfill(<span class=\"number\">8</span>)</span><br><span class=\"line\">        n = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> tstr:</span><br><span class=\"line\">            n = n + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> int(k) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                tmp_arr.append(n)</span><br><span class=\"line\">        arr.append(tmp_arr)</span><br><span class=\"line\">    self.bit_table = arr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key2array</span><span class=\"params\">(self, key)</span>:</span>  <span class=\"comment\"># 查表法</span></span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> key:</span><br><span class=\"line\">        pos = self.bit_table[i]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> pos:</span><br><span class=\"line\">            arr.append(n + k - <span class=\"number\">1</span>)</span><br><span class=\"line\">        n = n + <span class=\"number\">8</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (arr)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ps:jdk中的BitSet就是对bitmap的一种简单实现</p>\n</blockquote>\n<h1 id=\"如果标签过于稀疏会不会浪费空间\"><a href=\"#如果标签过于稀疏会不会浪费空间\" class=\"headerlink\" title=\"如果标签过于稀疏会不会浪费空间?\"></a>如果标签过于稀疏会不会浪费空间?</h1><p>如果我们在一个很长的bitmap中只存除了极少量的数据是不是会对空间造成浪费呢?</p>\n<p>例如: 在bitmap的第40000位置为1,那存储的数据大概就类似: 00000000000…0000000001</p>\n<p>这样的数据前面的39999位都是0,不会浪费空间吗</p>\n<h2 id=\"Google的EWAHCompressedBitmap\"><a href=\"#Google的EWAHCompressedBitmap\" class=\"headerlink\" title=\"Google的EWAHCompressedBitmap\"></a>Google的EWAHCompressedBitmap</h2><p>Google的EWAHCompressedBitmap就对这种情况做了优化</p>\n<p>EWAHCompressedBitmap 将整个的二进制数据分成每64位一个的word</p>\n<p>一个空的Bitmap默认拥有 4 个word 也就是 <code>4*64</code> 位</p>\n<p>其中 word0 存储bitmap的头信息</p>\n<p>当我们改变对应位置的比特位的值时 word 会跟着变化</p>\n<p>当我们插入的值非常大的时候(例如:40000), 算法会根据当前的值 创建两个新的word </p>\n<p>一个用于存储第40000个数据所在的word的信息(LW), 还有一个存储跨度信息(称为:跨度word /RLW )</p>\n<p>假如说我们给一个空的bitmap,我们插入40000的话正常情况下会有6个word,前4个是头信息word+3个空word,第6个中保存40000这个数字所在的位置信息,第5个word中保存从第 4-625 word的跨度信息,第626word中存储有 40000 这个数据 </p>\n<blockquote>\n<p>ps: 第一个word存储头信息, 625 = floor( (40000 + 1) / 64 ) </p>\n</blockquote>\n<p>存储跨度信息的word和普通的存储数据的word虽然空间一样但是存储的内容不一样,存储跨度信息的word大概内容这样</p>\n<pre><code>前32位存储 `当前跨度word(RLW)横跨了多少空word`    \n后32位存储 `当前跨度word(RLW)后方有多少个连续的LW`</code></pre><p>当我们存储 位置在跨度word(RLW)之中的数据(例如:20000), RLW会进行分裂</p>\n<p>变成3个word,中间一个存储20000所在的LW信息,前后各有一个RLW保存新的跨度信息</p>\n<p>EWAHCompressedBitmap对应的maven依赖如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.googlecode.javaewah<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>JavaEWAH<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>","categories":["系统设计"],"tags":["bitmap","标签系统"]},{"title":"终于找到了魅族flow耳机的模特啦","url":"/2018-05-20-meizi-qingguya/","content":"<p>前几天找到了我一直寻找的给魅族耳机代言的小姐姐, 微博: @青谷娅</p>\n<p>我从第一眼看到这个小姐姐就觉得气质好好啊</p>\n<p>从网上搜了好久都找不到个人信息</p>\n<p>后来偶然间从某个摄影师处了解到这个小姐姐的微博</p>\n<p>开心了好多天</p>\n<h1 id=\"以下是美图欣赏\"><a href=\"#以下是美图欣赏\" class=\"headerlink\" title=\"以下是美图欣赏\"></a>以下是美图欣赏</h1><p>魅族耳机照</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/MHXrfROKTq7JNgS.png\" alt=\"WX20180528-200414.png\"></p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/6jiXNxMYbq8UuOe.png\" alt=\"WX20180529-095529.png\"></p>\n<p>以下图片来自微博</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/9w3e671KApZhjOk.jpg\" alt=\"IMG_1104.JPG\"></p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/MRLX5p3rikS2W74.jpg\" alt=\"IMG_1107.JPG\"></p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/sdLI9fo5q8P4miS.jpg\" alt=\"IMG_1106.JPG\"></p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/oiAJGuB9EVlxpcN.jpg\" alt=\"IMG_1103.JPG\"></p>\n","categories":["生活记录"],"tags":["青谷娅"]},{"title":"初步探索实时数据处理系统","url":"/2018-09-30-real-time-proccess/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>因为业务需要, 公司现在需要一个实时的计算平台来支撑上层的各种业务</p>\n<p>借这个机会, 对我们用到的相关技术部分进行了整理</p>\n<h1 id=\"业务场景分析\"><a href=\"#业务场景分析\" class=\"headerlink\" title=\"业务场景分析\"></a>业务场景分析</h1><p>下面拿我自己经历的两个项目来探讨一下实时计算平台的构建和使用</p>\n<p>以及其中遇到的一些坑</p>\n<h1 id=\"业务1-统一的产品池服务\"><a href=\"#业务1-统一的产品池服务\" class=\"headerlink\" title=\"业务1. 统一的产品池服务\"></a>业务1. 统一的产品池服务</h1><h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ul>\n<li>统一产品数据池</li>\n</ul>\n<p>由于公司部门比较分散,公司的不同品类的产品(在线旅游公司)分属不同的BU(Business Unit),不同部门之间不仅数据不互通, 而且使用的数据库,产品数据结构和使用的存储技术也都不相同, 数据库存储主要使用Oracle和MySQL</p>\n<p>我们组的业务由于含有统一的列表页和内容服务, 所有分类产品的相关信息都需要进行聚合展示, 所以原来我们使用产品都需要根据产品品类调用不同部门提供的接口进行数据查询</p>\n<p>考虑到接口性能和未来业务的增长，我们需要一个统一的产品池功能来帮助汇总所有的产品信息，向上曾业务提供一个统一的最基本的产品信息查询, 之后所有组内的产品信息统统通过产品池进行获取, 这样把数据和业务进行充分解耦  </p>\n<p>上层业务不需要了解各种分类的产品信息的存储位置和处理逻辑,只需要从统一的产品池获取产品信息即可，同时作为基础的数据服务还需要保证服务的性能和高可用性，于是有了产品池这个项目   </p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>主要涉及的中间件和服务<code>redis</code>,<code>kafka</code>,<code>storm</code>,<code>elasticsearch</code>,<code>mysql</code></p>\n<h2 id=\"项目详情\"><a href=\"#项目详情\" class=\"headerlink\" title=\"项目详情\"></a>项目详情</h2><ol>\n<li>对接各BU, 整合各BU的产品信息到统一的产品容器内(选择redis/es作为主要的对外存储容器)</li>\n<li>提供统一的产品信息获取接口</li>\n</ol>\n<h2 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h2><p><img data-src=\"https://i.loli.net/2020/05/09/DOkCVIlZ7BKz16r.png\" alt=\"productpool.jpg\"></p>\n<p>其中各组件的主要功能:</p>\n<p><code>Redis</code>: 存储k-v结构的产品信息, 提供前台api接口的产品基础信息查询数据</p>\n<p><code>Elasticsearch</code>: 提供后台和部分前台对产品的搜索功能</p>\n<p><code>kafka</code>: 数据总线, 后台数据流转的核心</p>\n<p><code>mysql/oracle</code>: 提供最初始的数据源</p>\n<p><code>storm</code>: 产品信息计算平台</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><h3 id=\"前台api获取产品的流程\"><a href=\"#前台api获取产品的流程\" class=\"headerlink\" title=\"前台api获取产品的流程\"></a>前台api获取产品的流程</h3><p><img data-src=\"https://i.loli.net/2020/05/09/YlEnJMbQuqDXBNh.png\" alt=\"flow1.png\"></p>\n<h3 id=\"后台构建产品的流程\"><a href=\"#后台构建产品的流程\" class=\"headerlink\" title=\"后台构建产品的流程\"></a>后台构建产品的流程</h3><p><img data-src=\"https://i.loli.net/2020/05/09/iVF5gAlwafOmSXv.png\" alt=\"flow2.png\"></p>\n<h2 id=\"详细步骤描述\"><a href=\"#详细步骤描述\" class=\"headerlink\" title=\"详细步骤描述\"></a>详细步骤描述</h2><ul>\n<li><p>定时的产品id添加: 定期进行全量的产品数据重建, 为了方便控制重建过程, 将要处理的产品id分批存入kafka中的<code>全量重建topic</code>, 也就是把批处理转化为流处理  </p>\n</li>\n<li><p>失效的产品id: 当某个产品不存在于redis中时, 也会重新放入kafka的另外的<code>miss产品topic</code>中进行重建  </p>\n</li>\n<li><p>当产品信息变更时候也会有对应的变更产品id入kafka的<code>变更产品topic</code>中进行重建  </p>\n</li>\n<li><p>处理产品时会从以上三个产品源topic中读取需要重建的产品, 根据分类发放到<code>不同的分类topic</code>, 然后交给storm进行产品信息计算, 这部分信息只有简单的产品ID和更新类型标识  </p>\n</li>\n<li><p>storm中构建失败的产品(数据库中不存在等原因), 会在redis中进行标记暂时不可用(有效期1天), 不可用的产品不会继续进行重建  </p>\n</li>\n<li><p>kafka多个topic中的消息含有需要构建的 产品id和产品需要构建的内容, 也就是说可以通过消息内容格式控制构建产品的某个部分的信息(例如: 只更新产品的基本信息, 只更新价格信息, 只更新评论数,好评数等信息)</p>\n</li>\n<li><p>storm从kafka中获取消息, 进行产品的信息计算, 计算完成的信息会重新返回kafka, 同样根据产品分类发放到不同的<code>分类topic</code>, 这部分信息含有全量的产品信息数据</p>\n</li>\n<li><p>整合各个分类topic的产品计算结果, 写入redis 和 es, 并回写部分mysql表</p>\n</li>\n</ul>\n<h2 id=\"产品数据更新\"><a href=\"#产品数据更新\" class=\"headerlink\" title=\"产品数据更新\"></a>产品数据更新</h2><p>通过<code>canal</code>监听mysql数据库的产品表数据变更, 将变更数据发给kafka中的<code>产品表日志topic</code>, 后续从kafka的<code>产品日志topic</code> ,根据数据内容解析出来产品更新事件, 封装对应的事件消息, 存入<code>产品事件topic</code>  </p>\n<p>通过读取<code>产品事件topic</code>中的数据, 根据品类和变更内容, 向产品池<code>变更产品topic中发送</code>发送产品池信息重构需求</p>\n<h2 id=\"经验和总结\"><a href=\"#经验和总结\" class=\"headerlink\" title=\"经验和总结\"></a>经验和总结</h2><ul>\n<li>为什么要分多个产品数据源topic</li>\n</ul>\n<ol>\n<li><p>为了优先级考虑, 不同来源的产品对时效性要求是不同的, 但是kafka本身又做不了带有优先级的消息处理</p>\n</li>\n<li><p>不同的分类的产品的处理逻辑不同, 更新频率和数据量也不同, 提前进行分流</p>\n</li>\n</ol>\n<ul>\n<li>为什么不同分类的产品要用不同的写入topic</li>\n</ul>\n<ol>\n<li>如果有其他业务需要使用其中某个分类的产品数据只需订阅对应的产品topic流就可以了, 免去了从全量产品流中过滤的步骤 </li>\n</ol>\n<ul>\n<li>为什么最后还要把产品信息吐会回kafka</li>\n</ul>\n<ol>\n<li><p>为了统一控制写入源并做优化, 使用统一的topic存储数据可以让整个程序只有一个数据写入的源, 所有写入操作统统使用写总线来处理, 解耦了功能, 提高了可靠性, 扩展性和可维护性</p>\n</li>\n<li><p>可以对数据写入做优化, 比如:幂等处理, 批压缩写入处理, ABA问题的重写</p>\n</li>\n<li><p>为了数据重用, 因为其他部分业务组也可能需要使用产品信息, 到时候直接订阅最终的产品信息表就可以了</p>\n</li>\n<li><p>为了方便扩展, 如果将来数据量大, 出现了写入瓶颈, 只要对这一部分承担写总线功能的写入程序进行扩展就可以了</p>\n</li>\n</ol>\n<h1 id=\"业务2-用户画像之用户信息完善系统\"><a href=\"#业务2-用户画像之用户信息完善系统\" class=\"headerlink\" title=\"业务2. 用户画像之用户信息完善系统\"></a>业务2. 用户画像之用户信息完善系统</h1><h2 id=\"需求-1\"><a href=\"#需求-1\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>这个项目是用户画像的子项目, 目的是将用户分布在不同BU的信息进行整合, 提供一份统一最完整的用户信息出来</p>\n<p>同时进行一些数据清洗和数据统计</p>\n<ul>\n<li>对分散在各个表中的会员信息进行梳理, 整合一份相对比较完善的用户信息</li>\n</ul>\n<p>例如: 用户1在基本信息中填写了一份信息 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    &quot;username&quot;:&quot;zhang&quot;,</span><br><span class=\"line\">    &quot;birthday&quot;:&quot;1990-01-01&quot;,</span><br><span class=\"line\">    &quot;gender&quot;:&quot;M&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时用户上传了一张个人身份证, 通过解析, 身份证含有的信息是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;birthday&quot;:&quot;1990-12-07&quot;,</span><br><span class=\"line\">    &quot;gender&quot;:&quot;F&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说用户自己填写的信息和身份证中的信息不一致, 相同的情况可能出现在多个业务部门, 因为业务拆分各部门相互独立, 同一个用户在多个业务部门可能拥有多份不太一致的用户信息  </p>\n<ul>\n<li>对进行过清洗的用户数据进行完善度的计算</li>\n</ul>\n<p>根据不同用户信息字段占有的不同分值权重, 使用完善后的用户信息, 对用户的完善度进行实时统计</p>\n<ul>\n<li>定期统计用户的完善度报表</li>\n</ul>\n<p>根据用户会员等级/地区/性别 等基本属性和 对应的销售vip客服人员进行用户信息的报表统计</p>\n<h2 id=\"组件-1\"><a href=\"#组件-1\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>主要相关的组件有 <code>mysql</code>,<code>kafka</code>,<code>storm</code>,<code>hbase</code>, <code>es</code></p>\n<h2 id=\"项目详情-1\"><a href=\"#项目详情-1\" class=\"headerlink\" title=\"项目详情\"></a>项目详情</h2><ol>\n<li>对接各数据源, 根据用户身份表示整合统一的用户信息</li>\n<li>统一存储用户信息</li>\n</ol>\n<blockquote>\n<p>ps:由于部分原因, 项目的实际开发时间很短, 只有200左右的工时, 也就是一个人工作一个月, 而且大部分时间都花在内部数据问题的处理上面, 所以项目未能做到最终非常完善的程度</p>\n</blockquote>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>定期的全量用户信息补全</li>\n<li>用户信息变更以后触发的补全</li>\n<li>用户资料补全以后进行完善度的计算</li>\n<li>定期根据用户属性对用户完善度进行报表统计</li>\n</ol>\n<p>具体的细节跟上面产品池相似, 都是利用<code>kafka</code>的数据流转, 将需要计算的消息流到<code>storm</code>, 经过计算以后再通过<code>kafka</code> 回馈给数据库和存储 </p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实回顾这两个项目</p>\n<p>在其中主要起作用的中间件主要是<code>kafka</code>和<code>storm</code></p>\n<p><code>kafka</code> 承担了系统几乎所有的数据流转需求, 做了一个数据总线的角色, 提供了<code>事件驱动</code>,<code>ETL</code>,<code>解耦</code>等功能   </p>\n<p><code>storm</code> 则承担了主要的计算任务和部分数据转发功能  </p>\n<p>其他 <code>mysql</code>, <code>redis</code>,<code>elasticsearch</code>则一直充当数据提供方和数据使用方(业务)之间的网关作用   </p>\n<p>这一套消息处理流程目前来看还没遇到太大的问题, 但是因为我们部门业务相对比较单一, 尚不能完全发挥这套架构的潜力  </p>\n<p>希望以后可以多尝试, 并进行改进</p>\n","categories":["系统设计"],"tags":["数据处理"]},{"title":"平衡和度","url":"/2018-06-06-balance/","content":"<h1 id=\"什么是智慧\"><a href=\"#什么是智慧\" class=\"headerlink\" title=\"什么是智慧\"></a>什么是智慧</h1><p>一直以来我都很认同<code>大道至简</code>的看法</p>\n<p>所以我天真的认为处理世界上的所有事情肯定有一个通用的框架, 该框架应该适用于所有麻烦的事情<br>而我们庸庸众人只需要学习这一种处事方式就能轻松应付生活,即所谓的The One Truth<br>后来的我渐渐意识到,<code>世界本来就是混乱无序的</code>, 那个万能法则肯定是不存在的   </p>\n<blockquote>\n<p>从物理学上来讲, 一个封闭的系统中, 熵(代表混乱程度)处在不断增加的状态,一味地想维持低熵状态往往需要额外的付出更多能量.同样的,如果我强行要求这个系统是有序的并且规则的,那对这个系统来说,必然需要极大的能量来维持这种状态</p>\n</blockquote>\n<p><strong>智慧的本质, 就是对空间和时间的理解</strong></p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/b2at6W9HpIVl4rJ.png\" alt=\"wisdom_mindnode1.png\"></p>\n<p>所谓智慧, 就是能很好地平衡时间和空间, 而怎么平衡, 就涉及到度的把握</p>\n<h2 id=\"度\"><a href=\"#度\" class=\"headerlink\" title=\"度\"></a>度</h2><p><strong>度</strong>或者叫<strong>分寸</strong>, 一种抉择中的取舍<br>我们无时无刻不在面临许多的抉择<br>大部分的抉择都存在我们可以感知的正面和反面效果,即便看起来非常正面的行为背后也隐藏着隐忧<br>例如:    </p>\n<ul>\n<li>培养好的习惯是应该的, 但是好的习惯不可能一直增加. 我们的精力是有限的,我们所处的的环境也在不断改变, 根据环境调整自己习惯才是我们要做的,否则随着时间增加我们的习惯也越来越多,如果不及时调整, 你的所有时间会被积累下来的习惯完全占据</li>\n</ul>\n<p>一个人在待人接物方面能很好地把握分寸, 我们会说他情商高<br>一个人在自己和外界的联系方面能很好地把握分寸, 我们会说他有品位<br>一个人在处理冲突方面能很好地把握分寸, 我们会说他有智慧   </p>\n","categories":["生活记录"],"tags":["思考"]},{"title":"2019年记录","url":"/2019-01-01-summary-md/","content":"<h1 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h1><h1 id=\"1月\"><a href=\"#1月\" class=\"headerlink\" title=\"1月\"></a>1月</h1><p>看书:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 神经网络与深度学习</li>\n<li><input disabled=\"\" type=\"checkbox\"> 深入理解Java虚拟机</li>\n</ul>\n<h1 id=\"2月\"><a href=\"#2月\" class=\"headerlink\" title=\"2月\"></a>2月</h1><p>看书:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 设计数据密集型应用</li>\n</ul>\n<h1 id=\"3月\"><a href=\"#3月\" class=\"headerlink\" title=\"3月\"></a>3月</h1><p>看书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 富爸爸穷爸爸</li>\n</ul>\n<h1 id=\"4月\"><a href=\"#4月\" class=\"headerlink\" title=\"4月\"></a>4月</h1><p>看书:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 一本书看懂经济学</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 从零开始学炒股</li>\n<li><input disabled=\"\" type=\"checkbox\"> 设计数据密集型应用</li>\n<li><input disabled=\"\" type=\"checkbox\"> 剑指offer</li>\n</ul>\n<h1 id=\"5月\"><a href=\"#5月\" class=\"headerlink\" title=\"5月\"></a>5月</h1><p>看书:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 设计数据密集型应用</li>\n<li><input disabled=\"\" type=\"checkbox\"> 股市真规则</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> hbase权威指南</li>\n</ul>\n<h1 id=\"6月\"><a href=\"#6月\" class=\"headerlink\" title=\"6月\"></a>6月</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 剑指offer</li>\n<li><input disabled=\"\" type=\"checkbox\"> 深入理解Java虚拟机</li>\n<li><input disabled=\"\" type=\"checkbox\"> 推荐系统三十六式(在线课程)</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据结构与算法之美(在线课程)</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 大规模数据处理实战(在线课程)</li>\n<li><input disabled=\"\" type=\"checkbox\"> Mysql实战45讲(在线课程)</li>\n<li><input disabled=\"\" type=\"checkbox\"> Java核心技术36讲(在线课程)</li>\n</ul>\n<h1 id=\"7月\"><a href=\"#7月\" class=\"headerlink\" title=\"7月\"></a>7月</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 推荐系统三十六式(在线课程)</li>\n<li><input disabled=\"\" type=\"checkbox\"> 从一到无穷大</li>\n<li><input disabled=\"\" type=\"checkbox\"> 海龟交易法则</li>\n</ul>\n<h1 id=\"8月\"><a href=\"#8月\" class=\"headerlink\" title=\"8月\"></a>8月</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Java核心技术36讲(在线课程)</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> rust程序设计语言</li>\n</ul>\n<h1 id=\"9月\"><a href=\"#9月\" class=\"headerlink\" title=\"9月\"></a>9月</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数学之美</li>\n<li><input disabled=\"\" type=\"checkbox\"> 剑指offer</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 深入理解Java虚拟机</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 从0开始学大数据(在线课程)</li>\n</ul>\n<h1 id=\"10月\"><a href=\"#10月\" class=\"headerlink\" title=\"10月\"></a>10月</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Mysql实战45讲(在线课程)</li>\n<li><input disabled=\"\" type=\"checkbox\"> 从一到无穷大</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 阶层越迁</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> kafka核心技术与实战(在线课程)</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 小岛经济学</li>\n<li><input disabled=\"\" type=\"checkbox\"> Java编程的逻辑</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 走进搜索引擎（第二遍）</li>\n</ul>\n<h1 id=\"11月\"><a href=\"#11月\" class=\"headerlink\" title=\"11月\"></a>11月</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 思考，快与慢</li>\n<li><input disabled=\"\" type=\"checkbox\"> Java编程的逻辑</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 用户行为网络画像</li>\n<li><input disabled=\"\" type=\"checkbox\"> 这就是搜索引擎</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 分布式技术原理与算法解析(在线课程)</li>\n<li><input disabled=\"\" type=\"checkbox\"> 推荐系统与深度学习</li>\n</ul>\n<h1 id=\"12月\"><a href=\"#12月\" class=\"headerlink\" title=\"12月\"></a>12月</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Java编程的逻辑</li>\n<li><input disabled=\"\" type=\"checkbox\"> 这就是搜索引擎</li>\n<li><input disabled=\"\" type=\"checkbox\"> 推荐系统与深度学习</li>\n</ul>\n","categories":["生活记录"]},{"title":"排行榜系统设计","url":"/2019-06-01-recommended-system-ranking-system-md/","content":"<h1 id=\"为啥需要排行榜\"><a href=\"#为啥需要排行榜\" class=\"headerlink\" title=\"为啥需要排行榜\"></a>为啥需要排行榜</h1><p>推荐系统有一个避不开的问题就是冷启动问题</p>\n<p>也就是新用户第一次进入应用的推荐，此时我们没有任何的用户行为信息， 无法根据用户行为进行推荐， 用户基础信息的推荐也极有可能没有构建完成</p>\n<p>此时就需要一种针对所有用户通用的推荐策略，防止推荐系统出现“开天窗” </p>\n<a id=\"more\"></a>\n\n<p>我们一般使用以下策略来处理冷启动问题</p>\n<ol>\n<li>最新内容</li>\n<li>最火内容</li>\n<li>实时基于用户属性进行分群，基于用户群进行推荐（比如，上海地区用户，女性用户，30-40岁用户）</li>\n</ol>\n<p>其中的最火内容就需要排行榜系统的支持</p>\n<h1 id=\"排行榜系统\"><a href=\"#排行榜系统\" class=\"headerlink\" title=\"排行榜系统\"></a>排行榜系统</h1><p>排行榜系统一般有两种， 一种是类似于“本月最火歌曲排行”一种是“最近30天最火歌曲排行”</p>\n<h2 id=\"固定时间范围的排行榜\"><a href=\"#固定时间范围的排行榜\" class=\"headerlink\" title=\"固定时间范围的排行榜\"></a>固定时间范围的排行榜</h2><blockquote>\n<p>需求：统计本月播放次数最多的歌曲</p>\n</blockquote>\n<p>针对“本月最火歌曲”这种需求的排行榜，处理起来相对简单</p>\n<p>只要统计从本月有1号到现在的所有歌曲的播放数据就可以了，如果数据量不大且要求不高，可以定时每一段时间计算一次</p>\n<p>如果实时性要求较高， 也可以使用实时增量统计的方式，同时每天处理一次批量统计，做数据矫正</p>\n<p>具体就是每天计算一个排行榜之后， 使用流处理系统，当有新的播放事件，在榜单现有基础上做incr操作即可</p>\n<p>这种排行榜相对来说实现比较简单， 缺点也很明显</p>\n<p>比如今天如果是本月的1号， 那你的排行榜数据就由于样本数据有限，误差较大，无法起到排行榜真正的作用</p>\n<p>处理这种问题就需要“最近30天最火的歌曲”这种滚动排行榜</p>\n<h2 id=\"滚动排行榜\"><a href=\"#滚动排行榜\" class=\"headerlink\" title=\"滚动排行榜\"></a>滚动排行榜</h2><p>滚动排行榜是指基于最近一段时间范围的数据获得的排行榜统计结果  </p>\n<p>拿最近3天排行榜为例， 假设现在是是10号的10点钟， 那滚动排行榜覆盖的区间就是前推3天的数据  </p>\n<p><code>7号从10点以后的数据 + 8，9号全天数据 + 10号截至目前的数据 的统计结果</code></p>\n<p>滚动排行榜相对来说难度增加了很多</p>\n<p>如果数据量不大，对实时性要求不高的话， 也可以采用每一段时间计算一次最近3天的播放量的批量的方式</p>\n<p>但是如果数据量较大或者对实时性有要求较高，那就需要设计一个实时的滚动排行榜</p>\n<h3 id=\"实时的滚动排行榜\"><a href=\"#实时的滚动排行榜\" class=\"headerlink\" title=\"实时的滚动排行榜\"></a>实时的滚动排行榜</h3><p>假如我要做3天的滚动歌曲榜单， 我就需要获取最近72小时的播放记录进行统计</p>\n<p>拿数据举例来说</p>\n<p>假设有如下的播放记录, 当前日期是 2019-04-04 13:00， 排行榜统计区间应该是 <code>04-01 13:00 ～ 04-04 13:00</code>  </p>\n<table>\n<thead>\n<tr>\n<th>歌曲id</th>\n<th>播放时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1009</td>\n<td>2019-04-01  9:00</td>\n</tr>\n<tr>\n<td>1010</td>\n<td>2019-04-01 14:00</td>\n</tr>\n<tr>\n<td>1020</td>\n<td>2019-04-02  8:00</td>\n</tr>\n<tr>\n<td>1089</td>\n<td>2019-04-03 10:00</td>\n</tr>\n<tr>\n<td>1010</td>\n<td>2019-04-04  9:00</td>\n</tr>\n<tr>\n<td>1023</td>\n<td>2019-04-04 12:00</td>\n</tr>\n</tbody></table>\n<p>那我们获取到的3天榜单应该是这样(1009的播放记录已经过期)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//  歌曲id:播放次数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     1023:1,</span><br><span class=\"line\">     1010:2，</span><br><span class=\"line\">     1089:1，</span><br><span class=\"line\">     1020:1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>排行榜处理过程最关键的有两点</p>\n<ol>\n<li><p>对一个元素加分时，加当日周期榜、滚动榜；<br>还需根据其在今日滚动榜中的分数s、及n-1天日榜中的分数r，计算出其在明日滚动榜中的初始分数s-r写入明日滚动榜中；<br>即3个写操作；</p>\n</li>\n<li><p>如果一个元素在当日没有任何加分操作，那么不会触发写入初始分数操作，所以还需要一个离线工具补齐。<br>该离线工具可提前一天运行，即当日运行离线工具补齐次日的滚动榜数据即可。</p>\n</li>\n</ol>\n<p>R：每日的统计数据  S： 每日的滚动排行榜数据</p>\n<p>s-r &gt; 0 才进行写入操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">以3天滚动榜为例，次日滚动榜初始态为当日滚动榜减去n-2天的日榜数据。</span><br><span class=\"line\">     +-------------------------------------------+</span><br><span class=\"line\">     |                                           |</span><br><span class=\"line\">+----+---+   +--------+   +--------+             |</span><br><span class=\"line\">| R(i-2) |   | R(i-1) |   |  R(i)  |             |</span><br><span class=\"line\">+----+---+   +----+---+   +---+----+             |</span><br><span class=\"line\">     |            |           |                  |</span><br><span class=\"line\">     |            |           v+                 v-</span><br><span class=\"line\">     |            |</span><br><span class=\"line\">     |            |    +  +--------+        +--------+</span><br><span class=\"line\">     |            +-----&gt; |        |     +  |        |</span><br><span class=\"line\">     |                 +  |  S(i)  | +---+&gt; | S(i+1) |</span><br><span class=\"line\">     +-----------------+&gt; |        |        |        |</span><br><span class=\"line\">                          +--------+        +--------+</span><br><span class=\"line\"></span><br><span class=\"line\">分数变化</span><br><span class=\"line\">                                +--------------+</span><br><span class=\"line\">                                |   AddScore   |</span><br><span class=\"line\">                                +-+----+-----+-+</span><br><span class=\"line\">                                  |+   |     |</span><br><span class=\"line\">                                  v    |     |</span><br><span class=\"line\">+--------+   +--------+   +--------+   |     |+</span><br><span class=\"line\">| R(i-2) |   | R(i-1) |   |  R(i)  |   |     |</span><br><span class=\"line\">+--------+   +--------+   +--------+   |     |</span><br><span class=\"line\">                                       |     v</span><br><span class=\"line\">                          +--------+   |    +--------+</span><br><span class=\"line\">                          |  S(i)  |&lt;--+    | S(i+1) |</span><br><span class=\"line\">                          +--------+        +--------+</span><br><span class=\"line\">                                                 ^</span><br><span class=\"line\">                                                 |+</span><br><span class=\"line\">                                          +------------+</span><br><span class=\"line\">                                          |    Tool    |</span><br><span class=\"line\">                                          +------------+</span><br></pre></td></tr></table></figure>\n\n","categories":["系统设计"],"tags":["推荐系统"]},{"title":"如何设计一个海量数据过滤模块","url":"/2019-04-01-recommended-system-filter-module-md/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>所有的推荐系统都有一个基本的要求：<code>不给用户推荐重复的信息</code></p>\n<p>这里的重复的信息有两层含义  </p>\n<ol>\n<li><p>这个信息是id完全相同的一条信息<br> 这个很好理解，就是一模一样的两条信息，从数据库的角度将就是信息记录的主键id都相同<br> 如果用户已经接受过一次id为10086的信息的推荐，那这个10086就不能出现在后续的同类推荐中</p>\n</li>\n<li><p>这两个个信息相似度很高，但是id不同<br> 这种情况出现于两条信息内容相似，比如有两篇文章10001，10002都在说特朗普要在美国边境造墙的事情<br> 那如果用户观看过10001，此时再给用户推荐10002，就可能会让用户觉得推荐的东西已经看到过了，毫无意义</p>\n</li>\n</ol>\n<h1 id=\"处理相同id的过滤\"><a href=\"#处理相同id的过滤\" class=\"headerlink\" title=\"处理相同id的过滤\"></a>处理相同id的过滤</h1><p>我们的目的是给定一个id, 和一个已推荐集合，判断id是否在给定的集合以内</p>\n<h2 id=\"HashMap的方案\"><a href=\"#HashMap的方案\" class=\"headerlink\" title=\"HashMap的方案\"></a>HashMap的方案</h2><p>如果集合数据量比较少的情况下，我们可以使用Java中的<code>HashSet</code>存储集合， 使用contains来直接判断id是否在给定集合中，其他编程语言中也都有类似<code>HashSet</code>的数据结构</p>\n<p>由于<code>HashSet</code>的底层原理是使用的<code>HashMap</code>， 所以我直接使用 <code>HashMap</code>来进行原理的说明</p>\n<p>这种做法的原理其实是先将我们要查找的数据进行hash散列，映射到一个固定长度的地址空间<br>然后使用数组存储，如果有多个id经过hash映射到相同的地址空间那就做一个链表，存储相同hashcode对应的值   </p>\n<p>具体结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">|0|1009|0|1008|1998|</span><br><span class=\"line\">    ↓           ↓ </span><br><span class=\"line\">    107         87</span><br><span class=\"line\">    ↓            </span><br><span class=\"line\">    16</span><br></pre></td></tr></table></figure>\n\n<p>当我们查找id时， 也是先将要查找的id进行hash, 然后去对应的hashcode位置沿着链表/红黑树寻找是否有要查找的数字</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>使用简单，比较通用</li>\n<li>容易理解</li>\n<li>无误判</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>空间利用率太低</li>\n</ol>\n<h2 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h2><p>考虑到<code>HashMap</code>的空间利用率太低，不适合海量数据的存储</p>\n<p>我们可以利用计算机存储的一些特性，用另外一种方式来</p>\n<p>我们都知道计算机底层是用bit来存储信息的，每个bit能存储一个0或者1的信息</p>\n<p>如果我们使用二进制bit的位置信息来表示数字，对应位的bit值是1来代表这个数字存在，我们就可以在极小的空间存储大量的信息</p>\n<p>使用时只需使用位运算，查看对应位置的bit值即可</p>\n<p>Java中的bitset，redis中的bit操作都提供了这种bitmap的实现</p>\n<p>bitmap的详情可以查看 <a href=\"https://leriou.github.io/2017-12-29-user-tag-sys-on-bitmap/\">使用bitmap构建用户标签</a></p>\n<p>如下表示 【6，4，3】的集合 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bit值     0 1 0 1 1 0 0 0</span><br><span class=\"line\">位        7 6 5 4 3 2 1 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>空间利用率高</li>\n<li>性能好</li>\n<li>无误判</li>\n</ol>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>不够通用，要求数据的类型必须是数字且元素范围跨度不能太大</li>\n</ol>\n<h2 id=\"BloomFilter\"><a href=\"#BloomFilter\" class=\"headerlink\" title=\"BloomFilter\"></a>BloomFilter</h2><p>bloomfilter跟bitmap具有相似的原理， 都是使用位来存储信息，区别在于</p>\n<p>bitmap使用元素自身数字对应的位置信息来存储数据，如果要存储的元素是个字符串或者其他类型的数据就无法使用这种方式了，或者你要存储的数字范围特别的大，比如你要存储一个100亿的数字， 那样即使只有一个数字你也需要一个前面的位置都是0的100亿bit来表示，对空间的利用率还是不高 (现在有一些空间压缩的bitmap实现能一定程度解决数据范围分布过大和分布稀疏的问题)</p>\n<p>BloomFilter就是针对这些做了优化，如果我们把要处理的数字进行hash, 映射到一个固定长度的地址空间</p>\n<p>这样就同时解决了以上两个问题， 即缩减了映射的空间范围，又可以存储更通用的对象</p>\n<p>但是由于hash函数本身会有冲突，就会出现两个不同元素因为同样的hashcode而产生误判的情况</p>\n<p>处理这种情况的方法就是增加hash函数的数量， 假设两个元素使用一个函数冲突的概率是 0.01， 那如果我们使用3个不同的函数，每个函数足够均匀且误判率相同，对这两个元素进行hash, 那两个元素经过三个函数依然冲突的概率就是 0.000001， 但是基于概率的问题，误判率依然存在</p>\n<p>所以这种方法适合于允许一定误判率，并拥有海量数据要过滤的场景</p>\n<h3 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>通用</li>\n<li>空间效率高</li>\n<li>灵活，可以在性能和误判率之间做取舍</li>\n</ol>\n<h3 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>有误判</li>\n<li>性能不如</li>\n</ol>\n<h1 id=\"处理相似文本的重复\"><a href=\"#处理相似文本的重复\" class=\"headerlink\" title=\"处理相似文本的重复\"></a>处理相似文本的重复</h1><p>能处理相同的id造成的重复之后，如果我们可以找出一个文章的相似内容， 只要把相似的内容id也添加到需要过滤的集合， 就可以完成对相似内容的过滤</p>\n<h2 id=\"simhash\"><a href=\"#simhash\" class=\"headerlink\" title=\"simhash\"></a>simhash</h2><p>如果只是检测一模一样的两个字符串，那我们完全可以采用md5之类的摘要算法， 但是这种方法对文章内容又哪怕一个字的差别，就不再适用</p>\n<p>所以我们使用<code>simhash</code>来处理内容相似度的问题</p>\n<p>simhash的核心思想是先提取文章的最重要核心特征， 如果两篇文章的核心特征重复度较高，那就是相似文章</p>\n<p>步骤如下</p>\n<ol>\n<li>我们先对文本进行分词，并计算每个词的权重</li>\n<li>对每个词进行hash，并把hash结果的对应二进制位的 0 变为 -1</li>\n<li>把每个文章的每个词的处理过的hash值 * 权重，得到加权向量，并把每个加权向量相加得到最终向量</li>\n<li>把这个最终向量中的负数变为0，正数变为1</li>\n</ol>\n<p>然后通过汉明距离比较二进制位不同的个数，其实就是计算两个指纹的异或结果，结果中如果包含较少的1， 比如小于3个， 那就说明内容相同</p>\n","categories":["系统设计"],"tags":["推荐系统"]},{"title":"胡思乱想-有关当前社会的一些隐忧","url":"/2018-03-09-woolgather-social-problem/","content":"<p>我想说说我自己对当前社会的一些担忧</p>\n<p>我总觉得未来的3年(2018-2020)会是我国社会的重大转折点</p>\n<h1 id=\"人口结构的隐忧\"><a href=\"#人口结构的隐忧\" class=\"headerlink\" title=\"人口结构的隐忧\"></a>人口结构的隐忧</h1><p>中国的人口老龄化加剧已经是一个无法避免的事情了</p>\n<p>即便国家最近几年放开了二胎政策, 但是从数据上面看效果并不是很好</p>\n<p>下面是一份部分年份的出生和死亡人数的图(单位:万人)</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/KFjRLxNfbq9cUd5.png\" alt=\"people-1.png\"></p>\n<h2 id=\"出生与死亡人口\"><a href=\"#出生与死亡人口\" class=\"headerlink\" title=\"出生与死亡人口\"></a>出生与死亡人口</h2><p>目前我国的人均寿命男性在74岁, 女性在77岁, 综合平均值大概在75.5岁上下</p>\n<p>也就是说去年2017年, 按照平均寿命来算, 去年的大量正常死亡人口都是出生于1941年的, 假设我们预计平均寿命每5年增长一岁的话, 1946年出生的人口正常死亡时间在2023年左右,再加上一些非正常因素, 也就是说2023年左右死亡人数至少在1200万+</p>\n<p>从上面的图推论, 我们有理由相信在未来10年, 中国每年的死亡人口将迅速由每年970万左右上升到每年1600万+( 深绿色曲线将沿着浅绿色曲线旧轨迹上升)</p>\n<p>到2020年,1955年出生的人将步入65岁, 人到了这个阶段, 已经进入疾病高发期, 也就是说未来几年我国将新增至少5200万65岁以上的老人,这批人对养老和医疗造成的压力会很大, 我非常担忧之后医疗资源和社会资源的消耗情况</p>\n<h1 id=\"社会影响和政策\"><a href=\"#社会影响和政策\" class=\"headerlink\" title=\"社会影响和政策\"></a>社会影响和政策</h1><ul>\n<li>对出生人口的预测</li>\n</ul>\n<p>回过头来看我们的出生人口, 最近几年国内出生人口持续下降, 2016-17年由于二胎政策有小幅回升, 17年1700万出生人口中,二胎占800万(这其实是一个很不好的信号)</p>\n<p>当前国内的生育主力,还是1980-90年这一批人, 等到他们这一代人的生育意愿消耗完毕, 国内出生人口必然大幅下降, 因为91-96年出生人口本来就少了许多, 适龄生育人数更是大减</p>\n<p>我国人口出生的第一个高峰在60年代,第二个高峰在1985-1990年,第二个人口高峰出生的人的父母就是第一次人口高峰中出生的人,理论上来说85-90这一代人的孩子将会形成第三次人口高峰,预计在2015-2022年, 但是, 我们看一下出生数据表:</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/uHxwt5FIsrqBfGA.png\" alt=\"people-2.png\"></p>\n<p>我们来看1985-1990年的出生人口分别为<code>2042,2319,2528,2457,2513,2621</code>,平均 2413万人/年</p>\n<p>这一代人到了最佳生育期(24-30岁)之后对应的实际出生人口为 <code>1615,1574,1604,1635,1640,1687</code>(2009-2014),平均每年1625万人</p>\n<p><strong>也就是说正常情况下, 每年2400万人的适龄生育人口对应的生育婴儿人数大概是1600万,比例大概是 3:2</strong></p>\n<p>过去5年提供生育力量的主力人口就是这一批人,我们根据他们这一代人的出生人口数和生育情况可以预估未来5年的出生人口情况</p>\n<p>未来5年提供生育力量的的主力人口也就是 1991-1996这几年的出生人口分别为 <code>2008,1875,1791,1647,1693,1522</code> 平均1756万人/年</p>\n<p>根据3:2的比例,我们可以预测未来5年的生育人数是平均 1200万人/年</p>\n<p>我们根据以上信息, 来做一个有关中国人口的预测:</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/kP43NK5jmI8UZYJ.png\" alt=\"people-3.png\"></p>\n<p><strong>预计最迟中国将在2022年迎来人口负增长!!!</strong></p>\n<p><strong>最迟中国将在2022年迎来人口负增长!!!</strong></p>\n<p><strong>2022年人口负增长!!!</strong></p>\n<p>中国人口一旦减少, 将是一个革命性的时刻, 到时候很有可能中国将会走上一条没有人能预想到的道路</p>\n<h2 id=\"人口老龄化的影响\"><a href=\"#人口老龄化的影响\" class=\"headerlink\" title=\"人口老龄化的影响\"></a>人口老龄化的影响</h2><p><strong>人是社会的基础</strong> </p>\n<p>人口结构和数量的变化将会带来社会的巨大改变</p>\n<p>而目前我国逐步严重的人口老龄化将会为我们的社会带来难以想象的巨大的压力</p>\n<ul>\n<li>公众人物的离世</li>\n</ul>\n<p>在2018年有很多人感叹今年是怎么了</p>\n<p>一个接一个知名公众人物离世, 大家纷纷都说不喜欢2018年, 因为失去了太多喜爱的老前辈</p>\n<p>其实这个现象是正常的</p>\n<ol>\n<li>80, 90后是新媒体的第一代受众, 这一代人开始认识比父辈更多的公众人物, 我们认识的公众人物更多  </li>\n<li>电视, 广播时代的前几代先驱者到现在都逐步步入老年时代, 他们普遍比我们年纪大很多, 他们在变老  </li>\n</ol>\n<p>以后这个情况恐怕会越来越严重</p>\n<p>我算一笔账, 现代网络时代每个人听说过的的公众人物进入老年人行列的少说也有 1000人 </p>\n<p>假设他们都在30年内相继离世, 每年是30人, 平均下来, 差不多每10天就有一个你熟知的公众人物离世</p>\n<p>但是真实情况是我们每个人熟知的人远超 1000人, 他们也不一定都能长寿到100岁, 所以现实情况未来只会更糟糕</p>\n<ul>\n<li>未来还会有的影响</li>\n</ul>\n<ol>\n<li>殡葬行业的需求量未来会爆增, 加上我国传统思想的影响, 行业将会迎来前所未有的机遇</li>\n<li>医疗资源紧张, 成人纸尿裤一定会大卖 ^_^</li>\n<li>健康保健行业的机遇, 以后大家会越来越重视健康生活, 保健品行业可能会迎来爆发期</li>\n<li>旅游行业和保险行业未来也会进入一段时间的黄金时期</li>\n<li>同时由于国内文化的特殊性, 老龄化还会造成教育行业的快速发展</li>\n</ol>\n<p>诸位注意投资</p>\n<h2 id=\"平均寿命和养老金\"><a href=\"#平均寿命和养老金\" class=\"headerlink\" title=\"平均寿命和养老金\"></a>平均寿命和养老金</h2><p>我国早期制定的养老金计划是依照平均寿命60岁制定的, 可当时的人们没有想到人类的平均寿命增长的如此之快</p>\n<p>以至于旧有的养老金制度无法满足当前社会的需要, 我国养老金亏空已经是人尽皆知的事情了</p>\n<p>现在年轻人生育欲望低, 未来的养老更是没有保障, 这样我估计将来怕是连这个养老金制度都会崩溃</p>\n<p>养老金问题已经成为了我国一个十分重大的社会问题, 不知道未来国家会采用怎么样的方式来解决</p>\n<h2 id=\"房价\"><a href=\"#房价\" class=\"headerlink\" title=\"房价\"></a>房价</h2><p>在我们的邻国日本有研究表明, 日本的房价和年轻人的生育意愿呈负相关.</p>\n<p>国内现在房价如此之高,导致养孩子的成本极高, 没有一定的物质积累,年轻人怕是不敢妄谈生育</p>\n<p>高房价会进一步降低年轻人的生育意愿</p>\n<p>我上面对我国出生人口的预测还是太过乐观了</p>\n<p>不过我同时也觉得现在房价泡沫有点偏大了, 预计未来3年(2018-2020)就会破灭, 房价就会崩盘</p>\n<p>即便很多人说国家不会允许房价崩盘, 但是我想说, 房价不崩盘, 其他所有实体行业统统要崩盘, 两害相权取其轻, 相信国家会这么选择的</p>\n<p>所以打算买房的朋友可以稍微等上几年</p>\n<h2 id=\"国家未来几年可能会采取鼓励生育政策\"><a href=\"#国家未来几年可能会采取鼓励生育政策\" class=\"headerlink\" title=\"国家未来几年可能会采取鼓励生育政策\"></a>国家未来几年可能会采取鼓励生育政策</h2><p>由于人口压力,国家未来几年一定会出台各种鼓励生育的政策</p>\n<p>我在这里做一下预测, 未来几年可能会采取的政策</p>\n<ol>\n<li>取消多胎生育限制</li>\n</ol>\n<p>现在仅仅是取消了二胎的限制, 多胎依然是违法的, 未来很有可能会彻底取消生育限制, 以刺激农村乡镇人民的生育意愿</p>\n<blockquote>\n<p>ps: 据彭博社消息, 中国将来2018年年底取消多胎限制,消息未经官方证实</p>\n</blockquote>\n<ol start=\"2\">\n<li>延长退休年龄</li>\n</ol>\n<p>国家已经在进行这方面的政策调整了, 未来说不定会跟新加坡一样, 彻底取消退休年龄, 永不退休</p>\n<ol start=\"3\">\n<li>增加女性生产福利</li>\n</ol>\n<p>增加女性生产福利(比如: 强制半年产假,男方陪产3个月). 不过如此一来很可能会起到其他意想不到的效果</p>\n<p>比如:增加产假时长等于变相增加企业雇佣女性的成本, 没有企业愿意在同等条件下雇用女性, 导致女性工作难找, 不得不在家生孩子, 现在的欧洲已经在这么做了</p>\n<ol start=\"4\">\n<li>利用媒体鼓动年轻人谈恋爱</li>\n</ol>\n<p>鼓励年轻人谈恋爱同事灌输多子多福的思想才是理论上的可持续发展战略</p>\n<p>其他的政策都只能治标不能治本</p>\n<h1 id=\"教育和阶级固化\"><a href=\"#教育和阶级固化\" class=\"headerlink\" title=\"教育和阶级固化\"></a>教育和阶级固化</h1><h2 id=\"教育周期的延长\"><a href=\"#教育周期的延长\" class=\"headerlink\" title=\"教育周期的延长\"></a>教育周期的延长</h2><p>随着现在社会的发展, 人类掌握的知识总量呈指数发展</p>\n<p>同样, 一个人从出生到达科研领域最前沿的时间也在不断增长</p>\n<p>牛顿时代,一个25岁的数学系高材生就能接触到最前沿的数学理论研究, 此时的物理更是连基本的框架都没有, 这个时期人学习某种技术的周期相对较短, 一般能在25岁完成对所需基本知识的积累</p>\n<p>到了现代, 哪怕你专研一个领域并且博士毕业, 都未必能接触到最前沿的研究</p>\n<p>科研要突破必须先走到研究的最前沿, 但是要走到最前沿又必须有足够的知识积累, 这就导致现代人接触前沿科学的时间被大大拉长</p>\n<p>以前 25-30岁的科研人员就能接触到最前沿的技术, 现在得等到40-50岁才有可能完成早起必要的知识积累, 但是4,50岁的人了, 哪还有那么多精力来搞研究, 前沿研究的迟滞会导致整个科学学科的发展变慢</p>\n<p>人类的科技进步已经不可避免要出现瓶颈了</p>\n<p>这种矛盾产生的原因是因为人类社会的发展太过迅速, 人类的进化速度赶不上社会的发展速度, 彼此之间不能很好的匹配</p>\n<p>可能有效的解决方案</p>\n<ol>\n<li>领域继续细分，降低研究人员积累必要知识的负担</li>\n<li>借助电脑帮助加快研究速度</li>\n</ol>\n<h2 id=\"阶级固化\"><a href=\"#阶级固化\" class=\"headerlink\" title=\"阶级固化\"></a>阶级固化</h2><p><strong>社会阶层的固化是历史上每一段和平时期的主旋律</strong></p>\n<p>我只说一个现象,我当年上学时候, 同学里面还有县长的孩子,教育局长的孩子.公安局副局长的孩子<br>但是我弟弟上学的时候, 都已经很少遇到权贵子弟了, 是当任的权贵年龄偏大吗, 不是,是因为这些人的孩子早出国去了   </p>\n<p>大家自己富裕了, 自然就想给孩子更好地条件<br>富者愈富, 穷者愈穷<br><strong>而且这是个死循环,你还不能不给孩子投入</strong><br>我有朋友说,”有多少钱,出多少资源, 不可能什么都给孩子准备好,只能靠他自己,我当年没钱也不过来了吗”<br>其实这种看法我是很反对的     </p>\n<p>现在很多小孩子你不给他报什么钢琴班,美术班,英语班, 他会的技能就比其他孩子少,小孩子们之间攀比心很重,你孩子不懂这些,没有这些,人家别的小孩子不跟你玩…<br>别人有Switch,你没有, 别人报了绘画班,钢琴班,你没有,别人学了英语/美术,你没有, 那别人就不跟你玩…因为孩子也有圈子,圈子是由共同语言组形成的   </p>\n<p>你的孩子不应该拿来跟20多年前的你来比, 他的竞争对手是他的同龄人, 应该看看他们同龄人是怎么样的条件<br>而且现在很多老师会在入学时候收集家长信息,对孩子因家庭条件施教,甚至你不给老师送红包就不在意你孩子<br><strong>这都是中国特色的现象,逼着你的孩子不得不拼爹</strong><br>这几年这种现象尤为明显, 现在大家都希望把最大的投入放到孩子的教育上面, 由于教育的投入,孩子的差距也会越来越大<br>就像&lt;&lt;名侦探柯南&gt;&gt;里面有一集说的: 政治家的儿子依然是政治家, 企业家的孩子依然是企业家, 明星的孩子依旧是明星<br>日本已经经历过我过正在经历的阶段和遇到的诸多问题, 日本的现状我们能从中学到很多    </p>\n<blockquote>\n<p>秦人不暇自哀，而后人哀之；后人哀之而不鉴之，亦使后人而复哀后人也。</p>\n</blockquote>\n","categories":["生活记录"],"tags":["思考"]},{"title":"MongoDB和Elasticsearch的对比","url":"/2019-01-09-mongodb-compareto-elasticsearch/","content":"<h1 id=\"MongoDB-vs-Elasticsearch\"><a href=\"#MongoDB-vs-Elasticsearch\" class=\"headerlink\" title=\"MongoDB  vs Elasticsearch\"></a>MongoDB  vs Elasticsearch</h1><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">MongoDB</th>\n<th align=\"center\">ElasticSearch</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定位</td>\n<td align=\"center\">(文档型)数据库</td>\n<td align=\"center\">(文档型)搜索引擎</td>\n<td>一个管理数据,一个检索数据</td>\n</tr>\n<tr>\n<td align=\"center\">资源占用</td>\n<td align=\"center\">一般</td>\n<td align=\"center\">高</td>\n<td>mongo使用c++, es使用Java开发</td>\n</tr>\n<tr>\n<td align=\"center\">写入延迟</td>\n<td align=\"center\">低</td>\n<td align=\"center\">高</td>\n<td>es的写入延迟默认1s, 可配置, 但是要牺牲一些东西</td>\n</tr>\n<tr>\n<td align=\"center\">全文索引支持度</td>\n<td align=\"center\">一般</td>\n<td align=\"center\">非常好</td>\n<td>es本来就是搜索引擎, 这个没啥可比性</td>\n</tr>\n<tr>\n<td align=\"center\">有无Schema</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n<td>两者都是无Schema</td>\n</tr>\n<tr>\n<td align=\"center\">支持的数据量</td>\n<td align=\"center\">PB+</td>\n<td align=\"center\">TB+  ~ PB</td>\n<td>两者支持的量并不好说的太死, 都支持分片和横向扩展, 但是相对来说MongoDB的数据量支持要更大一点</td>\n</tr>\n<tr>\n<td align=\"center\">性能</td>\n<td align=\"center\">非常好</td>\n<td align=\"center\">好</td>\n<td>MongoDB在大部分场景性能比es强的多得多</td>\n</tr>\n<tr>\n<td align=\"center\">索引结构</td>\n<td align=\"center\">B树</td>\n<td align=\"center\">LSM树</td>\n<td>es追求写入吞吐量, MongoDB读写比较均衡</td>\n</tr>\n<tr>\n<td align=\"center\">操作接口</td>\n<td align=\"center\">TCP</td>\n<td align=\"center\">Restful(Http)</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">是否支持分片</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">是否支持副本</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">选主算法</td>\n<td align=\"center\">Bully(霸凌)</td>\n<td align=\"center\">Bully(霸凌)</td>\n<td>相比于Paxos和Raft算法实现更简单并有一定可靠性上的妥协，但是选举速度比较快</td>\n</tr>\n<tr>\n<td align=\"center\">扩展难度</td>\n<td align=\"center\">容易</td>\n<td align=\"center\">非常容易</td>\n<td>es真的是我用过的扩展最方便的存储系统之一</td>\n</tr>\n<tr>\n<td align=\"center\">配置难度</td>\n<td align=\"center\">难</td>\n<td align=\"center\">非常容易</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">地理位置</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">运维工具</td>\n<td align=\"center\">丰富</td>\n<td align=\"center\">一般</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">插件和引擎</td>\n<td align=\"center\">有多个存储引擎供选择</td>\n<td align=\"center\">有大量插件可以使用</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h1 id=\"两者的定位\"><a href=\"#两者的定位\" class=\"headerlink\" title=\"两者的定位\"></a>两者的定位</h1><p><code>MongoDB</code>和<code>Elasticsearch</code>都属于NoSQL大家族, 且都属于文档型数据存储</p>\n<p>所以这两者的很多功能和特性高度重合, 但其实两者定位完全不同     </p>\n<p>MongoDB 是 <strong>文档型数据库</strong>,  提供 <strong>数据存储和管理服务</strong><br>Elasticsearch 是<strong>搜索服务</strong>, 提供 <strong>数据检索服务</strong></p>\n<p>两者的很大区别在于源数据的存储和管理</p>\n<ul>\n<li>MongoDB作为一个数据库产品, 是拥有源数据管理能力的     </li>\n<li>Elasticsearch作为一个搜索引擎, 定位是<strong>提供数据检索服务</strong>, 也就是说我只管查, 不管写 ^_^, Elasticsearch的Mapping不可变也是为此服务的, 带来的代价就是<code>es不适合作为数据管理者</code>, es可以从其他数据源同步数据过来提供查询, 但是不适合自己对数据进行存储和管理 </li>\n</ul>\n<p>es更侧重数据的查询, 各种复杂的花式查询支持的很好, 相比来说 MongoDB的查询能力就显得比较平庸了</p>\n<p>由此可见, 对于个人, 如果你有一批数据要看, 但是不经常进行修改, 这个时候毫无疑问可以用es, 但是如果你还打算继续修改数据, 最好就是使用MongoDB，但其实对大多数人公司来讲，这两者的数据管理能力并没有多大的影响</p>\n<blockquote>\n<p>ps: es修改Mapping的代价非常高, 所以我们一般都是把新数据重新写入一份新索引，然后直接切换读取的别名到新的索引</p>\n</blockquote>\n<h1 id=\"两者读写数据的异同\"><a href=\"#两者读写数据的异同\" class=\"headerlink\" title=\"两者读写数据的异同\"></a>两者读写数据的异同</h1><p><code>MongoDB</code>和<code>ElasticSearch</code>都支持全文索引, 虽然MongoDB的全文索引效果完全无法跟es相比(es毕竟是专业的搜索引擎产品, 着重提供数据的检所支持, 这方面吊打MongoDB也是可以理解的)</p>\n<p>MongoDB虽然在支持的部分查询功能上稍微弱于es, 但是在大部分场景下性能方面完爆es, 不管是读性能, 还是写性能</p>\n<p>es的写入延迟默认为1s, 这个虽然是写入延迟的范畴, 但是毫无疑问是一大缺点, 虽然可以配置为更短的时间, 但是这样就要牺牲一定的数据吞吐量, 会造成更频繁的磁盘刷新操作</p>\n<p>es底层使用<code>Lucene</code>作为核心引擎, 很多es的设计就是为了匹配Lucene中的概念, 其实es可以看成一个lucene的proxy层包装,将lucene的原生接口封装的更好用, 同时还实现了很多管理和监控等辅助功能, 但是整体来说es上层的模块和lucene的隔阂还是挺明显的, 耦合度上有一定的欠缺</p>\n<p>MongoDB则是完整的一个单体数据库产品, 虽然内部的存储引擎也是可插拔式的, 整体而言还是更加的浑然一体</p>\n<blockquote>\n<p>MongoDB支持多种存储引擎, 本文所有涉及mongo存储引擎的只谈默认的WiredTiger引擎, 其实还有某些方面更优秀的其他引擎,例如: MongoRocks等</p>\n</blockquote>\n<h1 id=\"部署和资源占用\"><a href=\"#部署和资源占用\" class=\"headerlink\" title=\"部署和资源占用\"></a>部署和资源占用</h1><p>单机部署的话其实MongoDB和Elasticsearch都十分的方便, 不过es相对来说资源占用更多一点, 性能也比MongoDB要弱一点</p>\n<p>集群化的部署, 我们一般都会选择分片+副本的部署方式, 这种方式下, es部署起来比MongoDB方便太多, MongoDB要部署一套完整的分片 + 副本模式还是比较麻烦的, 没有经验的人部署起来需要一定的学习成本    </p>\n<p>资源占用方面, MongoDB可以支持存储文件类型的数据, 作为数据库也有数据压缩能力, es则因为大量的索引存在需要占用大量的磁盘和内存空间</p>\n<h1 id=\"可用性和容错\"><a href=\"#可用性和容错\" class=\"headerlink\" title=\"可用性和容错\"></a>可用性和容错</h1><p>MongoDB和ElasticSearch作为天生分布式的代表产品都支持数据分片和副本   </p>\n<p>两者都通过分片支持水平扩展, 同时都通过副本来支持高可用(HA) </p>\n<p>分片就是一个数据集的数据分为多份, 同时分布在多个节点上存储和管理, 主流分片方式有两种: hash分片和range分片, 两种分片方式各有优势, 适合不同的场景</p>\n<p>副本就是一份数据集同时有一个或者多个复制品(有些地方叫主从), 每份复制品都一模一样, 但是为了保证数据的一致性, 往往多个副本中只有一个作为Primary副本(通过选主算法从多个副本中选出Primary), 提供写服务, 其他副本只提供读, 或者只提供备份服务</p>\n<blockquote>\n<p>ps:es和MongoDB都可以通过副本增强读能力, 这与kafka很不一样(kafka的副本只有备份功能)</p>\n</blockquote>\n<h2 id=\"两者分布式方案的一些不同\"><a href=\"#两者分布式方案的一些不同\" class=\"headerlink\" title=\"两者分布式方案的一些不同\"></a>两者分布式方案的一些不同</h2><p>MongoDB和Elasticsearch虽然都是分布式服务, 但是还是有一些不同方案的选择的</p>\n<ul>\n<li>分片和副本单位的划分</li>\n</ul>\n<p>MongoDB是以节点为单位划分角色, 一旦一个节点被指定为副本, 其上面的数据都是副本</p>\n<p>Elasticsearch是以分片为单位划分角色, 一个节点上即可以拥有某分片的主分片和可以同时拥有另一个分片的副本分片, 同时es还支持自动的副本负载均衡, 如果一个新节点上面什么数据都没有, 系统会自动分配分片数据过来 </p>\n<ul>\n<li>架构模式</li>\n</ul>\n<p>MongoDB的副本和分片是两种不同的模式, 虽然可以同时使用但是依然有各自的架构设计, 用户可以任意选择选型进行搭配, 每个节点的职责更加专一, 方便据此调整机器配置和进行优化</p>\n<p>Elasticsearch中的分片 + 副本是一套统一的架构设计, 每个节点具有接近同等的地位, 配置使用起来更加简单, 但是如果要针对节点所负责的功能对机器进一步做定制就不如MongoDB灵活</p>\n<h1 id=\"文档型数据库的特点和问题\"><a href=\"#文档型数据库的特点和问题\" class=\"headerlink\" title=\"文档型数据库的特点和问题\"></a>文档型数据库的特点和问题</h1><h2 id=\"无schema\"><a href=\"#无schema\" class=\"headerlink\" title=\"无schema\"></a>无schema</h2><p>文档型数据存储既能享受无schema限制带来的灵活, 又能享受索引查询的快速和类SQL查询的便捷</p>\n<p>使他们用起来不像传统的RDBMS那么麻烦, 又不像 Redis,Hbase这种数据库查询功能不够强大, 处在一个传统RDBMS和经典K-V存储之间的比较均衡的位置</p>\n<p>我个人很喜欢这个特性, 没有schema的限制, 存储数据更方便也更灵活了, 但是有得有失, 很多固定schema的好处就无法享受到了, 比如: 对数据的高效压缩</p>\n<h2 id=\"鸡肋的Collection-和-Type\"><a href=\"#鸡肋的Collection-和-Type\" class=\"headerlink\" title=\"鸡肋的Collection 和 Type\"></a>鸡肋的Collection 和 Type</h2><p>早期为了跟传统rdbms数据库保持概念一致 ，mongodb和elasticsearch都设计了跟传统数据库里面的<code>库-&gt;表-&gt;记录行</code>对应的概念，具体如下</p>\n<table>\n<thead>\n<tr>\n<th>RDBMS</th>\n<th>MongoDB</th>\n<th>Elasticsearch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>库</td>\n<td>库</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>表</td>\n<td>集合</td>\n<td>类型</td>\n</tr>\n<tr>\n<td>记录</td>\n<td>文档</td>\n<td>文档</td>\n</tr>\n</tbody></table>\n<p>其实对于nosql数据库来讲, 集合/类型的意义其实不大, Nosql数据库几乎都是k-v类型的存储结构，完全可以通过key进行业务隔离和区分，真的没有必要为了跟传统数据库对应强行搞出来一个中间概念 ^_^</p>\n<p>Elasticsearch从<code>6.x</code>版本开始强制只允许一个索引使用一个type, 其实就是意识到这个这个设计的失误, 不想让你用这个type类型, 因为type和传统数据库里面的表概念其实是不一样的，这种概念类比给人造成了误解，到了es的7.x版本会默认取消type类型, 就说明这个type字段真的是鸡肋的不行</p>\n<h2 id=\"弱事务\"><a href=\"#弱事务\" class=\"headerlink\" title=\"弱事务\"></a>弱事务</h2><p>MongoDB以前只是支持同一文档内的原子更新, 以此来实现伪事务功能, 不过Mongo4.0支持Replica Set事务, 大大加强了事务方面的能力 </p>\n<p>es在这方面倒没有什么进展，因为从应用场景上es对事务的需求不高，不过用户其实也可以使用同文档更新或者通过程序自己来实现事务机制</p>\n<h2 id=\"无join支持\"><a href=\"#无join支持\" class=\"headerlink\" title=\"无join支持\"></a>无join支持</h2><p>文档型数据库大多数都不支持join(也有少量支持的), 但是我一般也用不上多表join的功能, 即便真的需要使用join也可以通过应用层或者通过耦合数据来实现（不过据说未来Mongo4.2版本会带来对join的支持）</p>\n<p>不支持join带来的问题就是我们需要自己对数据进行连接, 但是这在擅长使用分布式计算的大数据领域不算什么问题, 相应的缺少join功能可能对善于使用SQL的数据分析师就不大友好</p>\n<h2 id=\"Bully的选主算法的缺陷\"><a href=\"#Bully的选主算法的缺陷\" class=\"headerlink\" title=\"Bully的选主算法的缺陷\"></a>Bully的选主算法的缺陷</h2><p>elasticsearch和MongoDB选择的选主算法实现很简单, 但是代价就是有几率出现脑裂的情况, 当然, 具体情况跟配置也有关系(比如:你有三个es节点但是设置的最小主节点数为1, 将最小主节点数设置为2可以避免脑裂情况)</p>\n<p>不过脑裂问题一方面发生概率较低，另一方面即使出现了脑裂的情况, 使用<code>重启大法</code>一般就能解决 ^_^</p>\n<p>总体来说, 这方面不如使用Paxos和Raft算法或者使用zk做协调器的其他分布式系统靠谱</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>运维工具</li>\n</ul>\n<p>两者背后都有商业公司的支持</p>\n<p>MongoDB的很多客户端和运维工具更丰富, 但是MongoDB作为一个数据库产品, 相对应的对运维人员的要求也要更高一点</p>\n<p>Elasticsearch则有整套的数据分析和收集工具提供, 配套的kibana就是一个很不错的管控es的工具</p>\n<ul>\n<li>操作接口</li>\n</ul>\n<p>es使用Restful来提供统一的操作接口, 屏蔽了各种语言之间的障碍, 但是同样带来了表达能力和性能的损失</p>\n<p>MongoDB则使用TCP, 降低了序列化和网络这一层的性能损耗, 并最大程度保留了接口的内容表达能力, 但是相对的使用起来就不如http那么的方便</p>\n<h1 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h1><p>两者其实在很多使用场景上有重合之处, 是可以互相替代, 比如日志收集</p>\n<p>但是某些方面两者又各有特色，比如： 如果打算使用一个文档型的业务数据库， 那最好还是选mongodb, 如果你有要求复杂查询又并发性能要求高的场景，类似搜索服务，那最好的选择是elasticsearch</p>\n<p>除此之外：</p>\n<p>MongoDB有多个存储引擎可以选择, 而且MongoDB不仅看重数据的分析, 对数据的管理同样看重, 总的来说MongoDB更倾向于数据的存储和管理, 可以作为数据源对外提供， 未来说不定还会有支持join和支持倒排索引的mongo引擎出现</p>\n<p>Elasticsearch则有很多插件可以使用, 相对来讲Elasticsearch更倾向于数据的查询, 一般情况下elasticsearch仅作为数据检索服务和数据分析平台, 不直接作为源数据管理者</p>\n<ul>\n<li>MongoDB适合</li>\n</ul>\n<ol>\n<li>对服务可用性和一致性有高要求</li>\n<li>无schema的数据存储 + 需要索引数据</li>\n<li>高读写性能要求, 数据使用场景简单的海量数据场景</li>\n<li>有热点数据, 有数据分片需求的数据存储</li>\n<li>日志, html, 爬虫数据等半结构化或图片，视频等非结构化数据的存储</li>\n<li>有js使用经验的人员(MongoDB内置操作语言为js)</li>\n</ol>\n<ul>\n<li>Elasticsearch适合</li>\n</ul>\n<ol>\n<li>已经有其他系统负责数据管理</li>\n<li>对复杂场景下的查询需求，对查询性能有要求, 对写入及时性要求不高的场景</li>\n<li>监控信息/日志信息检索</li>\n<li>小团队但是有多语言服务，es拥有restful接口，用起来最方便</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MongoDB和Elasticsearch都是我比较喜欢的存储产品</p>\n<p>两者的功能特性也存在很多重合的地方, 其实现在很多数据库产品都在互相借(chao)鉴(xi), 功能和特性都在逐渐变得相似, 这也是未来很多存储产品的发展趋势, 大家都希望自己能覆盖尽量多的场景和用户群体</p>\n<p>很多产品总是在不断的从<code>没有</code>-&gt;<code>有</code>-&gt;<code>功能丰富</code>,但是功能丰富一定是做了很多的妥协, 于是又有了 <code>功能众多的单体服务</code>-&gt;<code>多个功能单一的子服务</code> 方向的转变,就像三国里面说的 “天下大势, 分久必合合久必分”. </p>\n<p>现在NoSQL数据库产品就在这个路上, NoSQL归根到底都是 RDBMS的某个方面的妥协, 现在各种NoSQL 也都在加入对经典SQL和传统RDBMS的 join, 事务的支持, 但是我相信等到两者区别足够小的时候, 一定会有放弃了大而全, 而专注于某一场景的新的存储产品出现，到时候搞不好又是一波新的Nosql潮流 </p>\n","categories":["编程工具"],"tags":["NoSQL","MongoDB","Elasticsearch"]},{"title":"2020年读书记录","url":"/2020-01-01-record/","content":"<h1 id=\"2020\"><a href=\"#2020\" class=\"headerlink\" title=\"2020\"></a>2020</h1><h1 id=\"1月\"><a href=\"#1月\" class=\"headerlink\" title=\"1月\"></a>1月</h1><p>看书:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 影响力</li>\n<li><input disabled=\"\" type=\"checkbox\"> 文明的冲突</li>\n<li><input disabled=\"\" type=\"checkbox\"> java编程的逻辑</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 投资者的敌人</li>\n</ul>\n<h1 id=\"2月\"><a href=\"#2月\" class=\"headerlink\" title=\"2月\"></a>2月</h1><p>Books：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 海龟交易法则</li>\n<li><input disabled=\"\" type=\"checkbox\"> 债务危机 </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 影响力</li>\n</ul>\n<h1 id=\"3月\"><a href=\"#3月\" class=\"headerlink\" title=\"3月\"></a>3月</h1><p>Books:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 文明的冲突</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> java编程的逻辑</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 从一到无穷大</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 未来简史：从智人到智神</li>\n</ul>\n<h1 id=\"4月\"><a href=\"#4月\" class=\"headerlink\" title=\"4月\"></a>4月</h1><p>Books:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 算法导论</li>\n<li><input disabled=\"\" type=\"checkbox\"> 深入理解jvm虚拟机</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> rust程序编程语言</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> rust primer</li>\n<li><input disabled=\"\" type=\"checkbox\"> Structure and Interpretation of Computer Program(SICP)</li>\n</ul>\n<h1 id=\"5月\"><a href=\"#5月\" class=\"headerlink\" title=\"5月\"></a>5月</h1><p>Books:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Structure and Interpretation of Computer Program(SICP)</li>\n<li><input disabled=\"\" type=\"checkbox\"> </li>\n</ul>\n","categories":["生活记录"]},{"title":"双读和双写的数据库迁移方案","url":"/2020-01-11-data-migration/","content":"<h1 id=\"几种数据库迁移的方案\"><a href=\"#几种数据库迁移的方案\" class=\"headerlink\" title=\"几种数据库迁移的方案\"></a>几种数据库迁移的方案</h1><p>我们在工作中可能会遇到业务升级或者是数据库存储更换选型或者其他的需要做数据迁移的需求</p>\n<p>有可能是从oracle更换到mysql这种异构数据的迁移或者是从mysql5.7升级到mysql8这种大版本数据的迁移</p>\n<p>这种时候我们就需要一套数据库迁移的方案</p>\n<p>我们希望</p>\n<ol>\n<li>不能丢数据</li>\n<li>尽量不影响业务</li>\n</ol>\n<h2 id=\"数据同步停机重启方案\"><a href=\"#数据同步停机重启方案\" class=\"headerlink\" title=\"数据同步停机重启方案\"></a>数据同步停机重启方案</h2><p>最简单的方案就是对数据库停机， 然后copy旧数据到新的数据库</p>\n<p>这种数据同步方案非常简单，但是有个致命的问题就是业务要中断，所以肯定会被否掉</p>\n<h2 id=\"双写机制\"><a href=\"#双写机制\" class=\"headerlink\" title=\"双写机制\"></a>双写机制</h2><p>这种方案过程如下</p>\n<ol>\n<li>先对存量数据进行不停机的迁移</li>\n<li>改造我们的数据写入端， 使数据同时写入旧数据库和新数据库</li>\n<li>等到双写服务运行一段时间，再次进行旧数据和新数据的完全同步、</li>\n<li>完全切换读取的数据源为新数据库， 关闭旧数据库的写入和读取，下线旧数据库</li>\n</ol>\n<p>该方案比较复杂： 适合业务要求高的事务型数据库的迁移(我们前东家在做oracle到mysql的迁移就采用类似的方案)</p>\n<h2 id=\"渐进式双读\"><a href=\"#渐进式双读\" class=\"headerlink\" title=\"渐进式双读\"></a>渐进式双读</h2><p>这种方案我们采用渐进式的双读方案</p>\n<ol>\n<li>所有新写入的数据都完全写到新数据库</li>\n<li>读取程序先读新数据库，新数据库中不存在的再读取老数据库， 如果老库存在就把老的库的数据迁移到新的数据库中</li>\n<li>等到老的数据库中数据量变为0， 或者到达一个非常低的阈值， 就进行老数据库的下线</li>\n</ol>\n<p>该方案适合读取内容相对简单的k-v数据库之间的迁移（redis中的rehash就是采用这种机制）</p>\n","categories":["工程经验"],"tags":["mysql"]},{"title":"Elasticsearch中的常用查询语句示例","url":"/2019-12-25-es-dsl/","content":"<h1 id=\"前记\"><a href=\"#前记\" class=\"headerlink\" title=\"前记\"></a>前记</h1><p>由于公司内部的研发团队越来越多的接触到复杂的查询需求，也越来越多的依赖大数据部门提供的es搜索引擎提供查询服务</p>\n<p>特此整理一些es常用的查询语句用于培训</p>\n<h1 id=\"数据初始化和准备工作\"><a href=\"#数据初始化和准备工作\" class=\"headerlink\" title=\"数据初始化和准备工作\"></a>数据初始化和准备工作</h1><h2 id=\"es和kibana安装\"><a href=\"#es和kibana安装\" class=\"headerlink\" title=\"es和kibana安装\"></a>es和kibana安装</h2><p>可以从 <a href=\"https://github.com/leriou/docker-env/tree/master/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://github.com/leriou/docker-env/tree/master/elasticsearch</a></p>\n<p>直接使用docker编排文件构建基于docker的es本地服务</p>\n<p><code>docker-compose up -d</code> 启动服务,启动成功访问kibana命令控制台</p>\n<p>es: elasticsearch 实例，主要存储和搜索引擎<br>kibana： elasticsearch的一个web层GUI客户端，可以方便的查询es里面的数据，这些年用了一大堆各种各样的第三方GUI，用来用去还是kibana最方便</p>\n<h2 id=\"准备测试数据\"><a href=\"#准备测试数据\" class=\"headerlink\" title=\"准备测试数据\"></a>准备测试数据</h2><p>先准备一部分数据用于演示</p>\n<p>创建测试用的索引<code>put test_idx</code></p>\n<p>创建测试文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">put test_idx/_doc/1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\"name\":\"111\",</span><br><span class=\"line\">\t\"tags\":[\"a\",\"c\",\"d\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下是用于示范的数据文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        \"_index\": \"test_idx\",</span><br><span class=\"line\">        \"_type\": \"_doc\",</span><br><span class=\"line\">        \"_id\": \"8\",</span><br><span class=\"line\">        \"_score\": 1,</span><br><span class=\"line\">        \"_source\": &#123;</span><br><span class=\"line\">          \"name\": \"a888\",</span><br><span class=\"line\">          \"tags\": [</span><br><span class=\"line\">            \"ab\"</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          \"age\": 7,</span><br><span class=\"line\">          \"content\": \"明天\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        \"_index\": \"test_idx\",</span><br><span class=\"line\">        \"_type\": \"_doc\",</span><br><span class=\"line\">        \"_id\": \"2\",</span><br><span class=\"line\">        \"_score\": 1,</span><br><span class=\"line\">        \"_source\": &#123;</span><br><span class=\"line\">          \"name\": \"222\",</span><br><span class=\"line\">          \"tags\": [</span><br><span class=\"line\">            \"a\"</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          \"age\": 18</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        \"_index\": \"test_idx\",</span><br><span class=\"line\">        \"_type\": \"_doc\",</span><br><span class=\"line\">        \"_id\": \"4\",</span><br><span class=\"line\">        \"_score\": 1,</span><br><span class=\"line\">        \"_source\": &#123;</span><br><span class=\"line\">          \"name\": \"444\",</span><br><span class=\"line\">          \"tags\": [</span><br><span class=\"line\">            \"d\",</span><br><span class=\"line\">            \"i\"</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          \"age\": 0,</span><br><span class=\"line\">          \"content\": \"明天北京的天气很好，是个大晴天 \"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        \"_index\": \"test_idx\",</span><br><span class=\"line\">        \"_type\": \"_doc\",</span><br><span class=\"line\">        \"_id\": \"1\",</span><br><span class=\"line\">        \"_score\": 1,</span><br><span class=\"line\">        \"_source\": &#123;</span><br><span class=\"line\">          \"name\": \"111\",</span><br><span class=\"line\">          \"tags\": [</span><br><span class=\"line\">            \"a\",</span><br><span class=\"line\">            \"c\",</span><br><span class=\"line\">            \"d\"</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        \"_index\": \"test_idx\",</span><br><span class=\"line\">        \"_type\": \"_doc\",</span><br><span class=\"line\">        \"_id\": \"3\",</span><br><span class=\"line\">        \"_score\": 1,</span><br><span class=\"line\">        \"_source\": &#123;</span><br><span class=\"line\">          \"name\": \"333\",</span><br><span class=\"line\">          \"tags\": [</span><br><span class=\"line\">            \"e\",</span><br><span class=\"line\">            \"f\"</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          \"age\": 18,</span><br><span class=\"line\">          \"content\": \"明天上海的天气不好，有小雨\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"简单查询示范\"><a href=\"#简单查询示范\" class=\"headerlink\" title=\"简单查询示范\"></a>简单查询示范</h1><h2 id=\"n对n查询\"><a href=\"#n对n查询\" class=\"headerlink\" title=\"n对n查询\"></a>n对n查询</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1对1匹配查询：适用于 查询条件为1个值，被查询对象字段也为1个值的情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">where</span> name = 111</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"term\": &#123;</span><br><span class=\"line\">      \"name\": &#123;</span><br><span class=\"line\">        \"value\": 111</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1对多查询：适用于 查询条件为一个，查询值为[]的情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">where</span> find_in_set(tags, <span class=\"string\">\"a\"</span>)</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"terms\": &#123;</span><br><span class=\"line\">      \"tags.keyword\": [\"a\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 多对1查询：适用于查询条件为[]，被查询字段为1个值的情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">where</span> age <span class=\"keyword\">in</span> (0,18)</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"terms\": &#123;</span><br><span class=\"line\">      \"age\": [</span><br><span class=\"line\">        0,</span><br><span class=\"line\">        18</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 多对多查询：适用于查询条件为 [], 查询值也为[] 的情况</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"terms\": &#123;</span><br><span class=\"line\">      \"tags.keyword\": [\"a\",\"e\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"万能匹配-match\"><a href=\"#万能匹配-match\" class=\"headerlink\" title=\"万能匹配-match\"></a>万能匹配-match</h2><p><code>match</code>查询可以用于多种查询用途，常见的全文检索，关键词匹配等都使用该方法，是es中最常用的查询</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">where</span> tags.contains(<span class=\"string\">\"a\"</span>)</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"match\": &#123;</span><br><span class=\"line\">      \"tags\": \"a\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">where</span> age = 18 </span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"match\": &#123;</span><br><span class=\"line\">      \"age\": 18</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">where</span> content like <span class=\"string\">\"%天气%\"</span></span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"match\": &#123;</span><br><span class=\"line\">      \"content\": \"天气\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他常用查询（range-exist-a-and-b等）\"><a href=\"#其他常用查询（range-exist-a-and-b等）\" class=\"headerlink\" title=\"其他常用查询（range, exist, a and b等）\"></a>其他常用查询（range, exist, a and b等）</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 范围查询  <span class=\"built_in\">where</span> a between 10 and 20</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"range\": &#123;</span><br><span class=\"line\">      \"age\": &#123;</span><br><span class=\"line\">        \"gte\": 10,</span><br><span class=\"line\">        \"lte\": 20</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 字段是否存在 <span class=\"built_in\">where</span> content not null</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"exists\":&#123;</span><br><span class=\"line\">      \"field\":\"content\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 多条件查询 <span class=\"built_in\">where</span> (age between 10 and 20) and content like <span class=\"string\">\"上海\"</span></span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"bool\": &#123;</span><br><span class=\"line\">      \"must\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"range\": &#123;</span><br><span class=\"line\">            \"age\": &#123;</span><br><span class=\"line\">              \"gte\": 10,</span><br><span class=\"line\">              \"lte\": 20</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"match\": &#123;</span><br><span class=\"line\">            \"content\": \"上海\"</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询原理解析\"><a href=\"#查询原理解析\" class=\"headerlink\" title=\"查询原理解析\"></a>查询原理解析</h2><h3 id=\"es文档字段的存储逻辑\"><a href=\"#es文档字段的存储逻辑\" class=\"headerlink\" title=\"es文档字段的存储逻辑\"></a>es文档字段的存储逻辑</h3><p>es中的字段看起来有多种数据结构，实际抽象出来只有一种数据结构就是 <code>k-v</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">类似</span><br><span class=\"line\">`tags:[\"a\",\"b\",\"c\"]`</span><br><span class=\"line\">的数组数据结构在es中实际上是</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttags.a : a </span><br><span class=\"line\">\ttags.b : b</span><br><span class=\"line\">\ttags.c : c </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这样的分解成多个字段进行存储的</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"match为什么可以做到万能查询\"><a href=\"#match为什么可以做到万能查询\" class=\"headerlink\" title=\"match为什么可以做到万能查询\"></a><code>match</code>为什么可以做到万能查询</h3><p>是因为match在查询时候会对查询条件进行分词</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 不分词的查询查不到 tags:[<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>]的值， 只能查询到 tags:[<span class=\"string\">\"ab\"</span>]的值</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"match\": &#123;</span><br><span class=\"line\">      \"tags.keyword\": \"ab\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ps： es自带了一部分内容格式转换规则，类似 type = “VIDEO” 这种字段如果要使用term查询的话需要用 term:{type.keyword:”VIDEO”}, 因为大写的字段值会被默认分词， 如果是type =”video”这种小写 就可以用 term:{type:”video”}来进行匹配</p>\n</blockquote>\n<h1 id=\"分值相关查询\"><a href=\"#分值相关查询\" class=\"headerlink\" title=\"分值相关查询\"></a>分值相关查询</h1><p>有时候我们希望按照某种特殊的顺序对es的文档进行排序，这个时候往往需要自定义文档查询得分</p>\n<h2 id=\"filter过滤\"><a href=\"#filter过滤\" class=\"headerlink\" title=\"filter过滤\"></a>filter过滤</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> filter使用布隆过滤器进行过滤所以没有分值，性能较好</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"bool\": &#123;</span><br><span class=\"line\">      \"filter\": &#123;</span><br><span class=\"line\">        \"range\": &#123;</span><br><span class=\"line\">          \"age\": &#123;</span><br><span class=\"line\">            \"gte\": 10</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"constant-score和boost提权\"><a href=\"#constant-score和boost提权\" class=\"headerlink\" title=\"constant_score和boost提权\"></a>constant_score和boost提权</h2><p><code>constant_score</code>用于指定查询命中的单位得分值，每个查询价值一个分值单位</p>\n<p><code>boost</code> 用于提升权重</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 该查询命中则价值 1.2分 且忽略tf/idf得分</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"query\": &#123;</span><br><span class=\"line\">        \"constant_score\" : &#123;</span><br><span class=\"line\">          \"filter\": &#123;</span><br><span class=\"line\">            \"terms\": &#123;</span><br><span class=\"line\">              \"tags\": [</span><br><span class=\"line\">                \"a\",</span><br><span class=\"line\">                \"d\"</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          \"boost\": 1.2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> boost进行提权</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"terms\": &#123;</span><br><span class=\"line\">      \"tags\": [\"a\"],</span><br><span class=\"line\">      \"boost\":3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"function-score\"><a href=\"#function-score\" class=\"headerlink\" title=\"function_score\"></a>function_score</h2><p><code>function_score</code>自定义分值，可以根据文档内容进行得分定制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 该查询根据文档的age字段 * 5 作为最终分值</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"function_score\": &#123;</span><br><span class=\"line\">      \"query\": &#123;</span><br><span class=\"line\">        \"match_all\": &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      \"script_score\" : &#123;</span><br><span class=\"line\">        \"script\" : &#123;</span><br><span class=\"line\">          \"source\": \"5*doc['age'].value\"</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询示例：根据用户关注的标签匹配数量计算得分\"><a href=\"#查询示例：根据用户关注的标签匹配数量计算得分\" class=\"headerlink\" title=\"查询示例：根据用户关注的标签匹配数量计算得分\"></a>查询示例：根据用户关注的标签匹配数量计算得分</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 假设用户关注了[<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>] 标签，根据用户的关注标签匹配数量进行分数计算，a标签价值1.3分，b标签1.1</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"bool\": &#123;</span><br><span class=\"line\">      \"should\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         \"constant_score\": &#123;</span><br><span class=\"line\">           \"filter\": &#123;</span><br><span class=\"line\">             \"terms\": &#123;</span><br><span class=\"line\">               \"tags\": [</span><br><span class=\"line\">                 \"a\"</span><br><span class=\"line\">               ]</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           \"boost\": 1.3</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"constant_score\": &#123;</span><br><span class=\"line\">            \"filter\": &#123;</span><br><span class=\"line\">              \"terms\": &#123;</span><br><span class=\"line\">                \"tags\": [</span><br><span class=\"line\">                  \"d\"</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            \"boost\": 1.1</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      \"minimum_should_match\": 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h1><h2 id=\"terms求count值\"><a href=\"#terms求count值\" class=\"headerlink\" title=\"terms求count值\"></a>terms求count值</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 等价于 group by tags</span></span><br><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"size\": 0,</span><br><span class=\"line\">  \"aggs\": &#123;</span><br><span class=\"line\">    \"t\": &#123;</span><br><span class=\"line\">      \"terms\": &#123;</span><br><span class=\"line\">        \"field\": \"tags.keyword\",</span><br><span class=\"line\">        \"size\": 10</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"avg求平均值\"><a href=\"#avg求平均值\" class=\"headerlink\" title=\"avg求平均值\"></a>avg求平均值</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"size\": 0,</span><br><span class=\"line\">  \"aggs\": &#123;</span><br><span class=\"line\">    \"t\": &#123;</span><br><span class=\"line\">      \"avg\": &#123;</span><br><span class=\"line\">        \"field\": \"age\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他查询和dsl\"><a href=\"#其他查询和dsl\" class=\"headerlink\" title=\"其他查询和dsl\"></a>其他查询和dsl</h1><h2 id=\"原子更新文档\"><a href=\"#原子更新文档\" class=\"headerlink\" title=\"原子更新文档\"></a>原子更新文档</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 由于es本身不支持源字形的更新文档，我们需要借助内置脚本的帮助来操作</span></span><br><span class=\"line\">POST test_idx/_update/1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \"script\" : &#123;</span><br><span class=\"line\">    \"source\": \"ctx._source.age += params.count\",</span><br><span class=\"line\">      \"lang\": \"painless\",</span><br><span class=\"line\">      \"params\" : &#123;</span><br><span class=\"line\">          \"count\" : 4</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"explain\"><a href=\"#explain\" class=\"headerlink\" title=\"explain\"></a>explain</h2><p>explain 用于查看查询的执行过程和各部分的具体得分，一般用于排查问题</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET test_idx/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"explain\": true, </span><br><span class=\"line\">  \"query\": &#123;</span><br><span class=\"line\">    \"bool\": &#123;</span><br><span class=\"line\">      \"must\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"range\": &#123;</span><br><span class=\"line\">            \"age\": &#123;</span><br><span class=\"line\">              \"gte\": 10,</span><br><span class=\"line\">              \"lte\": 20</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      \"should\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"match\": &#123;</span><br><span class=\"line\">            \"content\": \"上海\"</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      \"minimum_should_match\": 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">explain 结果示例</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        \"_explanation\": &#123;</span><br><span class=\"line\">          \"value\": 1.5753641,</span><br><span class=\"line\">          \"description\": \"sum of:\",</span><br><span class=\"line\">          \"details\": [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              \"value\": 1,</span><br><span class=\"line\">              \"description\": \"age:[10 TO 20]\",</span><br><span class=\"line\">              \"details\": []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              \"value\": 0.5753642,</span><br><span class=\"line\">              \"description\": \"sum of:\",</span><br><span class=\"line\">              \"details\": [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  \"value\": 0.2876821,</span><br><span class=\"line\">                  \"description\": \"weight(content:上 in 0) [PerFieldSimilarity], result of:\",</span><br><span class=\"line\">                  \"details\": [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      \"value\": 0.2876821,</span><br><span class=\"line\">                      \"description\": \"score(doc=0,freq=1.0 = termFreq=1.0\\n), product of:\",</span><br><span class=\"line\">                      \"details\": [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          \"value\": 0.2876821,</span><br><span class=\"line\">                          \"description\": \"idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:\",</span><br><span class=\"line\">                          \"details\": [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 1,</span><br><span class=\"line\">                              \"description\": \"docFreq\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 1,</span><br><span class=\"line\">                              \"description\": \"docCount\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                          ]</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          \"value\": 1,</span><br><span class=\"line\">                          \"description\": \"tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:\",</span><br><span class=\"line\">                          \"details\": [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 1,</span><br><span class=\"line\">                              \"description\": \"termFreq=1.0\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 1.2,</span><br><span class=\"line\">                              \"description\": \"parameter k1\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 0.75,</span><br><span class=\"line\">                              \"description\": \"parameter b\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 12,</span><br><span class=\"line\">                              \"description\": \"avgFieldLength\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 12,</span><br><span class=\"line\">                              \"description\": \"fieldLength\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                          ]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  \"value\": 0.2876821,</span><br><span class=\"line\">                  \"description\": \"weight(content:海 in 0) [PerFieldSimilarity], result of:\",</span><br><span class=\"line\">                  \"details\": [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      \"value\": 0.2876821,</span><br><span class=\"line\">                      \"description\": \"score(doc=0,freq=1.0 = termFreq=1.0\\n), product of:\",</span><br><span class=\"line\">                      \"details\": [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          \"value\": 0.2876821,</span><br><span class=\"line\">                          \"description\": \"idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:\",</span><br><span class=\"line\">                          \"details\": [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 1,</span><br><span class=\"line\">                              \"description\": \"docFreq\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 1,</span><br><span class=\"line\">                              \"description\": \"docCount\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                          ]</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          \"value\": 1,</span><br><span class=\"line\">                          \"description\": \"tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:\",</span><br><span class=\"line\">                          \"details\": [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 1,</span><br><span class=\"line\">                              \"description\": \"termFreq=1.0\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 1.2,</span><br><span class=\"line\">                              \"description\": \"parameter k1\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 0.75,</span><br><span class=\"line\">                              \"description\": \"parameter b\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 12,</span><br><span class=\"line\">                              \"description\": \"avgFieldLength\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                              \"value\": 12,</span><br><span class=\"line\">                              \"description\": \"fieldLength\",</span><br><span class=\"line\">                              \"details\": []</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                          ]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<p>参考资料</p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p>\n","categories":["编程工具"],"tags":["Elasticsearch"]},{"title":"纯小白向-5分钟搭建个人博客","url":"/2020-02-01-build-website-in-5-min/","content":"<h1 id=\"五分钟搭建一个博客网站（mac-os）\"><a href=\"#五分钟搭建一个博客网站（mac-os）\" class=\"headerlink\" title=\"五分钟搭建一个博客网站（mac os）\"></a>五分钟搭建一个博客网站（mac os）</h1><p>这是一个面向纯小白的搭建个人网站的教程，需要的东西如下</p>\n<ol>\n<li>一台能联网的电脑</li>\n<li>一个知道什么是文件以及会创建文件夹的人</li>\n</ol>\n<h2 id=\"第一步：必备软件和文件下载\"><a href=\"#第一步：必备软件和文件下载\" class=\"headerlink\" title=\"第一步：必备软件和文件下载\"></a>第一步：必备软件和文件下载</h2><p>我们的网站的运行需要一个软件的支持，这个软件就是docker，所以我们必须要下载doker </p>\n<h3 id=\"1-下载docker软件\"><a href=\"#1-下载docker软件\" class=\"headerlink\" title=\"1. 下载docker软件\"></a>1. 下载docker软件</h3><p>目标：这一步的目的是下载必备的软件docker并安装启动docker</p>\n<p>下载地址： <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener\">https://www.docker.com/products/docker-desktop</a></p>\n<h3 id=\"2-获取搭建网站需要的文件\"><a href=\"#2-获取搭建网站需要的文件\" class=\"headerlink\" title=\"2. 获取搭建网站需要的文件\"></a>2. 获取搭建网站需要的文件</h3><p>目标：这一步的目的用一个文件告诉docker我们要搭建一个网站，这个文件名字必须叫 <code>docker-compose.yml</code></p>\n<p>文件我已经提前准备好了，直接下载就行了</p>\n<p>地址： <a href=\"https://raw.githubusercontent.com/leriou/docker-env/master/wordpress/docker-compose.yml`\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/leriou/docker-env/master/wordpress/docker-compose.yml`</a></p>\n<p>可以直接使用迅雷啥的下载，也可以使用以下命令直接下载</p>\n<p>打开 Terminal，粘贴命令：</p>\n<pre><code>$ wget https://raw.githubusercontent.com/leriou/docker-env/master/wordpress/docker-compose.yml</code></pre><p>并回车，等待下载文件</p>\n<hr>\n<p>到此，我们的准备工作就结束了</p>\n<p>总结一下，我们需要一个docker软件和一个告诉docker我们要搭建一个网站的文件docker-compose.yml</p>\n<h2 id=\"第二步：启动网站\"><a href=\"#第二步：启动网站\" class=\"headerlink\" title=\"第二步：启动网站\"></a>第二步：启动网站</h2><p>找到<code>docker-compose.yml</code>文件所在的目录 ，一般都是在下载文件夹</p>\n<p>需要把终端切换到该目录下面，同时输入：<code>docker-compose up</code> 并回车，等待下载必备的东西完毕就可以使用网站了</p>\n<h2 id=\"第三步：管理和使用网站\"><a href=\"#第三步：管理和使用网站\" class=\"headerlink\" title=\"第三步：管理和使用网站\"></a>第三步：管理和使用网站</h2><h3 id=\"测试网站是否成功\"><a href=\"#测试网站是否成功\" class=\"headerlink\" title=\"测试网站是否成功\"></a>测试网站是否成功</h3><p>打开浏览器，访问 <a href=\"http://localhost:8077\" target=\"_blank\" rel=\"noopener\">http://localhost:8077</a> </p>\n<h3 id=\"设置网站语言和账号密码\"><a href=\"#设置网站语言和账号密码\" class=\"headerlink\" title=\"设置网站语言和账号密码\"></a>设置网站语言和账号密码</h3><p>就可以设置网站使用的语言和账号密码</p>\n<h3 id=\"设置网站的主题，变得更好看\"><a href=\"#设置网站的主题，变得更好看\" class=\"headerlink\" title=\"设置网站的主题，变得更好看\"></a>设置网站的主题，变得更好看</h3><p>网站是基于Wordpress制作的，所以可以直接从主题库选择喜欢的主题换上就可以了</p>\n","categories":["工程经验"],"tags":["wordpress"]},{"title":"基线融合排序算法","url":"/2020-03-22-baseline-merge-recommendation/","content":"<h1 id=\"推荐系统的排序策略\"><a href=\"#推荐系统的排序策略\" class=\"headerlink\" title=\"推荐系统的排序策略\"></a>推荐系统的排序策略</h1><p>排序策略起到的作用</p>\n<ol>\n<li><p>将多种召回集的结果进行融合，挑出少量的推结果内容</p>\n</li>\n<li><p>返回结果应平衡多种来源的密度分布</p>\n</li>\n<li><p>根据排版要求进行精排序</p>\n<h1 id=\"问题和需求描述\"><a href=\"#问题和需求描述\" class=\"headerlink\" title=\"问题和需求描述\"></a>问题和需求描述</h1><p>假设我们现在拥有3个召回策略的来源的数据分别为</p>\n</li>\n<li><p>个性化内容约 200 个</p>\n</li>\n<li><p>新内容约 2000 个</p>\n</li>\n<li><p>热门内容约 200 个</p>\n</li>\n</ol>\n<p>我们希望达到如下目标</p>\n<ol>\n<li>从这么多用户可能感兴趣的内容中挑出来10个内容返回</li>\n<li>用户已经推荐过的不再进行推荐</li>\n<li>用户的推荐结果中,结果保持多样性各种来源按照一定比例，个性化：新内容：热门内容比例为  3:4:3， 某种题材比例不足采用其他内容进行填充<figure class=\"highlight scheme\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">;用代码描述如下</span></span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">define</span></span> (<span class=\"name\">recommendation</span> user)</span><br><span class=\"line\">\t(<span class=\"name\"><span class=\"builtin-name\">lambda</span></span> (user)</span><br><span class=\"line\">    (<span class=\"name\"><span class=\"builtin-name\">cons</span></span> (<span class=\"name\"><span class=\"builtin-name\">cond</span></span> (<span class=\"name\">personal?</span> user) (<span class=\"name\">get-personal</span> user)</span><br><span class=\"line\">                (<span class=\"name\"><span class=\"builtin-name\">else</span></span> '()))</span><br><span class=\"line\">          (<span class=\"name\"><span class=\"builtin-name\">if</span></span> hottest? (<span class=\"name\">get-hottest</span>) '())</span><br><span class=\"line\">          (<span class=\"name\"><span class=\"builtin-name\">if</span></span> lattest? (<span class=\"name\">get-lattest</span>) '())</span><br><span class=\"line\">          (<span class=\"name\"><span class=\"builtin-name\">if</span></span> hot-spot? (<span class=\"name\">get-hot-spot</span>) '()))))</span><br></pre></td></tr></table></figure>\n<h1 id=\"朴素处理\"><a href=\"#朴素处理\" class=\"headerlink\" title=\"朴素处理\"></a>朴素处理</h1></li>\n<li>直接从个性化内容里面 取10<em>0.3 个没有推荐过的，从新内容里面取 10 * 0.4 个， 从热门里面取 10</em> 0.3 个放到一个队列返回<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rec</span></span>(a:<span class=\"type\">Set</span>[个性化], b: <span class=\"type\">Set</span>[新], c: <span class=\"type\">Set</span>[热门],d: <span class=\"type\">Set</span>[看过]): <span class=\"type\">Set</span>[<span class=\"number\">10</span>] = &#123;</span><br><span class=\"line\">    ans = <span class=\"type\">Set</span>()</span><br><span class=\"line\">    ans += a.forEach(v -&gt; !d.contains(v)).take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    ans += b.forEach(v -&gt; !d.contains(v)).take(<span class=\"number\">4</span>)</span><br><span class=\"line\">    ans += c.forEach(v -&gt; !d.contains(v)).take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这种处理方法在遇到 某种策略内容不够的时候 就需要手动做判断，再从其他两种内容里面获取<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ans.size() &lt; rec &#123;</span><br><span class=\"line\">  ans += b.forEach(v -&gt; !d.contains(v)).take(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n假如其他集合还是不够的话还要继续处理，代码复杂度就直线上升</li>\n</ol>\n<h1 id=\"基线排序法\"><a href=\"#基线排序法\" class=\"headerlink\" title=\"基线排序法\"></a>基线排序法</h1><p>先选择一个数量较多的内容集合作为基线：例如 新内容。将基线集合的数据通过排名映射到[0，1]的空间之内</p>\n<p>计分函数</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/v7xnQTdfiqLJDC2.png\" alt=\"QsBjsd0gNmbnail.png\"></p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; 新内容：假设我们有2000个新内容，那第400个的得分应该为</span></span><br><span class=\"line\">         第400个</span><br><span class=\"line\">  ｜       ｜       ｜       ｜       ｜      ｜</span><br><span class=\"line\">  <span class=\"number\">1.0</span>     <span class=\"number\">0.8</span>      <span class=\"number\">0.6</span>      <span class=\"number\">0.4</span>      <span class=\"number\">0.2</span>     <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>然后我们把其他召回集内容也通过某个积分函数均匀散列在以上区间</p>\n<p>由于我们要满足 3:4:3的概率所以我们要求在原来的40个新内容的范围里面，均匀混进去30个热门和30个个性化内容，这样比例就满足了</p>\n<p>也就是说我们要满足如下公式， 由于内容密度要满足一定条件（3:4:3）</p>\n<p>计算热门内容的分数范围的公示如下</p>\n<p>x = 0.02 * 200 / 30  = 0.133</p>\n<p>也就是说热门内容分布的边界范围应该为 [1，0.867]</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; 热门内容</span></span><br><span class=\"line\">       第30个         第100个         第200个</span><br><span class=\"line\">  ｜     ｜            ｜              ｜      </span><br><span class=\"line\">  <span class=\"number\">1.0</span>   <span class=\"number\">0.98</span>         <span class=\"number\">0.935</span>          <span class=\"number\">0.867</span></span><br></pre></td></tr></table></figure>\n<p>个性化内容也是同理<br>最后三者进行融合以后重新排序结果如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; 融合之后的内容集合分布</span></span><br><span class=\"line\">        第800个</span><br><span class=\"line\">  ｜       ｜       ｜       ｜       ｜      ｜</span><br><span class=\"line\">  <span class=\"number\">1.0</span>     <span class=\"number\">0.8</span>      <span class=\"number\">0.6</span>      <span class=\"number\">0.4</span>      <span class=\"number\">0.2</span>     <span class=\"number\">0</span></span><br><span class=\"line\">[1， 0.8]的空间内同时含有 400个新内容，200个热门内容和200个个性化内容</span><br></pre></td></tr></table></figure>\n<p>这种情况下顺序取前10个内容， 三种来源的比例就是 3:4:3<br>同样在这种算法情况下， 无论是调整 结果数量， 还是调整比例，都可以用同一个逻辑轻松实现需求， 实现优雅，性能也得到了保证</p>\n","categories":["推荐系统"],"tags":["推荐系统"]},{"title":"文本内容价值评估的方法","url":"/2020-03-11-content-evaluate/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在推荐系统的业务场景中我们的最终目的是把优质的内容从内容池中挑出来推荐给用户</p>\n<ol>\n<li>降低用户获取信息的成本</li>\n<li>提供给用户平均质量更高的内容</li>\n<li>助力运营等提高内容分发的效率<br>如何评价一个内容的质量好坏就成了我们面对的一个重要问题<h2 id=\"如何找到用技术手段评估内容的质量\"><a href=\"#如何找到用技术手段评估内容的质量\" class=\"headerlink\" title=\"如何找到用技术手段评估内容的质量\"></a>如何找到用技术手段评估内容的质量</h2><h3 id=\"通过用户行为来辅助评估\"><a href=\"#通过用户行为来辅助评估\" class=\"headerlink\" title=\"通过用户行为来辅助评估\"></a>通过用户行为来辅助评估</h3>我们可以很明显的知道用户点击率高的内容大概率会是吸引人的内容。由此我们可以对内容的点击率进行统计，根据点击率给予内容一定的分数，点击率越高，内容分数越高, 我们认为内容越优质。<br>例如我们可以开发如下函数<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span></span>(a:<span class=\"type\">Article</span>):<span class=\"type\">Double</span> = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a.showCount &gt;= <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t \t<span class=\"keyword\">return</span> a.clickRate/getMaxClickRate()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这种情况是最直观的也最简单的, 但是我们会遇到一些问题</li>\n</ol>\n<ul>\n<li>问题1: 如果一个内容刚刚发布，还没有被展示或者被点击，此时没有用户行为数据，该如何评估内容的质量呢, 就像上面我们过滤掉了展示200次以下的内容，这部分内容因为展示次数少，误差较大</li>\n<li>问题2: 如果一个内容A 刚刚发布不久，被展示了10次，点击了5次， 点击率50%， 另一个内容B发布了2天，被展示了20万次，点击了5万次，点击率 25%， 是否能说明A内容比B内容优秀<br>相信从上面两个问题也能看出来了，单纯的依靠点击率是肯定不合适的，既会受到一定的限制，又会造成得分结果的不稳定。处理1，2问题的方法也比较简单，只需要按照根据分布情况给一个预估的默认值， 并加上一定的统计门槛就可以了<h3 id=\"挖掘内容本身的特征属性进行评估\"><a href=\"#挖掘内容本身的特征属性进行评估\" class=\"headerlink\" title=\"挖掘内容本身的特征属性进行评估\"></a>挖掘内容本身的特征属性进行评估</h3>假如一个内容A点击率比较高，我们可以思考可能的原因是什么呢？<br>有可能是作者文字功底比较好，有可能是作者比较出名， 有可能是里面有一些特征一看就知道内容质量比较差。比如 标题很短，或者标题没有信息含量。<br>总而言之我们可以根据内容的 发布时间， 作者，含有的关键词，视频的清晰度，内容的长度，等各种属性给内容计算一个基础的内容得分。大概函数定义如下<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span></span>(c: <span class=\"type\">Article</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">  \tf(c.title, c.author, c.published, c.length, c.keywords)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n如此一来我们就可以对各种内容做一个基本的价值评估，可以在视频还未获得曝光和点击的时候对视频有一个大概的评价。后续的点击率等行为表现可以辅助纠正各种特征的积分权重<h3 id=\"考虑现在的时间和环境因素进行评估\"><a href=\"#考虑现在的时间和环境因素进行评估\" class=\"headerlink\" title=\"考虑现在的时间和环境因素进行评估\"></a>考虑现在的时间和环境因素进行评估</h3>内容的质量表现还会随着时间和环境因素而变化。<br>比如股市的资讯类消息， 就是在发布的12小时内价值比较高，而且其价值会随着时间逐渐减少，3天以上基本就毫无价值了。<br>内容受到环境影响也很明显，这次的新冠疫情导致口罩，病毒等相关的内容受到了极大的关注。可能在平时来说，口罩等关键词并不会有如此大的权重，但是在疫情期间，全民关注，这个时候就应该根据环境适当的给热门词增加权重表现<br>环境和内容的匹配主要还是要依据统计数据来预估一个特征在环境中的匹配度，然后根据这个匹配度对内容进行评估，在根据用户对内容后续的行为表现来调整这个匹配度的计算规则<h3 id=\"考虑目标用户特征\"><a href=\"#考虑目标用户特征\" class=\"headerlink\" title=\"考虑目标用户特征\"></a>考虑目标用户特征</h3>同样的内容对不同的用户也会有不同的价值。同一篇手机评测内容，对魅族手机用户和小米手机用户分别展示1000次收到的点击返回结果可能就有很大不同， 对数码爱好者和小白分开推送效果也会不一样。<br>我们如果要对用户和内容匹配一方面要获取到用户的用户画像信息，一方面要对内容做内容特征分析， 然后再进行match。<br>定义计分函数如下<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calScore</span></span>(user:<span class=\"type\">Set</span>, env:<span class=\"type\">Set</span>&lt;&gt;) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">  f(user, env, content)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"综合多种因素进行评估\"><a href=\"#综合多种因素进行评估\" class=\"headerlink\" title=\"综合多种因素进行评估\"></a>综合多种因素进行评估</h3>上面的几种方法都有各自的优点和缺点，多种评估策略一起配合使用可以一定程度上增强价值评估的可信度。综合推荐就是同时考虑 用户， 环境，时间，内容本身等多种因素，根据情况实时的计算<br>不同属性的得分之间可以采用加和或者相乘 的方法。<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>内容的价值评估是一个跟场景，用户，内容都相关的事情， 没有办法使用一个统一的，固定的算法或者模型对内容进行价值评估， 但是我们可以根据现有的用户行为， 环境特征， 内容特征等，尽可能的覆盖所有可能的影响因子， 给出一个相对比较可信的价值度量标准</li>\n</ul>\n","categories":["推荐系统"],"tags":["推荐系统"]},{"title":"Redis集群遇到的一些问题","url":"/2017-10-03-redis-cluster-problem/","content":"<p>我们在使用Redis集群的使用过程中发现了很多问题</p>\n<p>这些问题产生的原因归根到底都是因为redis将数据映射到槽(slot)上面, 而不同的键分布在不同的Node节点上面导致的</p>\n<h1 id=\"键分布导致的问题\"><a href=\"#键分布导致的问题\" class=\"headerlink\" title=\"键分布导致的问题\"></a>键分布导致的问题</h1><p>当在集群模式下进行多键操作, 同时操作的键中有部分不在该节点时,会报如下错误</p>\n<p><code>CROSSSLOT Keys in request don&#39;t hash to the same slot</code></p>\n<p>例如:</p>\n<p><code>hmget key1 key2</code></p>\n<p><code>rename key1 key2</code></p>\n<h2 id=\"错误类型\"><a href=\"#错误类型\" class=\"headerlink\" title=\"错误类型\"></a>错误类型</h2><ul>\n<li>moved错误</li>\n</ul>\n<p>该错误表明当前键的落点槽不属于当前Node, 一般之后会跟着一个槽落点和节点地址</p>\n<p>例如:</p>\n<p><code>MOVED 1584 10.200.6.185:7001</code></p>\n<ol>\n<li><p>基于该错误可以调整客户端, 让不支持集群模式的客户端也能支持集群功能</p>\n</li>\n<li><p>也可以提前计算好key, 直接去负责该key所在槽的服务器上取数据</p>\n</li>\n</ol>\n<ul>\n<li>ASK错误</li>\n</ul>\n<p>该错误表明该key对应的数据正在做数据迁移, 槽迁移会引起该槽上的数据返回该错误</p>\n<h1 id=\"集群模式下不支持select-db\"><a href=\"#集群模式下不支持select-db\" class=\"headerlink\" title=\"集群模式下不支持select db\"></a>集群模式下不支持select db</h1><p>单机模式我们可以使用 <code>select 1</code> 来选择使用的数据库(redis默认提供16个数据库)</p>\n<p>但是集群模式下redis不支持该功能</p>\n<p>如果不同的业务组之间需要做业务隔离最好采用不同redis集群的形式进行</p>\n<p>可以把多个redis集群组成redis组，多个redis组组成redis池进行资源的统一管理</p>\n<h1 id=\"cluster模式不支持使用Pipeline\"><a href=\"#cluster模式不支持使用Pipeline\" class=\"headerlink\" title=\"cluster模式不支持使用Pipeline\"></a>cluster模式不支持使用Pipeline</h1><p>在缓存的使用过程中，有时候我们会有快速获取一批k-v存储结果的需求，比如首页列表产品页，此时如果我们对每一个记录使用get操作在数据量较大的时候将会导致整个请求时间过长难以接受</p>\n<p>Redis的<code>pipeline</code>是一种效果很明显的加快获取数据速度的手段，我们可以用pipeline一次性读取多个key的值 </p>\n<p>像这样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> batch </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> get a</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> get b </span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> get c</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ....</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">exec</span></span></span><br></pre></td></tr></table></figure>\n\n<p>但是有一个缺点, 我们一旦使用了Redis的Cluster集群, 就没有办法对整个集群使用Pipeline功能</p>\n<p><strong>原因</strong></p>\n<p>因为Redis的Pipeline的原理是在一个连接中持续的进行命令发送, 需要持有一个稳定的连接</p>\n<p>但是一旦使用了集群, 我们每个连接只能连接一个Node节点, 可是Pipeline中发送的数据键的数据落点未必会落到我们当前连接的集群节点上去</p>\n<p>那经过Pipeline发送过去的key就很明显不能正确的拿到内容</p>\n<h2 id=\"解决方案1\"><a href=\"#解决方案1\" class=\"headerlink\" title=\"解决方案1\"></a>解决方案1</h2><ul>\n<li>我们先计算出来每个key的数据落点, 然后将key进行分组, 分组取数据</li>\n</ul>\n<p>步骤:</p>\n<ol>\n<li><p>实现集群节点选择方法, 给每个节点起一个名字, 例如 节点1, 节点2, 节点3</p>\n</li>\n<li><p>查找每个节点上面的数据槽(slot)的范围</p>\n</li>\n<li><p>对Pipeline中的每个key进行<code>crc16(key)&amp;16383</code>, 计算出来每个key的槽, 并找到槽对应的节点</p>\n</li>\n<li><p>将落到相同节点的key进行分组</p>\n</li>\n<li><p>对每一组key再进行Pipeline操作</p>\n</li>\n</ol>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>充分利用集群特性, 普适性好, 不会造成数据倾斜</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>按照节点计算key, 最大请求次数等于节点数, 节点太多的情况下不太合适, 适合小规模集群</p>\n<h2 id=\"解决方案2\"><a href=\"#解决方案2\" class=\"headerlink\" title=\"解决方案2\"></a>解决方案2</h2><ul>\n<li>存储时候就把key存到一起</li>\n</ul>\n<p>使用<code>{}</code>来对key进行标记</p>\n<p>例如: <code>{user}:name:3</code>, <code>{user}:name</code>,<code>{user}:age</code> </p>\n<p>这三个key因为{}部分都相同所以会落到同一个slot上面, 数据自然就落到同一台redis机器上面了</p>\n<h3 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>不受集群规模和节点数量的影响</p>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>但是这种方法限制很大, 没办法充分利用Redis的集群特性, 仅仅适合使用比较频繁的小数据量</p>\n<p>数据量太大会导致大量数据存储在同一个槽内, 造成数据倾斜</p>\n","categories":["编程工具"],"tags":["redis"]},{"title":"一个简单的用JS实现的光线追踪效果","url":"/2015-09-27-simple-raytracing/","content":"<h1 id=\"什么是光线追踪\"><a href=\"#什么是光线追踪\" class=\"headerlink\" title=\"什么是光线追踪\"></a>什么是光线追踪</h1><p>光线追踪是计算机图形领域实现全局光照效果的一种手段，光线追踪由于实现简单,效果优秀,但是效率比较低，所以一直以来大多作为学习之用。</p>\n<!--more-->\n\n<h1 id=\"一个简单的光线追踪的例子\"><a href=\"#一个简单的光线追踪的例子\" class=\"headerlink\" title=\"一个简单的光线追踪的例子\"></a>一个简单的光线追踪的例子</h1><p>点击下方的按钮就可以渲染出一张图片哦,纯渲染出的哦(渲染很消耗性能可能会有少许的等待时间)</p>\n<h2 id=\"在线测试\"><a href=\"#在线测试\" class=\"headerlink\" title=\"在线测试\"></a>在线测试</h2><p>视角坐标:</p>\n<div>\n<div>\nX:<input type=\"number\" min=\"-100\" max=\"100\" step=\"5\" value=\"0\" id=\"pos_x\" >&nbsp;&nbsp;\nY:<input type=\"number\" min=\"-100\" max=\"100\" step=\"5\" value=\"5\" id=\"pos_y\" >&nbsp;&nbsp;\nZ:<input type=\"number\" min=\"-100\" max=\"100\" step=\"5\" value=\"15\" id=\"pos_z\" >&nbsp;&nbsp;\n反射次数:&nbsp;&nbsp;<input type=\"number\" min=\"0\" max=\"30\" step=\"1\" value=\"5\" id=\"reflect_times\">&nbsp;&nbsp;\n<button onclick=\"javascript:render_pic();\" class=\"btn btn-info\">RENDER</button>\n</div>\n<div style=\"text-align: center;\">\n    <canvas id=\"renderCanvas\" width=\"512\" height=\"512\" style=\"display:none\"></canvas>\n</div>\n</div>\n\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><p>查看本页的源代码可以查找到源代码</p>\n<p>核心的代码就是如下几行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'renderCanvas'</span>); <span class=\"comment\">// 获取画布对象</span></span><br><span class=\"line\">canvas.style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> plane = <span class=\"keyword\">new</span> Plane(<span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"number\">0</span>);   <span class=\"comment\">// 基本平面 该平面的法向量为(0,1,0)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sphere1 = <span class=\"keyword\">new</span> Sphere(<span class=\"keyword\">new</span> Vector3(<span class=\"number\">-10</span>, <span class=\"number\">10</span>, <span class=\"number\">-10</span>), <span class=\"number\">10</span>); <span class=\"comment\">//球1 位置(-10,10,-10),半径 10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sphere2 = <span class=\"keyword\">new</span> Sphere(<span class=\"keyword\">new</span> Vector3(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">-10</span>), <span class=\"number\">10</span>);  <span class=\"comment\">//球2 位置(10,10,-10),半径 10</span></span><br><span class=\"line\">plane.material = <span class=\"keyword\">new</span> CheckerMaterial(<span class=\"number\">0.1</span>, <span class=\"number\">0.5</span>);  <span class=\"comment\">// 国际象棋棋盘材质</span></span><br><span class=\"line\">sphere1.material = <span class=\"keyword\">new</span> PhongMaterial(Color.red, Color.white, <span class=\"number\">20</span>, <span class=\"number\">0.25</span>); <span class=\"comment\">//球1 Phong材质</span></span><br><span class=\"line\">sphere2.material = <span class=\"keyword\">new</span> PhongMaterial(Color.blue, Color.white, <span class=\"number\">20</span>, <span class=\"number\">0.25</span>);<span class=\"comment\">//球2 Phong材质</span></span><br><span class=\"line\">rayTraceReflection(</span><br><span class=\"line\">    canvas,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Union([plane, sphere1, sphere2]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> PerspectiveCamera(<span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>), <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>), <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"number\">90</span>),</span><br><span class=\"line\">    <span class=\"number\">5</span>);<span class=\"comment\">// 渲染参数,视角位置(0,5,15),视角90度,反射5次</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"光线追踪\"><a href=\"#光线追踪\" class=\"headerlink\" title=\"光线追踪\"></a>光线追踪</h2><p>本文的例子实际上是一种光线追踪(ray tracing)的实现.<br>光线追踪是全局光照(Global Illumination)的其中一中实现方式,该方法原理和实现方法都很简单但需要的计算量比较大,普通游戏无法使用,多用于学习研究性质或离线渲染(offline rendering),游戏中大多用其他技术手段实现类似效果</p>\n<p>优点:</p>\n<ol>\n<li>效果逼真,实现简单</li>\n<li>自带消隐(消除隐藏面)功能</li>\n<li>有阴影效果</li>\n<li>可以并行</li>\n<li>隐含透视性质</li>\n</ol>\n<p>缺点:</p>\n<ol>\n<li>光线追踪只能模拟光线的镜面反射(specular)行为,无法很好地模拟漫反射(diffuse)</li>\n<li>容易出现图形走样现象,因为透过两个相邻像素的光线到物体表面的距离会被放大,两像素之间的细节无法表现</li>\n</ol>\n<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><p>光线追踪的基本原理比较简单,如下图</p>\n<p><img data-src=\"https://i.loli.net/2020/05/09/s9Q1ET82SHAuDgW.png\" alt=\"2010032819542028.png\"></p>\n<blockquote>\n<p>从人眼的位置往屏幕上的每个像素发射光线,如果遇到具有反射性质的表面,继续追踪反射光线,最终根据光线返回的颜色去给像素进行着色</p>\n</blockquote>\n<p>因而可以比较简单的表现,反射,阴影折射等效果,但缺点是计算量较大<br>现在也有很多其他方式可以实现全局光照的效果(例如:辐射度算法,光子映射,甚至采用光照贴图模拟)</p>\n<p>这里的光线返回的颜色既是改像素点计算得到的颜色,具体计算方法是根据光线在多个物体表面的反射得到</p>\n<h2 id=\"渲染深度\"><a href=\"#渲染深度\" class=\"headerlink\" title=\"渲染深度\"></a>渲染深度</h2><p>渲染深度通俗的讲就是根据某一点距离摄像机的距离渲染出不同的颜色,越远的点颜色越暗,近的点略亮,通过计算模拟眼睛与第一个看到的画面上的点的距离,映射到0-255的区间,进行色彩数值的处理。</p>\n<h2 id=\"材质\"><a href=\"#材质\" class=\"headerlink\" title=\"材质\"></a>材质</h2><p>材质是渲染物体所必不可少的一项要素,材质根据自身的光学特性和物理特性决定了光线照射到物体表面某一点所呈现的颜色</p>\n<p>Phong光照模型是一种基本的光照模型,可以较为真实的模拟物体表面的某些特性</p>\n<blockquote>\n<p>环境光 + 漫反射 + 镜面反射  = Phong反射</p>\n</blockquote>\n<p>实现材质效果需要一定的特征函数配合</p>\n<p>材质往往和纹理一起配合出现</p>\n<h2 id=\"色彩\"><a href=\"#色彩\" class=\"headerlink\" title=\"色彩\"></a>色彩</h2><p>色彩本身是个极其庞大的学科,本文用到的色彩只是比较简单</p>\n<p>仅仅使用增色系统的三原色(RGB)来做一些基本的颜色模拟</p>\n<p>使用简单的三元数(R,G,B)来表示颜色的基本信息</p>\n<script>\nVector3 = function(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n};\nVector3.prototype = {\n    copy: function() {\n        return new Vector3(this.x, this.y, this.z);\n    },\n    length: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    },\n    sqrLength: function() {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    },\n    normalize: function() {\n        var inv = 1 / this.length();\n        return new Vector3(this.x * inv, this.y * inv, this.z * inv);\n    },\n    negate: function() {\n        return new Vector3(-this.x, -this.y, -this.z);\n    },\n    add: function(v) {\n        return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\n    },\n    subtract: function(v) {\n        return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\n    },\n    multiply: function(f) {\n        return new Vector3(this.x * f, this.y * f, this.z * f);\n    },\n    divide: function(f) {\n        var invf = 1 / f;\n        return new Vector3(this.x * invf, this.y * invf, this.z * invf);\n    },\n    dot: function(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n    cross: function(v) {\n        return new Vector3(-this.z * v.y + this.y * v.z, this.z * v.x - this.x * v.z, -this.y * v.x + this.x * v.y);\n    }\n};\nVector3.zero = new Vector3(0, 0, 0);\nColor = function(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b\n};\nColor.prototype = {\n    copy: function() {\n        return new Color(this.r, this.g, this.b);\n    },\n    add: function(c) {\n        return new Color(this.r + c.r, this.g + c.g, this.b + c.b);\n    },\n    multiply: function(s) {\n        return new Color(this.r * s, this.g * s, this.b * s);\n    },\n    modulate: function(c) {\n        return new Color(this.r * c.r, this.g * c.g, this.b * c.b);\n    },\n    saturate: function() {\n        this.r = Math.min(this.r, 1);\n        this.g = Math.min(this.g, 1);\n        this.b = Math.min(this.b, 1);\n    }\n};\nColor.black = new Color(0, 0, 0);\nColor.white = new Color(1, 1, 1);\nColor.red = new Color(1, 0, 0);\nColor.green = new Color(0, 1, 0);\nColor.blue = new Color(0, 0, 1);\nPhongMaterial = function(diffuse, specular, shininess, reflectiveness) {\n    this.diffuse = diffuse;\n    this.specular = specular;\n    this.shininess = shininess;\n    this.reflectiveness = reflectiveness;\n};\nPhongMaterial.prototype = {\n    sample: function(ray, position, normal) {\n        var NdotL = normal.dot(lightDir);\n        var H = (lightDir.subtract(ray.direction)).normalize();\n        var NdotH = normal.dot(H);\n        var diffuseTerm = this.diffuse.multiply(Math.max(NdotL, 0));\n        var specularTerm = this.specular.multiply(Math.pow(Math.max(NdotH, 0), this.shininess));\n        return lightColor.modulate(diffuseTerm.add(specularTerm));\n    }\n};\nPerspectiveCamera = function(eye, front, up, fov) {\n    this.eye = eye;\n    this.front = front;\n    this.refUp = up;\n    this.fov = fov;\n};\nPerspectiveCamera.prototype = {\n    initialize: function() {\n        this.right = this.front.cross(this.refUp);\n        this.up = this.right.cross(this.front);\n        this.fovScale = Math.tan(this.fov * 0.5 * Math.PI / 180) * 2;\n    },\n    generateRay: function(x, y) {\n        var r = this.right.multiply((x - 0.5) * this.fovScale);\n        var u = this.up.multiply((y - 0.5) * this.fovScale);\n        return new Ray3(this.eye, this.front.add(r).add(u).normalize());\n    }\n};\nPlane = function(normal, d) {\n    this.normal = normal;\n    this.d = d;\n};\nPlane.prototype = {\n    copy: function() {\n        return new plane(this.normal.copy(), this.d);\n    },\n    initialize: function() {\n        this.position = this.normal.multiply(this.d);\n    },\n    intersect: function(ray) {\n        var a = ray.direction.dot(this.normal);\n        if (a >= 0) {\n            return IntersectResult.noHit;\n        }\n        var b = this.normal.dot(ray.origin.subtract(this.position));\n        var result = new IntersectResult();\n        result.geometry = this;\n        result.distance = -b / a;\n        result.position = ray.getPoint(result.distance);\n        result.normal = this.normal;\n        return result;\n    }\n};\nSphere = function(center, radius) {\n    this.center = center;\n    this.radius = radius;\n};\nSphere.prototype = {\n    copy: function() {\n        return new Sphere(this.center.copy(), this.radius.copy());\n    },\n    initialize: function() { this.sqrRadius = this.radius * this.radius; },\n    intersect: function(ray) {\n        var v = ray.origin.subtract(this.center);\n        var a0 = v.sqrLength() - this.sqrRadius;\n        var DdotV = ray.direction.dot(v);\n        if (DdotV <= 0) {\n            var discr = DdotV * DdotV - a0;\n            if (discr >= 0) {\n                var result = new IntersectResult();\n                result.geometry = this;\n                result.distance = -DdotV - Math.sqrt(discr);\n                result.position = ray.getPoint(result.distance);\n                result.normal = result.position.subtract(this.center).normalize();\n                return result;\n            }\n        }\n        return IntersectResult.noHit;\n    }\n};\nIntersectResult = function() {\n    this.geometry = null;\n    this.distance = 0;\n    this.position = Vector3.zero;\n    this.normal = Vector3.zero;\n};\nIntersectResult.noHit = new IntersectResult();Union = function(geometries) { this.geometries = geometries; };\nUnion.prototype = {\n    initialize: function() {\n        for (var i in this.geometries)\n            this.geometries[i].initialize();\n    },\n    intersect: function(ray) {\n        var minDistance = Infinity;\n        var minResult = IntersectResult.noHit;\n        for (var i in this.geometries) {\n            var result = this.geometries[i].intersect(ray);\n            if (result.geometry && result.distance < minDistance) {\n                minDistance = result.distance;\n                minResult = result;\n            }\n        }\n        return minResult;\n    }\n};\nRay3 = function(origin, direction) {\n    this.origin = origin;\n    this.direction = direction;\n}\nRay3.prototype = {\n    getPoint: function(t) {\n        return this.origin.add(this.direction.multiply(t));\n    }\n};\nvar lightDir = new Vector3(1, 1, 1).normalize();\nvar lightColor = Color.white;\nCheckerMaterial = function(scale, reflectiveness) {\n    this.scale = scale;\n    this.reflectiveness = reflectiveness;\n};\nCheckerMaterial.prototype = {\n    sample: function(ray, position, normal) {\n        return Math.abs((Math.floor(position.x * 0.1) + Math.floor(position.z * this.scale)) % 2) < 1 ? Color.black : Color.white;\n    }\n};\nfunction rayTraceRecursive(scene, ray, maxReflect) {\n    var result = scene.intersect(ray);\n    if (result.geometry) {\n        var reflectiveness = result.geometry.material.reflectiveness;\n        var color = result.geometry.material.sample(ray, result.position, result.normal);\n        color = color.multiply(1 - reflectiveness);\n        if (reflectiveness > 0 && maxReflect > 0) {\n            var r = result.normal.multiply(-2 * result.normal.dot(ray.direction)).add(ray.direction);\n            ray = new Ray3(result.position, r);\n            var reflectedColor = rayTraceRecursive(scene, ray, maxReflect - 1);\n            color = color.add(reflectedColor.multiply(reflectiveness));\n        }\n        return color;\n    } else\n        return Color.black;\n}\nfunction rayTraceReflection(canvas, scene, camera, maxReflect) {\n    if (!canvas || !canvas.getContext)\n        return;\n    var ctx = canvas.getContext(\"2d\");\n    if (!ctx.getImageData)\n        return;\n    var w = canvas.attributes.width.value;\n    var h = canvas.attributes.height.value;\n    ctx.fillStyle = \"rgb(0,0,0)\";\n    ctx.fillRect(0, 0, w, h);\n    var imgdata = ctx.getImageData(0, 0, w, h);\n    var pixels = imgdata.data;\n    scene.initialize();\n    camera.initialize();\n    var i = 0;\n    for (var y = 0; y < h; y++) {\n        var sy = 1 - y / h;\n        for (var x = 0; x < w; x++) {\n            var sx = x / w;\n            var ray = camera.generateRay(sx, sy);\n            var color = rayTraceRecursive(scene, ray, maxReflect);\n            pixels[i++] = color.r * 255;\n            pixels[i++] = color.g * 255;\n            pixels[i++] = color.b * 255;\n            pixels[i++] = 255;\n        }\n    }\n    ctx.putImageData(imgdata, 0, 0);\n}\nfunction render_pic(){\n    var canvas = document.getElementById('renderCanvas');\n    canvas.style.display = \"block\";\n    var plane = new Plane(new Vector3(0, 1, 0), 0);\n    var sphere1 = new Sphere(new Vector3(-10, 10, -10), 10);\n    var sphere2 = new Sphere(new Vector3(10, 10, -10), 10);\n    plane.material = new CheckerMaterial(0.1, 0.5);\n    sphere1.material = new PhongMaterial(Color.red, Color.white, 20, 0.25);\n    sphere2.material = new PhongMaterial(Color.blue, Color.white, 20, 0.25);\n    var zx,zy,zz,reflect_times,camera;\n    zx = parseInt(document.getElementById('pos_x').value,10);\n    zy = parseInt(document.getElementById('pos_y').value,10);\n    zz = parseInt(document.getElementById('pos_z').value,10);\n    reflect_times = parseInt(document.getElementById('reflect_times').value,10);\n    camera =  new PerspectiveCamera(new Vector3(zx, zy, zz), new Vector3(0, 0, -1), new Vector3(0, 1, 0), 90);\n    rayTraceReflection(\n    canvas,\n    new Union([plane, sphere1, sphere2]),\n    camera,\n    reflect_times);\n}\n</script>","categories":["计算机编程"],"tags":["计算机图形学","raytracing"]},{"title":"内容价值评估的技术分析","url":"/2020-04-12-content-evaluate/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在推荐系统的业务场景中我们的最终目的是把优质的内容从内容池中挑出来推荐给用户</p>\n<ol>\n<li>降低用户获取信息的成本</li>\n<li>提供给用户平均质量更高的内容</li>\n<li>助力运营等提高内容分发的效率<br>如何评价一个内容的质量好坏就成了我们面对的一个重要问题<h2 id=\"如何找到用技术手段评估内容的质量\"><a href=\"#如何找到用技术手段评估内容的质量\" class=\"headerlink\" title=\"如何找到用技术手段评估内容的质量\"></a>如何找到用技术手段评估内容的质量</h2><h3 id=\"通过用户行为来辅助评估\"><a href=\"#通过用户行为来辅助评估\" class=\"headerlink\" title=\"通过用户行为来辅助评估\"></a>通过用户行为来辅助评估</h3>我们可以很明显的知道用户点击率高的内容大概率会是吸引人的内容。由此我们可以对内容的点击率进行统计，根据点击率给予内容一定的分数，点击率越高，内容分数越高, 我们认为内容越优质。<br>例如我们可以开发如下函数<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span></span>(a:<span class=\"type\">Article</span>):<span class=\"type\">Double</span> = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a.showCount &gt;= <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t \t<span class=\"keyword\">return</span> a.clickRate/getMaxClickRate()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这种情况是最直观的也最简单的, 但是我们会遇到一些问题</li>\n</ol>\n<ul>\n<li>问题1: 如果一个内容刚刚发布，还没有被展示或者被点击，此时没有用户行为数据，该如何评估内容的质量呢, 就像上面我们过滤掉了展示200次以下的内容，这部分内容因为展示次数少，误差较大</li>\n<li>问题2: 如果一个内容A 刚刚发布不久，被展示了10次，点击了5次， 点击率50%， 另一个内容B发布了2天，被展示了20万次，点击了5万次，点击率 25%， 是否能说明A内容比B内容优秀<br>相信从上面两个问题也能看出来了，单纯的依靠点击率是肯定不合适的，既会受到一定的限制，又会造成得分结果的不稳定。处理1，2问题的方法也比较简单，只需要按照根据分布情况给一个预估的默认值， 并加上一定的统计门槛就可以了<h3 id=\"挖掘内容本身的特征属性进行评估\"><a href=\"#挖掘内容本身的特征属性进行评估\" class=\"headerlink\" title=\"挖掘内容本身的特征属性进行评估\"></a>挖掘内容本身的特征属性进行评估</h3>假如一个内容A点击率比较高，我们可以思考可能的原因是什么呢？<br>有可能是作者文字功底比较好，有可能是作者比较出名， 有可能是里面有一些特征一看就知道内容质量比较差。比如 标题很短，或者标题没有信息含量。<br>总而言之我们可以根据内容的 发布时间， 作者，含有的关键词，视频的清晰度，内容的长度，等各种属性给内容计算一个基础的内容得分。大概函数定义如下<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span></span>(c: <span class=\"type\">Article</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">  \tf(c.title, c.author, c.published, c.length, c.keywords)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n如此一来我们就可以对各种内容做一个基本的价值评估，可以在视频还未获得曝光和点击的时候对视频有一个大概的评价。后续的点击率等行为表现可以辅助纠正各种特征的积分权重<h3 id=\"考虑现在的时间和环境因素进行评估\"><a href=\"#考虑现在的时间和环境因素进行评估\" class=\"headerlink\" title=\"考虑现在的时间和环境因素进行评估\"></a>考虑现在的时间和环境因素进行评估</h3>内容的质量表现还会随着时间和环境因素而变化。<br>比如股市的资讯类消息， 就是在发布的12小时内价值比较高，而且其价值会随着时间逐渐减少，3天以上基本就毫无价值了。<br>内容受到环境影响也很明显，这次的新冠疫情导致口罩，病毒等相关的内容受到了极大的关注。可能在平时来说，口罩等关键词并不会有如此大的权重，但是在疫情期间，全民关注，这个时候就应该根据环境适当的给热门词增加权重表现<br>环境和内容的匹配主要还是要依据统计数据来预估一个特征在环境中的匹配度，然后根据这个匹配度对内容进行评估，在根据用户对内容后续的行为表现来调整这个匹配度的计算规则<h3 id=\"考虑目标用户特征\"><a href=\"#考虑目标用户特征\" class=\"headerlink\" title=\"考虑目标用户特征\"></a>考虑目标用户特征</h3>同样的内容对不同的用户也会有不同的价值。同一篇手机评测内容，对魅族手机用户和小米手机用户分别展示1000次收到的点击返回结果可能就有很大不同， 对数码爱好者和小白分开推送效果也会不一样。<br>我们如果要对用户和内容匹配一方面要获取到用户的用户画像信息，一方面要对内容做内容特征分析， 然后再进行match。<br>定义计分函数如下<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calScore</span></span>(user:<span class=\"type\">Set</span>, env:<span class=\"type\">Set</span>&lt;&gt;) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">  f(user, env, content)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"综合多种因素进行评估\"><a href=\"#综合多种因素进行评估\" class=\"headerlink\" title=\"综合多种因素进行评估\"></a>综合多种因素进行评估</h3>上面的几种方法都有各自的优点和缺点，多种评估策略一起配合使用可以一定程度上增强价值评估的可信度。综合推荐就是同时考虑 用户， 环境，时间，内容本身等多种因素，根据情况实时的计算<br>不同属性的得分之间可以采用加和或者相乘 的方法。<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>内容的价值评估是一个跟场景，用户，内容都相关的事情， 没有办法使用一个统一的，固定的算法或者模型对内容进行价值评估， 但是我们可以根据现有的用户行为， 环境特征， 内容特征等，尽可能的覆盖所有可能的影响因子， 给出一个相对比较可信的价值度量标准</li>\n</ul>\n","categories":["工程经验"],"tags":["推荐系统"]},{"title":"推荐系统流量池的构建","url":"/2020-05-02-rec-flows-pool/","content":"<p>这篇文章的目的是希望构建一套可行的，灵活的，能支持我们常见业务需求的流量池系统架构设计</p>\n<h2 id=\"内容流量池的目的\"><a href=\"#内容流量池的目的\" class=\"headerlink\" title=\"内容流量池的目的\"></a>内容流量池的目的</h2><p>我们希望通过流量池达到以下目标</p>\n<ul>\n<li><p>解决内容推荐的马太效应</p>\n</li>\n<li><p>限制点击率比较低的内容的投放次数</p>\n</li>\n<li><p>帮助运营提升内容分发的效率</p>\n</li>\n</ul>\n<h2 id=\"流量池的整体架构设计\"><a href=\"#流量池的整体架构设计\" class=\"headerlink\" title=\"流量池的整体架构设计\"></a>流量池的整体架构设计</h2><p><img data-src=\"https://i.loli.net/2020/05/09/sGhXxjwLYngEePB.jpg\" alt=\"推荐系统流量池.jpg\"></p>\n<p>所有召回策略从流量池中进行内容的召回，内容必须拥有流量才能被推荐系统推荐出去。</p>\n<h2 id=\"内容流量池的概念\"><a href=\"#内容流量池的概念\" class=\"headerlink\" title=\"内容流量池的概念\"></a>内容流量池的概念</h2><p>一个承载内容和内容可推荐次数的数据集合，流量池的核心数据是一个类似于<code>&lt;c10086, 1000&gt;</code>的<code>&lt;k，v&gt;</code>结构。表示的含义也很简单，就是c10086这个编号的内容拥有1000次的推荐次数。</p>\n<p>流量池内容的推荐符合如下基本规则</p>\n<ol>\n<li>拥有流量的内容才允许被推荐，内容每推荐一次消耗一个推荐流量</li>\n<li>内容的流量消耗完毕可以继续添加流量</li>\n<li>内容流量拥有不同的类型，同一个内容可以同时拥有多种流量</li>\n</ol>\n<h2 id=\"流量的定义\"><a href=\"#流量的定义\" class=\"headerlink\" title=\"流量的定义\"></a>流量的定义</h2><p>一个流量代表对某个用户的某一次推荐的某一个内容，如果一个用户一次请求中请求了10条的数据， 那么这一次推荐就消耗了10个流量， 推荐结果中的每个内容推荐流量 -1。</p>\n<p>用户对某一个内容的推荐不会重复， 所以一个用户对某个内容至多拥有一个流量。同时推荐流量也限制了内容的被推荐次数，假设一个内容的总流量是1000，意味着至多被推荐给1000个人。</p>\n<h2 id=\"流量池的生成和使用规则\"><a href=\"#流量池的生成和使用规则\" class=\"headerlink\" title=\"流量池的生成和使用规则\"></a>流量池的生成和使用规则</h2><ol>\n<li>流量分批次，一个批次500个流量。所有内容默认拥有500次的测试流量， 也就是说所有内容至少应被推荐500次</li>\n<li>每个批次的流量消耗完毕进行点击率/互动率的计算，达标的继续分发流量。除第一次外的流量批次统一为叠加流量。叠加流量消耗完毕也进行点击率的计算，达标的继续进行新的流量分发。</li>\n<li>运营可以为内容投放运营流量，流量消耗的优先级：运营流量&gt;叠加流量&gt;测试流量。运营流量也分批次投放，也需要计算点击率，运营流量消耗完毕以后不再进行叠加流量的追加。</li>\n</ol>\n<h3 id=\"如何限制点击率比较低的内容的投放次数\"><a href=\"#如何限制点击率比较低的内容的投放次数\" class=\"headerlink\" title=\"如何限制点击率比较低的内容的投放次数\"></a>如何限制点击率比较低的内容的投放次数</h3><p>每个批次的内容流量消耗完毕立即进行点击掉过计算， 达标的才能继续活的流量。点击率低的不达标内容不再进行推荐。<br>每个内容至少拥有500次的测试流量，用于充分测试其质量表现。</p>\n<h3 id=\"如何解决马太效应\"><a href=\"#如何解决马太效应\" class=\"headerlink\" title=\"如何解决马太效应\"></a>如何解决马太效应</h3><p>内容流量的生成门槛随着流量分发的次数逐步提高。 例如，a内容前1000次流量点击率12%， 阈值为 6% ，将继续获得1000次流量的额度，等这1000个流量消耗完毕，对应的门槛提高到 12%， 假如这第二批次的流量点击率为10%， 将被终止流量的继续投放。已消耗流量越多，获得新流量的点击率阈值越高。</p>\n<h3 id=\"如何帮助运营人员提高内容分发效率\"><a href=\"#如何帮助运营人员提高内容分发效率\" class=\"headerlink\" title=\"如何帮助运营人员提高内容分发效率\"></a>如何帮助运营人员提高内容分发效率</h3><p>运营人员可以为内容赋予额外的流量，拥有充足流量的内容将在推荐策略中获得加权， 可用流量越多的内容，越容易被推荐出去。</p>\n<h2 id=\"定向推荐-指定用户范围的推荐\"><a href=\"#定向推荐-指定用户范围的推荐\" class=\"headerlink\" title=\"定向推荐: 指定用户范围的推荐\"></a>定向推荐: 指定用户范围的推荐</h2><p>上面的流量池只能实现对某内容的一定次数的推荐， 其实还可以在此基础上实现对特征用户的定向流量投放。即我们可以指定某内容向某一类用户进行推荐的次数。</p>\n<p>这个功能可以用来进行运营赋能， 帮助运营更精准的进行流量投放， 也可以帮助创作者进行早期的用户积累和帮创作者提高内容的曝光度。</p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>我们可以为用户设置一系列的特征列表例如</p>\n<table>\n<thead>\n<tr>\n<th>用户/特征</th>\n<th>&gt;30岁</th>\n<th>男性</th>\n<th>郭德纲粉丝</th>\n<th>杨幂粉丝</th>\n<th>喜欢综艺</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>我们如果要对用户进行精准投放，只需要选中一部分特征用户， 例如，我们要把内容A对杨幂的粉丝进行投放， 内容B对30岁以下的男性用进行投放<br>那我们可以生成如下两个数据序列</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> 杨幂粉丝 = <span class=\"type\">Set</span>(<span class=\"type\">A</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"number\">30</span>岁以下男性用户 = <span class=\"type\">Set</span>(<span class=\"type\">B</span>)</span><br></pre></td></tr></table></figure>\n\n<p>用户1 在获取推荐结果的时候，根据自己的用户特征列表和列表中特征对应的待推荐内容进行融合排序推荐</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRecommendations</span></span>(user:<span class=\"type\">String</span>): <span class=\"type\">Seq</span> = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">val</span> fetureList:<span class=\"type\">Seq</span> = getFeture(user)</span><br><span class=\"line\">\tfetureList.flatMap(f =&gt; getRecallByFeture())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>流量池系统其实是通过认为的控制内容的可曝光次数， 来对推荐结果的分布进行干预， 为了保证新内容的充分曝光，新内容会被给予一定次数的固定流量。表现好的内容将持续不断的获得推荐流量，表现不好的内容将在一定的推荐次数后不再推荐，空出来的推荐机会留给其他表现更好的内容。</p>\n<p>流量池的逻辑相对简单</p>\n","categories":["工程经验"],"tags":["推荐系统"]},{"title":"用户特征挖掘的方案","url":"/2020-04-11-analyze-user-feture/","content":"<p>文中所有内容均以类似今日头条的内容平台做例子</p>\n<h2 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h2><p><img data-src=\"https://i.loli.net/2020/05/09/nTbNjk8MtJHic19.png\" alt=\"user-feture.png\"></p>\n<h2 id=\"用户兴趣特征的挖掘\"><a href=\"#用户兴趣特征的挖掘\" class=\"headerlink\" title=\"用户兴趣特征的挖掘\"></a>用户兴趣特征的挖掘</h2><p>推荐系统所依赖的数据之中一类很重要的信息是用户到底喜欢什么，这个喜欢的标的物可能是某一类内容， 某一个人，某一个话题相关的内容等，我们需要做的事情就是尽可能的发现用户可能喜欢的事物标签。<br>其实用户的兴趣挖掘说难也难，说容易也容易。容易的地方在于很好入门，你只要知道一个序列的用户行为信息，就可以根据行为信息获得用户的部分兴趣特征。难的地方是你如果想要获得比较完整的，或者比较准确的用户兴趣，其实也是非常有挑战性的工作。<br>我想分享一点我自己在挖掘用户兴趣方面的想法和经验。</p>\n<blockquote>\n<p>ps:  我们这里所提及的用户兴趣统统是指用户的隐式特征，就是从用户行为中提取的非主动操作的信息</p>\n</blockquote>\n<h2 id=\"行为数据-用户特征矩阵-内容特征匹配\"><a href=\"#行为数据-用户特征矩阵-内容特征匹配\" class=\"headerlink\" title=\"行为数据-用户特征矩阵-内容特征匹配\"></a>行为数据-用户特征矩阵-内容特征匹配</h2><p>假设我们拥有一段用户的行为信息序列， 我们可以非常简单的统计出来用户经常观看的文章。<br>但是我们不能向用户推荐已经看过的文章， 所以我们需要挖掘用户观看某文章背后的潜在信息， 并给用户推荐内容比较相似的或者关键词比较相关的文章内容。</p>\n<h3 id=\"用户特征矩阵的生成\"><a href=\"#用户特征矩阵的生成\" class=\"headerlink\" title=\"用户特征矩阵的生成\"></a>用户特征矩阵的生成</h3><p>比如：我们可以基于用户观看的文章背后的标签出现次数进行分数统计，标签每出现一次记一分，获得一个用户对标签的喜好表。如下<br>| 用户 | 新冠肺炎 | 金融政策 | 李大霄 | 新闻资讯 |<br>| —- | ——– | ——– | —— | ——– |<br>| 1    | 5        | 6        | 0      | 1        |<br>| 2    | 2        | 0        | 9      | 3        |<br>| 3    | 3        | 4        | 3      | 1        |<br>| 4    | 0        | 5        | 4      | 9        |</p>\n<p>从上面我们可以知道用户1喜欢 金融政策和新冠肺炎相关的内容，用户2可能是李大霄的粉丝，喜欢看李大霄相关的文章。</p>\n<p>为了获取这个列表我们也可以根据用户对不同内容标签的点击率进行归一化的分数统计， 取点击率比较高的标签。一样可以得到蕾丝上面的<strong>&lt;用户, 特征,喜好程度&gt;</strong>的三元序列</p>\n<h3 id=\"根据特征矩阵进行内容推荐\"><a href=\"#根据特征矩阵进行内容推荐\" class=\"headerlink\" title=\"根据特征矩阵进行内容推荐\"></a>根据特征矩阵进行内容推荐</h3><p>然后我们就可以根据未推荐文章中出现的用户喜欢的特征和特征权重对不同文章进行计分， 对内容综合积分，按照分数进行排序输出。<br>| 文章 | 新冠肺炎 | 金融政策 | 李大霄 | 新闻咨询 |<br>| —- | ——– | ——– | —— | ——– |<br>| A    | 0        | 3        | 1      | 0        |<br>| B    | 1        | 0        | 1      | 2        |</p>\n<p>假设我们有A,B两篇文章，内容标签如上。我们可以对用户1， 2与内容的匹配程度进行分值计算。可以得到如下表格<br>| 用户/文章 | a           | b                          |<br>| ——— | ———– | ————————– |<br>| 1         | 3 x 6  = 18 | 5 x 1+ 2 x  1 = 7          |<br>| 2         | 9 x 1 = 9   | 1 x 2 + 1 x 9 + 2 x 3 = 17 |</p>\n<p>很容的知道应该给用户1 推荐 A 文章， 给用户2推荐B文章。<br>我们也可以采用其他的综合考虑权重的计分方法， 但是核心要点都是两个，一个是获得用户与特征的矩阵， 一个是获得内容和特征的矩阵。鉴于计算量巨大，可以使用 矩阵相乘的算法进行加速。</p>\n<h2 id=\"行为数据-用户特征-用户相似度-内容推荐\"><a href=\"#行为数据-用户特征-用户相似度-内容推荐\" class=\"headerlink\" title=\"行为数据/用户特征-用户相似度-内容推荐\"></a>行为数据/用户特征-用户相似度-内容推荐</h2><p>我们也可以根据用户经常观看的信息， 寻找与用户比较相似的用户群体，然后假定用户与相似的用户群具有相似喜好， 从用户群体的共同喜欢内容中挑选出来一些用户未观看的推荐给用户</p>\n<h3 id=\"计算用户的相似用户\"><a href=\"#计算用户的相似用户\" class=\"headerlink\" title=\"计算用户的相似用户\"></a>计算用户的相似用户</h3><ul>\n<li>使用用户行为计算相似度</li>\n</ul>\n<p>我们可以使用用户行为信息如此计算两个用户的相似度<br>$$ Y(similar) =  (U1 ∩ U2)/ (U1 ∪ U2) $$<br>使用用户1 和用户2 的观看内容中相交的部分 / 用户1 和用户2 内容的并集， 能得到两个人都喜欢的内容，在两个人观看总内容的一个比例</p>\n<ul>\n<li>使用用户特征计算相似度</li>\n</ul>\n<p>我们也可以通过用户身上的标签，比如 ，使用的手机型号，年龄，性别，地区等信息。 一样采用如下公式进行用户标签相似度的计算。计算结果与上面用户行为相似度结果一样 </p>\n<p>$$Y(similar) =  (U1 ∩ U2)/ (U1 ∪ U2)$$</p>\n<h3 id=\"根据相似用户进行推荐\"><a href=\"#根据相似用户进行推荐\" class=\"headerlink\" title=\"根据相似用户进行推荐\"></a>根据相似用户进行推荐</h3><p>这个比例可以作用两个用户相似度的评价标准, 拿到用户的相似用户集合以后，通过统计相似用户已观看列表中的的内容的出现次数。可以得到如下表格</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">用户/内容</th>\n<th>A</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td>9</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>选择出现次数多的进行推荐即可。</p>\n<p>也可以进一步利用相似用户的内容出现次数，通过统计去更新用户的特征矩阵中的(用户-&gt;特征)的分值。然后再根据特征的加权获取最终的推荐结果</p>\n<h2 id=\"用户数据-用户特征-用户分群-用户相似推荐\"><a href=\"#用户数据-用户特征-用户分群-用户相似推荐\" class=\"headerlink\" title=\"用户数据-用户特征-用户分群-用户相似推荐\"></a>用户数据-用户特征-用户分群-用户相似推荐</h2><p>我们也可以根据用户本身的特征，对用户进行分类。例如：女性用户，30-35岁， 使用安卓手机，经常在晚上6-9点使用app等特征对相似的用户进行分群</p>\n<p>然后统计分析该分群用户的行为记录。采用类似于上面用户相似度的统计方法，获得用户对内容或者对特征的分数矩阵结果</p>\n<h2 id=\"综合方案\"><a href=\"#综合方案\" class=\"headerlink\" title=\"综合方案\"></a>综合方案</h2><p>我们在实际的生产中可以综合以上各种策略， 获取用户的特征矩阵并对内容进行计算分数。在根据实际场景中的效果进行不同权重和比例的动态调整。<br>一般来说是可以获得不错的效果的。</p>\n","categories":["工程经验"],"tags":["推荐系统"]}]